#+TITLE: Emacs configuration for internet access
#+STARTUP: overview indent

* Preliminaries

All functions below use lexical binding.
#+begin_src emacs-lisp
;; -*- coding: utf-8; lexical-binding: t -*-
(message "... starting settings-internet")
#+end_src

This configuration requires packages

  - engine-mode

External programs that should be on =exec-path= are

  - PuTTY (Tramp, Windows)


The file =settings-minimal.org= should be loaded before loading this
file.

* TOTP

Code and instructions for generating TOTP (time-based one time
passwords) [[https://www.masteringemacs.org/article/securely-generating-totp-tokens-emacs][here]].

#+begin_src emacs-lisp
  ;; Taken from Jurgen Hotzel's `totp.el':
  ;; https://github.com/juergenhoetzel/emacs-totp
  (require 'bindat)
  (require 'gnutls)
  (require 'hexl)
  (require 'auth-source)

  (defun totp--hex-decode-string (string)
    "Hex-decode STRING and return the result as a unibyte string."
    (apply #'unibyte-string
           (seq-map (lambda (s) (hexl-htoi (aref s 0) (aref s 1)))
                    (seq-partition string 2))))

  (defun totp (string &optional time digits)
    "Return a TOTP token using the secret hex STRING and current time.
  TIME is used as counter value instead of current time, if non-nil.
  DIGITS is the number of pin digits and defaults to 6."
    (let* ((key-bytes (totp--hex-decode-string (upcase string)))
           (counter (truncate (/ (or time (time-to-seconds)) 30)))
           (digits (or digits 6))
           (format-string (format "%%0%dd" digits))
           ;; we have to manually split the 64 bit number (u64 not supported in Emacs 27.2)
           (counter-bytes (bindat-pack  '((:high u32)
                                          (:low u32))
                                        `((:high . ,(ash counter -32))
                                          (:low . ,(logand counter #xffffffff)))))
           (mac (gnutls-hash-mac 'SHA1 key-bytes counter-bytes))
           (offset (logand (bindat-get-field
                            (bindat-unpack '((:offset u8)) mac 19) :offset) #xf)))
      (format format-string
              (mod
               (logand (bindat-get-field
                        (bindat-unpack '((:totp-pin u32)) mac  offset) :totp-pin)
                       #x7fffffff)
               (expt 10 digits)))))
#+end_src

#+begin_src emacs-lisp
  (defconst base32-alphabet
    (let ((tbl (make-char-table nil)))
      (dolist (mapping '(("A" . 0) ("B" . 1) ("C" . 2) ("D" . 3)
                         ("E" . 4) ("F" . 5) ("G" . 6)
                         ("H" . 7) ("I" . 8) ("J" . 9) ("K" . 10)
                         ("L" . 11) ("M" . 12) ("N" . 13)
                         ("O" . 14) ("P" . 15) ("Q" . 16) ("R" . 17)
                         ("S" . 18) ("T" . 19) ("U" . 20)
                         ("V" . 21) ("W" . 22) ("X" . 23) ("Y" . 24)
                         ("Z" . 25) ("2" . 26) ("3" . 27)
                         ("4" . 28) ("5" . 29) ("6" . 30) ("7" . 31)))
        (aset tbl (string-to-char (car mapping)) (cdr mapping)))
      tbl)
    "Base-32 mapping table, as defined in RFC 4648.")

  (defun base32-hex-decode (string)
    "The cheats' version of base-32 decode.

  This is not a 100% faithful implementation of RFC 4648. The
  concept of encoding partial quanta is not implemented fully.

  No attempt is made to pad the output either as that is not
  required for HMAC-TOTP."
    (unless (mod (length string) 8)
      (error "Padding is incorrect"))
    (setq string (upcase string))
    (let ((trimmed-array (append (string-trim-right string "=+") nil)))
      (format "%X" (seq-reduce
                    (lambda (acc char) (+ (ash acc 5) (aref base32-alphabet char)))
                    trimmed-array 0))))
#+end_src

* Tramp

Note: A possibly useful blog post: [[https://www.eigenbahn.com/2020/07/08/painless-emacs-remote-shells][Painless Emacs remote shells]].

From [[https://gist.github.com/agumonkey/dc6e55e7e47de9b34980e933a346e82bhttps://gist.github.com/agumonkey/dc6e55e7e47de9b34980e933a346e82b][init-tramp-plink.el]]
#+begin_src emacs-lisp
  (require 'tramp)
  (modify-coding-system-alist 'process "plink" 'utf-8-unix)
  (setq tramp-default-method "plink"
        tramp-completion-without-shell-p t
        tramp-verbose 10
        tramp-debug-buffer t)

  ;; (let ((path (getenv "PATH"))
  ;;       (plink (expand-file-name "PuTTY" (getenv "ProgramFiles(x86)"))))
  ;;   (setenv "PATH" (concat plink path-separator path)))

  ;; ;; (add-to-list 'exec-path "C:/Program Files (x86)/PuTTY/")
  ;; (add-to-list 'exec-path (expand-file-name "PuTTY" (getenv "ProgramFiles(x86)")))
#+end_src

Exclude Tramp buffers from preview: [[https://github.com/minad/consult/wiki#do-not-preview-exwm-windows-or-tramp-buffers][Consult wiki]]
#+begin_src emacs-lisp
  (defun consult-buffer-state-no-tramp ()
    "Buffer state function that doesn't preview Tramp buffers."
    (let ((orig-state (consult--buffer-state))
          (filter (lambda (action cand)
                    (if (and cand
                             (or (eq action 'return)
                                 (let ((buffer (get-buffer cand)))
                                   (and buffer
                                        (not (file-remote-p
                                              (buffer-local-value 'default-directory buffer)))))))
                        cand
                      nil))))
      (lambda (action cand)
        (funcall orig-state action (funcall filter action cand)))))

  ;; (setq consult--source-buffer
  ;;       (plist-put consult--source-buffer :state #'consult-buffer-state-no-tramp))
#+end_src

From [[https://www.emacswiki.org/emacs/Tramp_on_Windows][Tramp on Windows]]
#+begin_src emacs-lisp
    ;; (when (eq window-system 'w32)
    ;;   (setq tramp-default-method "plink")
    ;;   (when (and (not (string-match my-putty-directory (getenv "PATH")))
    ;; 	     (file-directory-p my-putty-directory))
    ;;     (setenv "PATH" (concat my-putty-directory ";" (getenv "PATH")))
    ;;     (add-to-list 'exec-path my-putty-directory)))
#+end_src

* ERC

A quickie [[https://systemcrafters.net/chatting-with-emacs/irc-basics-with-erc/][introduction]] to the Emacs IRC client.
#+begin_src emacs-lisp
  (setq erc-server "irc.libera.chat"
        erc-nick "rodprice"
        erc-user-full-name "Rodney D. Price"
        erc-track-shorten-start 8   ;; length of tracker in mode line
        erc-autojoin-channels-alist ;; channels to join automatically
        '(("irc.libera.chat" "#emacs"))
        erc-join-buffer nil         ;; display ERC buffer in this window
        erc-kill-buffer-on-part t   ;; kill the ERC buffer when you quit
        erc-auto-query 'window)     ;; pops up new window for private message
#+end_src

* Docker

Notes: Run Emacs from inside Docker; instructions [[https://github.com/JAremko/docker-emacs][here]]. Someone else
is running what he says is an Emacs Python IDE using Docker, [[https://rebeja.eu/posts/python-ide-with-emacs-and-docker/][here]]. Yet
another way to run Docker, a Python script called [[https://github.com/jkitchin/devcontainer][devcontainer]].

Emacs Docker package [[https://github.com/Silex/docker.el][here]].
#+begin_src emacs-lisp :tangle no
  (use-package docker
    :ensure t)
#+end_src

* Mastodon

From Sacha Chua's configuration [[https://sachachua.com/dotemacs/index.html#mastodon][here]].
#+begin_src emacs-lisp
  (defun my-mastodon-toot-public-string (message)
    (interactive "sMessage: ")
    (let* ((endpoint (mastodon-http--api "statuses"))
           (args `(("status" . ,message)
                   ("visibility" . "public"))))
      (mastodon-http--post endpoint args nil)))
#+end_src

#+begin_src emacs-lisp
  (defun my-mastodon-show-my-followers ()
    (interactive)
    (mastodon-profile--make-profile-buffer-for
     (mastodon-profile--lookup-account-in-status (mastodon-auth--get-account-name) nil)
     "followers"
     #'mastodon-profile--add-author-bylines))
#+end_src

#+begin_src emacs-lisp
  (defun my-yank-mastodon-link ()
    (interactive)
    (let* ((url (current-kill 0))
           (url-parsed (url-generic-parse-url url))
           (user (file-name-base (url-filename url-parsed))))
      (cond
       ((derived-mode-p 'oddmuse-mode) (insert "[" url " " user
                                               "@" (url-host url-parsed) "]"))
       ((derived-mode-p 'org-mode) (insert "[[" url "][" user
                                           "@" (url-host url-parsed) "]]"))
       (t (insert url)))))
#+end_src

#+begin_src emacs-lisp
  (autoload 'mastodon-notifications--get-mentions "mastodon-notifications" nil t)
#+end_src

#+begin_src emacs-lisp
  (use-package mastodon
    :ensure t
    :bind
    (:map mastodon-mode-map
          ("g" . mastodon-tl--update)
          ;; see org-capture-templates addition
          ("o" . (lambda () (interactive) (org-capture nil "m"))))
    :commands (mastodon-http--api
               mastodon-http--post
               mastodon-mode
               mastodon-http--get-search-json
               mastodon-tl--get-local-timeline)
    :config
    (mastodon-discover)
    (setq mastodon-instance-url "https://mathstodon.xyz"
          mastodon-active-user "rodprice"))
#+end_src

Render LaTeX equations in Mastodon buffers; from [[https://blog.nawaz.org/posts/2022/Dec/rendering-latex-formulae-in-mastodonel/][here]].
#+begin_src emacs-lisp :tangle no
  (defun mn:preview-latex-toot (&optional arg)
    "Toggle preview of the LaTeX fragments in Mastodon toots.

  If the cursor is on a Mastodon toot, create the image and
  overlay it over the source code.

  With a `\\[universal-argument]' prefix argument ARG, display
  image for all toots in the buffer.

  With a `\\[universal-argument] \\[universal-argument]' prefix
  argument ARG, clear images for the current toot.

  With a `\\[universal-argument] \\[universal-argument] \
  \\[universal-argument]' prefix argument ARG, clear images for the
  whole buffer."
    (interactive "P")
    (let ((toot-begin
           (previous-single-property-change
            (point)
            'byline
            (current-buffer)))
          (toot-end
           (next-single-property-change
            (point)
            'byline
            (current-buffer))))
      (cond
       ((not (display-graphic-p)) nil)
       ;; Clear whole buffer.
       ((equal arg '(64))
        (org-clear-latex-preview (point-min) (point-max))
        (message "LaTeX previews removed from buffer"))
       ;; Clear current toot.
       ((equal arg '(16))
        (org-clear-latex-preview toot-begin toot-end))
       ;; Preview whole buffer.
       ((equal arg '(4))
        (message "Creating LaTeX previews in buffer...")
        (org--latex-preview-region (point-min) (point-max))
        (message "Creating LaTeX previews in buffer... done."))
       ((org--latex-preview-region toot-begin toot-end)))))

  (define-key mastodon-mode-map (kbd "C-c C-x C-l") #'mn:preview-latex-toot)
#+end_src

* Search engines

Access search engines from emacs, [[https://github.com/hrs/engine-mode][here]].
#+begin_src emacs-lisp
  (use-package engine-mode
    :ensure t
    :bind-keymap ("C-c s" . engine-mode-prefixed-map)
    :config
    (defengine google
               "https://www.google.com/search?ie=utf-8&oe=utf-8&q=%s"
               :keybinding "g")
    (defengine wikipedia
               "https://www.wikipedia.org/search-redirect.php?language=en&go=Go&search=%s"
               :keybinding "w")
    (defengine stack-overflow
               "https://stackoverflow.com/search?q=%s"
               :keybinding "s")
    (defengine emacs-stack-exchange
               "https://emacs.stackexchange.com/search?q=%s"
               :keybinding "e")
    (defengine python-stack-exchange
               "https://python.stackexchange.com/search?q=%s"
               :keybinding "p")
    (defengine github
               "https://github.com/search?ref=simplesearch&q=%s"
               :keybinding "h")
    (defengine wolfram-alpha
               "https://www.wolframalpha.com/input/?i=%s"
               :keybinding "a")
    (engine-mode t))
#+end_src

* RSS

Get a random [[https://github.com/gonewest818/adafruit-wisdom.el][quote]] from [[https://adafruit.com][adafruit.com]] and display it.
#+begin_src emacs-lisp
  (use-package adafruit-wisdom
    :ensure t
    :defer t)
#+end_src

* Notes

Compiling Emacs 29 on Windows with MSYS2, [[https://readingworldmagazine.com/emacs/2022-02-24-compiling-emacs-29-from-source-on-windows/][here]] (a bit dated). Good
advice on mixing Git for Windows, MSYS2, and MINGW Emacs [[https://lists.gnu.org/archive/html/help-gnu-emacs/2022-02/msg00230.html][here]]. I
haven't followed it, unfortunately. Read the entire thread.

The psychology of bad habits, [[https://iai.tv/video/the-psychology-of-bad-habits-susan-michie][here]].

Look for the section "space as control key" in this guy's [[https://github.com/svend/dot-emacsd][config]].
Might be a way to circumvent browser's nasty habit of stealing key
strokes. Also, see "custom hook for all major modes":
#+begin_src emacs-lisp :tangle no
(defun my/run-local-vars-mode-hook ()
  "Run a hook for the `major-mode` after the local variables have been processed."
  (run-hooks (intern (concat (symbol-name major-mode) "-local-vars-hook"))))
(add-hook 'hack-local-variables-hook 'my/run-local-vars-mode-hook)
#+end_src

Make your blog look like the [[https://github.com/moble/www_black-holes_org][black-holes.org]] website.

Installing Doom Emacs through =git-bash=, [[https://earvingad.github.io/posts/doom_emacs_windows/][here]].

Really irritating name, [[https://github.com/p3r7/awesome-elisp][Awesome Elisp]], but a useful cookbook guide.

Reproducible research and other things through [[https://github.com/jkitchin/scimax][Scimax]]. Python code
from the same author to work with org-mode, etc, called [[https://github.com/jkitchin/pycse][pycse]]. See
also [[https://kitchingroup.cheme.cmu.edu/pycse/intro.html][pycse docs]].
