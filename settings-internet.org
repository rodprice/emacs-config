#+TITLE: Emacs configuration for internet access
#+STARTUP: overview indent

* Preliminaries

All functions below use lexical binding.
#+begin_src emacs-lisp
;; -*- coding: utf-8; lexical-binding: t -*-
(message "... starting settings-internet")
#+end_src

This configuration requires packages

  - engine-mode

External programs that should be on =exec-path= are

  - PuTTY (Tramp, Windows)


The file =settings-minimal.org= should be loaded before loading this
file.

* TOTP

Code and instructions for generating TOTP (time-based one time
passwords) [[https://www.masteringemacs.org/article/securely-generating-totp-tokens-emacs][here]].

#+begin_src emacs-lisp
  (use-package totp
    :ensure nil
    :demand
    :load-path "lisp")
#+end_src

* Tramp

** Notes

The Tramp manual is [[info:tramp#Top][here]].

Remember that =default-directory= is buffer-local.
#+begin_src emacs-lisp :tangle no
  (file-remote-p default-directory 'user)
  (file-remote-p default-directory 'host)
#+end_src

** Docker and Tramp

The Emacs Wiki has a page on [[https://www.emacswiki.org/emacs/TrampAndDocker][Tramp and Docker]]. Emacs 29 has built-in
support in [[file:c:/Users/rdprice/Apps/msys64/ucrt64/share/emacs/29.2/lisp/net/tramp-container.el::(add-to-list 'tramp-methods][tramp-container.el]].

** Windows (PuTTY)

PuTTY documentation table of contents is [[https://the.earth.li/~sgtatham/putty/0.80/htmldoc/][here]].
See PuTTY documentation [[https://the.earth.li/~sgtatham/putty/0.80/htmldoc/Chapter8.html][Using public keys for SSH authentication]].

First, be sure that you can log into the remote machine using PuTTY.
My PuTTY configuration is named "ringer2" at IP address 172.20.130.251.

From the Windows menu, start PuTTYgen, the PuTTY key generator. At the
bottom of the PuTTYgen window, in the Parameters box, under "Type of
key to generate," select RSA, and under "Number of bits in a generated
key," type 2048. Then in the Actions section, press the Generate
button and follow the instructions.

If you choose, you can enter a key comment and key passphrase at this
point. Save both the private and public key to disk using the buttons
Save private key and Save public key. Also copy the public key found
in the "Public key for pasting into OpenSSH authorized keys file" box.

Use a text editor to paste the public key into a new file (named, for
instance, "new-auth-key") on your local machine, then open PSFTP from
the Windows menu. Type

> open ringer2
> lcd path-to-local-folder-holding-new-auth-key-file
> put new-auth-key
> bye

Then use PuTTY to log into the remote machine ringer2, and type

$ cd ~/.ssh
$ cat ../new-auth-key >> authorized_keys
$ rm ../new-auth-key
$ exit

Finally, open PuTTY again, select your configuration (mine is named
"ringer2") and ensure that the "Host Name (or IP address)" text box
contains username@172.20.130.251. In the Category box on the left,
under "Connection", open "SSH", then "Auth", then "Credentials". Click
the Browse button next to the "Private key file for authentication"
text box, navigate to the private key file you saved earlier, and
click "Open" to select it.

Now you should be able to log into the remote machine without using
your password.

** Setup

If on Windows, use the =plink= function provided by PuTTY.
#+begin_src emacs-lisp
  (require 'tramp)
  (when (eq system-type 'windows-nt)
    (unless (executable-find "plink")
      (user-error "Cannot find 'plink.exe'. Have you installed PuTTY?"))
    (modify-coding-system-alist 'process "plink" 'utf-8-unix)
    (setq tramp-default-method "plink"
          tramp-completion-without-shell-p t
          tramp-verbose 10
          tramp-debug-buffer t)
    ;; (add-to-list 'tramp-remote-path "~/.local/bin")
    (add-to-list 'tramp-connection-properties
                 (list (regexp-quote "/plinkx:ringer2:")
                       "remote-shell" "/usr/bin/bash")))
#+end_src

#+begin_src emacs-lisp
  (defun ringer2 ()
    "Acts like `find-file' with remote default directory."
    (interactive)
    (let ((filename (read-file-name "Remote file: " "/plinkx:ringer2:~/")))
      (find-file filename)))
#+end_src

Exclude Tramp buffers from preview: [[https://github.com/minad/consult/wiki#do-not-preview-exwm-windows-or-tramp-buffers][Consult wiki]]
#+begin_src emacs-lisp
  (defun consult-buffer-state-no-tramp ()
    "Buffer state function that doesn't preview Tramp buffers."
    (let ((orig-state (consult--buffer-state))
          (filter (lambda (action cand)
                    (if (and cand
                             (or (eq action 'return)
                                 (let ((buffer (get-buffer cand)))
                                   (and buffer
                                        (not (file-remote-p
                                              (buffer-local-value 'default-directory buffer)))))))
                        cand
                      nil))))
      (lambda (action cand)
        (funcall orig-state action (funcall filter action cand)))))

  ;; (setq consult--source-buffer
  ;;       (plist-put consult--source-buffer :state #'consult-buffer-state-no-tramp))
#+end_src

From the Emacs wiki [[https://www.emacswiki.org/emacs/Tramp_on_Windows][Tramp on Windows]] topic:
#+begin_src emacs-lisp
  ;; (when (eq window-system 'w32)
  ;;   (setq tramp-default-method "plink")
  ;;   (when (and (not (string-match my-putty-directory (getenv "PATH")))
  ;; 	     (file-directory-p my-putty-directory))
  ;;     (setenv "PATH" (concat my-putty-directory ";" (getenv "PATH")))
  ;;     (add-to-list 'exec-path my-putty-directory)))
#+end_src

* ERC

A quickie [[https://systemcrafters.net/chatting-with-emacs/irc-basics-with-erc/][introduction]] to the Emacs IRC client.
#+begin_src emacs-lisp
  (setq erc-server "irc.libera.chat"
        erc-nick "rodprice"
        erc-user-full-name "Rodney D. Price"
        erc-track-shorten-start 8   ;; length of tracker in mode line
        erc-autojoin-channels-alist ;; channels to join automatically
        '(("irc.libera.chat" "#emacs"))
        erc-join-buffer nil         ;; display ERC buffer in this window
        erc-kill-buffer-on-part t   ;; kill the ERC buffer when you quit
        erc-auto-query 'window)     ;; pops up new window for private message
#+end_src

* Docker

Notes: Run Emacs from inside Docker; instructions [[https://github.com/JAremko/docker-emacs][here]]. Someone else
is running what he says is an Emacs Python IDE using Docker, [[https://rebeja.eu/posts/python-ide-with-emacs-and-docker/][here]]. Yet
another way to run Docker, a Python script called [[https://github.com/jkitchin/devcontainer][devcontainer]].

[[https://ligerlearn.com/using-emacs-edit-files-within-docker-containers/][Using Emacs to edit files within Docker containers]].

Emacs Docker package [[https://github.com/Silex/docker.el][here]]. Tramp has its own interface to Docker; see
the variable [[help:tramp-docker-method][tramp-docker-method]].
#+begin_src emacs-lisp
  (use-package docker
    :ensure t
    :bind ("C-c d" . docker))
#+end_src

* Mastodon

From Sacha Chua's configuration [[https://sachachua.com/dotemacs/index.html#mastodon][here]].
#+begin_src emacs-lisp
  (defun my-mastodon-toot-public-string (message)
    (interactive "sMessage: ")
    (let* ((endpoint (mastodon-http--api "statuses"))
           (args `(("status" . ,message)
                   ("visibility" . "public"))))
      (mastodon-http--post endpoint args nil)))
#+end_src

#+begin_src emacs-lisp
  (defun my-mastodon-show-my-followers ()
    (interactive)
    (mastodon-profile--make-profile-buffer-for
     (mastodon-profile--lookup-account-in-status (mastodon-auth--get-account-name) nil)
     "followers"
     #'mastodon-profile--add-author-bylines))
#+end_src

#+begin_src emacs-lisp
  (defun my-yank-mastodon-link ()
    (interactive)
    (let* ((url (current-kill 0))
           (url-parsed (url-generic-parse-url url))
           (user (file-name-base (url-filename url-parsed))))
      (cond
       ((derived-mode-p 'oddmuse-mode) (insert "[" url " " user
                                               "@" (url-host url-parsed) "]"))
       ((derived-mode-p 'org-mode) (insert "[[" url "][" user
                                           "@" (url-host url-parsed) "]]"))
       (t (insert url)))))
#+end_src

#+begin_src emacs-lisp
  (autoload 'mastodon-notifications--get-mentions "mastodon-notifications" nil t)
#+end_src

#+begin_src emacs-lisp
  (use-package mastodon
    :ensure t
    :bind
    (:map mastodon-mode-map
          ("g" . mastodon-tl--update)
          ;; see org-capture-templates addition
          ("o" . (lambda () (interactive) (org-capture nil "m"))))
    :commands (mastodon-http--api
               mastodon-http--post
               mastodon-mode
               mastodon-http--get-search-json
               mastodon-tl--get-local-timeline)
    :config
    (mastodon-discover)
    (setq mastodon-instance-url "https://mathstodon.xyz"
          mastodon-active-user "rodprice"))
#+end_src

Render LaTeX equations in Mastodon buffers; from [[https://blog.nawaz.org/posts/2022/Dec/rendering-latex-formulae-in-mastodonel/][here]].
#+begin_src emacs-lisp :tangle no
  (defun mn:preview-latex-toot (&optional arg)
    "Toggle preview of the LaTeX fragments in Mastodon toots.

  If the cursor is on a Mastodon toot, create the image and
  overlay it over the source code.

  With a `\\[universal-argument]' prefix argument ARG, display
  image for all toots in the buffer.

  With a `\\[universal-argument] \\[universal-argument]' prefix
  argument ARG, clear images for the current toot.

  With a `\\[universal-argument] \\[universal-argument] \
  \\[universal-argument]' prefix argument ARG, clear images for the
  whole buffer."
    (interactive "P")
    (let ((toot-begin
           (previous-single-property-change
            (point)
            'byline
            (current-buffer)))
          (toot-end
           (next-single-property-change
            (point)
            'byline
            (current-buffer))))
      (cond
       ((not (display-graphic-p)) nil)
       ;; Clear whole buffer.
       ((equal arg '(64))
        (org-clear-latex-preview (point-min) (point-max))
        (message "LaTeX previews removed from buffer"))
       ;; Clear current toot.
       ((equal arg '(16))
        (org-clear-latex-preview toot-begin toot-end))
       ;; Preview whole buffer.
       ((equal arg '(4))
        (message "Creating LaTeX previews in buffer...")
        (org--latex-preview-region (point-min) (point-max))
        (message "Creating LaTeX previews in buffer... done."))
       ((org--latex-preview-region toot-begin toot-end)))))

  (define-key mastodon-mode-map (kbd "C-c C-x C-l") #'mn:preview-latex-toot)
#+end_src

* Search engines

Access search engines from emacs, [[https://github.com/hrs/engine-mode][here]].
#+begin_src emacs-lisp
  (use-package engine-mode
    :ensure t
    :bind-keymap ("C-c s" . engine-mode-prefixed-map)
    :config
    (defengine google
               "https://www.google.com/search?ie=utf-8&oe=utf-8&q=%s"
               :keybinding "g")
    (defengine wikipedia
               "https://www.wikipedia.org/search-redirect.php?language=en&go=Go&search=%s"
               :keybinding "w")
    (defengine stack-overflow
               "https://stackoverflow.com/search?q=%s"
               :keybinding "s")
    (defengine emacs-stack-exchange
               "https://emacs.stackexchange.com/search?q=%s"
               :keybinding "e")
    (defengine python-stack-exchange
               "https://python.stackexchange.com/search?q=%s"
               :keybinding "p")
    (defengine github
               "https://github.com/search?ref=simplesearch&q=%s"
               :keybinding "h")
    (defengine wolfram-alpha
               "https://www.wolframalpha.com/input/?i=%s"
               :keybinding "a")
    (engine-mode t))
#+end_src

* RSS

#+begin_src emacs-lisp
  (use-package newsticker
    :ensure t
    :custom
    (newsticker-url-list
     (cons '("John D. Cook" "https://www.johndcook.com/blog/feed")
           newsticker-url-list-defaults))
    )
#+end_src

Get a random [[https://github.com/gonewest818/adafruit-wisdom.el][quote]] from [[https://adafruit.com][adafruit.com]] and display it.
#+begin_src emacs-lisp
  (use-package adafruit-wisdom
    :ensure t
    :defer t)
#+end_src

* Notes

Compiling Emacs 29 on Windows with MSYS2, [[https://readingworldmagazine.com/emacs/2022-02-24-compiling-emacs-29-from-source-on-windows/][here]] (a bit dated). Good
advice on mixing Git for Windows, MSYS2, and MINGW Emacs [[https://lists.gnu.org/archive/html/help-gnu-emacs/2022-02/msg00230.html][here]]. I
haven't followed it, unfortunately. Read the entire thread.

The psychology of bad habits, [[https://iai.tv/video/the-psychology-of-bad-habits-susan-michie][here]].

Look for the section "space as control key" in this guy's [[https://github.com/svend/dot-emacsd][config]].
Might be a way to circumvent browser's nasty habit of stealing key
strokes. Also, see "custom hook for all major modes":
#+begin_src emacs-lisp :tangle no
(defun my/run-local-vars-mode-hook ()
  "Run a hook for the `major-mode` after the local variables have been processed."
  (run-hooks (intern (concat (symbol-name major-mode) "-local-vars-hook"))))
(add-hook 'hack-local-variables-hook 'my/run-local-vars-mode-hook)
#+end_src

Make your blog look like the [[https://github.com/moble/www_black-holes_org][black-holes.org]] website.

Installing Doom Emacs through =git-bash=, [[https://earvingad.github.io/posts/doom_emacs_windows/][here]].

Really irritating name, [[https://github.com/p3r7/awesome-elisp][Awesome Elisp]], but a useful cookbook guide.

Reproducible research and other things through [[https://github.com/jkitchin/scimax][Scimax]]. Python code
from the same author to work with org-mode, etc, called [[https://github.com/jkitchin/pycse][pycse]]. See
also [[https://kitchingroup.cheme.cmu.edu/pycse/intro.html][pycse docs]].
