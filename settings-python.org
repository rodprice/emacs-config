#+TITLE: Emacs Python mode configuration
#+STARTUP: overview indent

* Virtual environments

#+begin_src emacs-lisp
  (use-package conda
     :ensure nil
     :load-path "lisp"
     :init
       (setq conda-anaconda-home my-anaconda-dir)
       (setq conda-env-home-directory my-anaconda-dir)
     :config
       (conda-env-initialize-interactive-shells)
       (conda-env-initialize-eshell)
       (conda-env-autoactivate-mode 0)
       (add-hook 'find-file-hook
                 (lambda ()
                   (when (bound-and-true-p conda-project-env-path)
                     (conda-env-activate-for-buffer)))))
#+end_src

<OPTIONAL> Use [[https://python-poetry.org/][poetry]] to manage python environments.
See: https://github.com/galaunay/poetry.el.
#+begin_src emacs-lisp
  (use-package poetry
    :disabled
    :ensure t
    :defer t
    :config
    ;; Checks for the correct virtualenv. Better strategy IMO because the default
    ;; one is quite slow.
    (setq poetry-tracking-strategy 'switch-buffer)
    :hook (python-mode . poetry-tracking-mode))
#+end_src

* Linting

Use [[https://github.com/joaotavora/eglot][Eglot]] with Pyright, a language server for Python.
#+begin_src emacs-lisp
  (use-package eglot
    :ensure t
    :after conda
    :defer t
    :hook (python-mode . eglot-ensure))
#+end_src

Documentation for flycheck [[https://www.flycheck.org][here]].
#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode)
    :bind (("M-n" . flycheck-next-error)
           ("M-p" . flycheck-previous-error)
           ("M-l" . flycheck-list-errors)))
#+end_src

Instructions [[https://github.com/intramurz/flycheck-eglot][here]].
#+begin_src emacs-lisp
(use-package flycheck-eglot
  :ensure t
  :after (flycheck eglot)
  :config (global-flycheck-eglot-mode 1))
#+end_src
  
From Gavinok's [[https://github.com/Gavinok/emacs.d/blob/main/init.el][init.el]]:
#+begin_src emacs-lisp
  (use-package flymake
    :disabled
    :defer 10
    :bind (("M-g d"   . flymake-show-buffer-diagnostics)
           ("M-g M-d" . flymake-show-project-diagnostics)
           ("M-g M-n" . flymake-goto-next-error)
           ("M-g M-p" . flymake-goto-prev-error)
           :repeat-map flymake-repeatmap
           ("p" . flymake-goto-prev-error)
           ("n" . flymake-goto-next-error)
           :map flymake-diagnostics-buffer-mode-map
           ("?" . flymake-show-diagnostic-here)
           :map flymake-project-diagnostics-mode-map
           ("?" . flymake-show-diagnostic-here))
    :hook (prog-mode . (lambda () (flymake-mode t)))
    :config
      (defun flymake-show-diagnostic-here (pos &optional other-window)
        "Show the full multi-line diagnostic of this error."
        (interactive (list (point) t))
        (let* ((id (or (tabulated-list-get-id pos)
                       (user-error "Nothing at point")))
               (text (flymake-diagnostic-text (plist-get id :diagnostic))))
          (message text)))
      (remove-hook 'flymake-diagnostic-functions #'flymake-proc-legacy-flymake))
#+end_src

* Python mode

Reference: Nathan Furnal's [[https://gist.github.com/Nathan-Furnal/b327f14e861f009c014af36c1790ec49][python-setup-init.el]]

Remove "guess indent" python message
#+begin_src emacs-lisp
  (use-package python
    :config
    (setq python-indent-guess-indent-offset-verbose nil))
#+end_src

Hide the modeline for inferior python processes.  This is not a necessary
package but it's helpful to make better use of the screen real-estate at our
disposal. See: https://github.com/hlissner/emacs-hide-mode-line.

#+begin_src emacs-lisp
(use-package hide-mode-line
  :ensure t
  :defer t
  :hook (inferior-python-mode . hide-mode-line-mode))
#+end_src

<OPTIONAL> Buffer formatting on save using black.
See: https://github.com/pythonic-emacs/blacken.
#+begin_src emacs-lisp
  (use-package blacken
    :ensure t
    :defer t
    :custom
    (blacken-allow-py36 t)
    (blacken-skip-string-normalization t)
    :hook (python-mode-hook . blacken-mode))
#+end_src

<OPTIONAL> Numpy style docstring for Python.  See:
https://github.com/douglasdavis/numpydoc.el.  There are other packages
available for docstrings, see: https://github.com/naiquevin/sphinx-doc.el
#+begin_src emacs-lisp
  (use-package numpydoc
    :ensure t
    :defer t
    :custom
    (numpydoc-insert-examples-block nil)
    (numpydoc-template-long nil)
    :bind (:map python-mode-map
                ("C-c C-n" . numpydoc-generate)))
#+end_src

Provide drop-down completion.
#+begin_src emacs-lisp
  (use-package company
    :disabled
    :ensure t
    :defer t
    :custom
    ;; Search other buffers with the same modes for completion instead of
    ;; searching all other buffers.
    (company-dabbrev-other-buffers t)
    (company-dabbrev-code-other-buffers t)
    ;; M-<num> to select an option according to its number.
    (company-show-numbers t)
    ;; Only 2 letters required for completion to activate.
    (company-minimum-prefix-length 3)
    ;; Do not downcase completions by default.
    (company-dabbrev-downcase nil)
    ;; Even if I write something with the wrong case,
    ;; provide the correct casing.
    (company-dabbrev-ignore-case t)
    ;; company completion wait
    (company-idle-delay 0.2)
    ;; No company-mode in shell & eshell
    (company-global-modes '(not eshell-mode shell-mode))
    ;; Use company with text and programming modes.
      :hook ((text-mode . company-mode)
             (prog-mode . company-mode)))
#+end_src

* Code folding

Code from [[https://karthinks.com/software/simple-folding-with-hideshow/][karthinks]] blog.
#+begin_src emacs-lisp
  (use-package hideshow
    :ensure t
    :config
    (defun hs-cycle (&optional level)
      (interactive "p")
      (let (message-log-max
            (inhibit-message t))
        (if (= level 1)
            (pcase last-command
              ('hs-cycle
               (hs-hide-level 1)
               (setq this-command 'hs-cycle-children))
              ('hs-cycle-children
               ;; TODO: Fix this case. `hs-show-block' needs to be
               ;; called twice to open all folds of the parent
               ;; block.
               (save-excursion (hs-show-block))
               (hs-show-block)
               (setq this-command 'hs-cycle-subtree))
              ('hs-cycle-subtree
               (hs-hide-block))
              (_
               (if (not (hs-already-hidden-p))
                   (hs-hide-block)
                 (hs-hide-level 1)
                 (setq this-command 'hs-cycle-children))))
          (hs-hide-level level)
          (setq this-command 'hs-hide-level))))

    (defun hs-global-cycle ()
      (interactive)
      (pcase last-command
        ('hs-global-cycle
         (save-excursion (hs-show-all))
         (setq this-command 'hs-global-show))
        (_ (hs-hide-all))))    

    :bind (:map python-mode-map
                (("C-<tab>" . hs-cycle)
                 ("S-C-<tab>" . hs-global-cycle)))
    
    :hook (python-mode . hs-minor-mode))
#+end_src

* Language server for Python

* Notes

Install language server before executing the following.
lsp-ui-sideline to adjust lsp-ui behavior
lsp-focus-frame to put cursor in documentation popup

  (use-package python-mode
    :ensure nil
    :hook (python-mode . lsp-deferred)
    :custom
      (python-shell-interpreter "python3")
      (dap-python-executable "python3")
      (dap-python-debugger 'debugpy)
    :config
      (require 'dap-python))

  (defun my-lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook (lsp-mode . my-lsp-mode-setup)
    :init
    (setq lsp-keymap-prefix "C-c l")
    :config
    (lsp-enable-which-key-integration t))

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom))

  (use-package lsp-treemacs
      :after lsp)

  (use-package lsp-ivy)

  (use-package which-key)

(use-package typescript-mode
    :mode "\\.ts\\'"
    :hook (typescript-mode . lsp-deferred)
    :config
    (setq typescript-indent-level 2))

Completion (emacs completion-at-point with ivy, perhaps)
Gives automatic completion menu
Signature help (eldoc?, ivy?)

(use-package company
      :after lsp-mode
      :hook (lsp-mode . company-mode)
      :bind (:map company-active-map
                  ("<tab>" . company-complete-selection))
            (:map lsp-mode-map
                  ("<tab>" . company-indent-or-complete-common))
      :custom
      (company-minimum-prefix-length 1)
      (company-idle-delay 0.0))

    (use-package company-box
      :hook (company-mode . company-box-mode))

