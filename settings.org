#+TITLE: Emacs Configuration
#+STARTUP: overview indent

* Defaults

** Text

   Character encodings default to utf-8.
   #+begin_src emacs-lisp
     (prefer-coding-system 'utf-8)
     (set-language-environment 'utf-8)
     (set-default-coding-systems 'utf-8)
     (set-terminal-coding-system 'utf-8)
     (set-selection-coding-system 'utf-8)
   #+end_src
   
   Always insert spaces, never tab characters.
   #+begin_src emacs-lisp
     (setq-default indent-tabs-mode nil)
   #+end_src

  Truncate long lines everywhere.
  #+begin_src emacs-lisp
    (global-visual-line-mode 0)
    (setq-default truncate-lines t)
  #+end_src
    
  Highlight current line.
  #+begin_src emacs-lisp
    (global-hl-line-mode t)
  #+end_src

** Clipboard
   
   Use the system clipboard.
   #+begin_src emacs-lisp
     (setq select-enable-clipboard t
           select-enable-primary t
           save-interprogram-paste-before-kill t
           mouse-yank-at-point t)
   #+end_src
   
** File locations
   
   Make emacs open files in a reasonable directory by default.
   #+begin_src emacs-lisp
     (setq default-directory (getenv "HOME"))
   #+end_src
   
   [[http://stackoverflow.com/questions/151945/how-do-i-control-how-emacs-makes-backup-files][Backup file configuration]].
   #+begin_src emacs-lisp
     (setq delete-old-versions t
           kept-new-versions 2
           kept-old-versions 2
           version-control t)
   #+end_src
   
   File locations for custom settings.
   #+begin_src emacs-lisp
     (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
     (unless (file-exists-p custom-file)
       (custom-save-all))                   ; Create new, empty custom file
     (load custom-file)
     (require 'saveplace)
     (setq save-place-file (concat user-emacs-directory "places")
           backup-directory-alist `(("." . ,(concat user-emacs-directory
                                                    "backups"))))
   #+end_src

* GUI elements

** Menu bar, tool bar, scroll bars

   Keep menu bar, drop toolbar and scroll bars.
   #+begin_src emacs-lisp
     (setq inhibit-startup-message t)
     ;;  (menu-bar-mode -1)
     (when (fboundp 'tool-bar-mode)
       (tool-bar-mode -1))
     (when (fboundp 'scroll-bar-mode)
       (scroll-bar-mode -1))
     (when (fboundp 'horizontal-scroll-bar-mode)
       (horizontal-scroll-bar-mode -1))
     (setq visible-bell t)
   #+end_src

   Show line numbers on the left.
   #+begin_src emacs-lisp
     (if (>= emacs-major-version 29)
         (global-display-line-numbers-mode 1)
       (global-linum-mode t))
   #+end_src

   #+begin_src emacs-lisp
     ;; (require 'paren)
     ;; (setq show-paren-style 'parenthesis)
     ;; (show-paren-mode 1)
   #+end_src

** Frame titles

   Display buffer name in frame titles. ([[https://github.com/malb/emacs.d/blob/master/malb.org#frame-title][source]])
   #+begin_src emacs-lisp

     (defun my-emacs-version ()
       "Returns a shortened Emacs name and version string."
       (let ((ls (split-string (emacs-version) " ")))
         (substring
          (format "%s" `(,(car ls) ,(cadr ls) ,(caddr ls)))
          1
          -1)))

     (defun my-conda-env-current-name ()
       "Returns the name of the current conda environment."
       (if (bound-and-true-p conda-env-current-name)
           (concat " - Conda: " conda-env-current-name)
         ""))

     (defun my-git-branch-name ()
       "Returns the name of the current git branch."
       (if vc-mode
           (concat " -" (substring-no-properties vc-mode))
         ""))

     (setq frame-title-format
           '(""
             (:eval (replace-regexp-in-string "^ +" "" (my-emacs-version)))
             (:eval (my-conda-env-current-name))
             (:eval (my-git-branch-name))))
   #+end_src
   
** Mode line
   
   #+begin_src emacs-lisp
     (require 'uniquify)
     (setq uniquify-buffer-name-style 'forward)
     ;; Display the column number in the mode line
     (setq column-number-mode t)
   #+end_src
  
* Fonts

  #+begin_src emacs-lisp
    (defun my-font-in-family-p (font-family)
      "True iff the current frame's font is in font-family."
      (let ((font-name (cdr (assoc 'font default-frame-alist))))
        (string-prefix-p (downcase font-family) (downcase font-name))))
  #+end_src

  The default font can also be set in the site-specific preload file.
  #+begin_src emacs-lisp
    (unless (boundp 'my-default-font)
      (defvar my-default-font "Fira Code-11"))
    (add-to-list 'default-frame-alist `(font . ,my-default-font))
    (set-face-font 'default my-default-font)
  #+end_src

  #+begin_src emacs-lisp
    (use-package ligature
      :if (or (my-font-in-family-p "Fira Code")
              (my-font-in-family-p "JuliaMono"))
      :ensure t
      :config
      ;; JuliaMono (https://juliamono.netlify.app/) supports the following small set of ligatures
      (if (my-font-in-family-p "JuliaMono")
          (let ((ligs '("->" "=>" "|>" "<|" "::" "<--" "-->" "<-->")))
            (ligature-set-ligatures 'prog-mode ligs)
            (ligature-set-ligatures 'org-mode ligs)))
      (if (my-font-in-family-p "Fira Code")
          (progn
            (require 'fira-code-mode)
            (ligature-set-ligatures 'prog-mode fira-code-mode--ligatures)
            (ligature-set-ligatures 'org-mode fira-code-mode--ligatures)))
            
      ;; Enables ligature checks globally in all buffers. You can also do it
      ;; per mode with `ligature-mode'.
      (global-ligature-mode t))
  #+end_src
  
* Themes

  #+begin_src emacs-lisp
    (use-package vscode-dark-plus-theme
      :ensure t
      :config
      (load-theme 'vscode-dark-plus t)
      (setq face-remapping-alist
            `((show-paren-match
               . (:weight bold
                  :foreground "#ecbc9c"))
              (show-paren-mismatch
               . (:strike-through t
                  :foreground "#cc6666"))
              (sp-show-pair-match-face
               . (:weight bold
                  :foreground "#ecbc9c"))
              (sp-show-pair-mismatch-face
               . (:strike-through t
                  :foreground "#cc6666"))
              (font-lock-function-name-face
               . (:foreground "#4ec9b0"
                  :weight normal))
              (font-lock-keyword-face
               . (:foreground "cornflower blue"
                  :weight normal))
              (font-lock-variable-name-face
               . (:foreground "#f0c674"))
              (lsp-face-highlight-read
               . (:underline t
                  :background nil
                  :foreground nil))
              (lsp-face-highlight-textual
               . (:underline t
                  :background nil
                  :foreground nil))
              (lsp-face-highlight-write
               . (:underline t
                  :background nil
                  :foreground nil))
              (lsp-ui-peek-highlight
               . (:inherit nil
                  :background nil
                  :foreground nil
                  :weight semi-bold
                  :box (:line-width -1)))
              (org-block
               . (:extend t
                  :background "gray12"
                  :foreground "#e8e8e8"))
              (org-block-begin-line
               . (:extend t
                  :background "gray12"
                  :foreground "gray40"))
              (org-tree-slide-heading-level-1
               . (:height 1.8
                  :weight bold))
              (org-tree-slide-heading-level-2
               . (:height 1.5
                  :weight bold))
              (org-tree-slide-heading-level-3
               . (:height 1.5
                  :weight bold))
              (org-tree-slide-heading-level-4
               . (:height 1.5
                  :weight bold)))))
  #+end_src

* Editing

** Search

  #+begin_src emacs-lisp
    (global-set-key (kbd "C-s") 'isearch-forward-regexp)
    (global-set-key (kbd "C-r") 'isearch-backward-regexp)
    (global-set-key (kbd "C-M-s") 'isearch-forward)
    (global-set-key (kbd "C-M-r") 'isearch-backward)
    (global-set-key (kbd "C-c r") 'rgrep)
  #+end_src
  
** Line wrapping

  #+begin_src emacs-lisp
        (global-set-key (kbd "C-c q") 'auto-fill-mode)
  #+end_src

** Join, open, or transpose lines

  #+begin_src emacs-lisp
    (global-set-key (kbd "C-;") 'my-insert-semicolon)
    (global-set-key (kbd "M-j") 'my-join-lines)
    (global-set-key (kbd "C-o") 'open-next-line)
    (global-set-key (kbd "M-o") 'open-previous-line)
    (global-set-key (kbd "C-t") 'transpose-next-line)
    (global-set-key (kbd "M-t") 'transpose-previous-line)
  #+end_src
  
** Cursor movement

  #+begin_src emacs-lisp
    (use-package mwim
      :ensure t
      :bind
      (("C-a" . mwim-beginning-of-line-or-code)
       ("C-e" . mwim-end-of-line-or-code))
      :pin melpa)
  #+end_src
  
  #+begin_src emacs-lisp
    (global-set-key (kbd "<home>") 'mwim-beginning-of-line-or-code)
    (global-set-key (kbd "<end>") 'mwim-end-of-line-or-code)
    (global-set-key (kbd "M-<") 'scroll-row-up)
    (global-set-key (kbd "M->") 'scroll-row-down)
    (global-set-key (kbd "C-<") 'xah-backward-block)
    (global-set-key (kbd "C->") 'xah-forward-block)
    (global-set-key (kbd "M-<up>") 'scroll-row-up)
    (global-set-key (kbd "M-<down>") 'scroll-row-down)
  #+end_src

* Window management

* Completions

https://www.masteringemacs.org/article/understanding-minibuffer-completion
https://www.masteringemacs.org/article/introduction-to-ido-mode

Show all buffers currently displayed in windows in all frames
#+begin_src emacs-lisp
  (mapcar (lambda (frame) (cons frame (list (window-list frame)))) (frame-list))
#+end_src
