#+TITLE: Emacs Configuration
#+STARTUP: overview indent


* Defaults

#+begin_src emacs-lisp
(message "starting defaults")
#+end_src

** Preliminaries

All functions below use lexical binding.
#+begin_src emacs-lisp
  ;; -*- coding: utf-8; lexical-binding: t -*-
#+end_src

Some packages use the [[https://github.com/magnars/s.el#functions][s]] library without explicitly naming it as a
prerequisite (I'm looking at you, [[https://github.com/sabof/org-bullets][org-bullets]]), so load it now.
#+begin_src emacs-lisp
  (use-package s
    :ensure t)
#+end_src

** Text

Character encodings default to utf-8.
#+begin_src emacs-lisp
  (prefer-coding-system 'utf-8)
  (set-language-environment 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
#+end_src

See [[https://emacs.stackexchange.com/questions/31282/unicodeencodeerror-executing-python-in-emacs-not-in-terminal][UnicodeEncodeError executing Python in Emacs]].
#+begin_src emacs-lisp
  (setenv "LANG" "en_US.UTF-8")
  (setenv "LC_ALL" "en_US.UTF-8")
  (setenv "LC_CTYPE" "en_US.UTF-8")
#+end_src

Sentences end with a single space.
#+begin_src emacs-lisp
  (setq sentence-end-double-space nil)
#+end_src

Always insert spaces, never tab characters.
#+begin_src emacs-lisp
   (setq-default indent-tabs-mode nil)
#+end_src

Truncate long lines everywhere.
#+begin_src emacs-lisp
  (global-visual-line-mode 0)
  (setq-default truncate-lines t)
#+end_src

Delete trailing whitespace before save.
#+begin_src emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
  (setq require-final-newline t)
#+end_src

Highlight current line.
#+begin_src emacs-lisp
  (global-hl-line-mode t)
#+end_src

** Clipboard

   Use the system clipboard.
#+begin_src emacs-lisp
     (setq select-enable-clipboard t
           select-enable-primary t
           save-interprogram-paste-before-kill t
           mouse-yank-at-point t)
#+end_src

** File locations

Make emacs open files in a reasonable directory by default.
#+begin_src emacs-lisp
  (setq default-directory (getenv "HOME"))
#+end_src

[[http://stackoverflow.com/questions/151945/how-do-i-control-how-emacs-makes-backup-files][Backup file configuration]].
#+begin_src emacs-lisp
  (setq delete-old-versions t
        kept-new-versions 2
        kept-old-versions 2
        version-control t)
#+end_src

File locations for custom settings.
#+begin_src emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (unless (file-exists-p custom-file)
    (custom-save-all))                   ; Create new, empty custom file
  (load custom-file)
#+end_src

File location for saving cursor state.
#+begin_src emacs-lisp
  (require 'saveplace)
  (setq save-place-file (concat user-emacs-directory "places")
        backup-directory-alist `(("." . ,(concat user-emacs-directory
                                                 "backups"))))
#+end_src

Info directory locations. On Windows, for no apparent reason, the
Emacs manual and all the other defaults vanished from the top-level
info node. This puts the defaults back in.
#+begin_src emacs-lisp
  (when (eq system-type 'windows-nt)
    (use-package info
      :commands Info-default-dirs
      :init
      (dolist (dir (Info-default-dirs))
        (when (file-directory-p dir)
          (add-to-list 'Info-directory-list dir t)))))
#+end_src

** Buffer defaults

Add options to kill or revert buffer when prompted to save a buffer.
From this [[https://github.com/svend/dot-emacsd][config]].
#+begin_src emacs-lisp
  (add-to-list
   'save-some-buffers-action-alist
   '(?k
     (lambda (buf)
       (kill-buffer buf))
     "kill this buffer"))
  (add-to-list
   'save-some-buffers-action-alist
   '(?r
     (lambda (buf)
       (save-current-buffer
         (set-buffer buf)
         (revert-buffer t t t)))
     "revert this buffer"))
#+end_src

** Time zones

Set time zones displayed by =world-clock=. A list of time zones is [[https://timezonedb.com/time-zones][here]].
Another list, with legacy abbreviations, is [[https://en.wikipedia.org/wiki/List_of_tz_database_time_zones][here]]. Windows requires
the legacy Posix format, while Linux, etc. use the zoneinfo format.

#+begin_src emacs-lisp
  (if (eq system-type 'windows-nt)
      (setq legacy-style-world-list
            '(("UTC0" "UTC")
              ("MST7MDT" "Denver")         ;; UTC-06:00
              ("EST5EDT" "Fairfax")        ;; UTC-04:00
              ("GMT0BST" "London")))       ;; UTC+01:00
    (setq world-clock-list
          '(("UTC0" "UTC")
            ("America/Denver" "Denver")    ;; UTC-06:00
            ("America/New_York" "Fairfax") ;; UTC-04:00
            ("Europe/London" "London"))))  ;; UTC+01:00
#+end_src

* GUI elements

#+begin_src emacs-lisp
(message "starting gui elements")
#+end_src

** Menu bar, tool bar, scroll bars

Keep menu bar, drop toolbar and scroll bars.
#+begin_src emacs-lisp
     (setq inhibit-startup-message t)
     ;;  (menu-bar-mode -1)
     (when (fboundp 'tool-bar-mode)
       (tool-bar-mode -1))
     (when (fboundp 'scroll-bar-mode)
       (scroll-bar-mode -1))
     (when (fboundp 'horizontal-scroll-bar-mode)
       (horizontal-scroll-bar-mode -1))
     (setq visible-bell t)
#+end_src

Show line numbers on the left.
#+begin_src emacs-lisp
     (if (>= emacs-major-version 29)
         (global-display-line-numbers-mode 1)
       (global-linum-mode t))
#+end_src

Smooth scrolling
#+begin_src emacs-lisp
  (pixel-scroll-mode)
#+end_src

#+begin_src emacs-lisp
     ;; (require 'paren)
     ;; (setq show-paren-style 'parenthesis)
     ;; (show-paren-mode 1)
#+end_src

** Frame titles

Display buffer information in frame titles. ([[https://github.com/malb/emacs.d/blob/master/malb.org#frame-title][source]])
#+begin_src emacs-lisp
    (defun my-emacs-version ()
      "Returns a shortened Emacs name and version string."
      (let ((ls (split-string (emacs-version) " ")))
        (substring
         (format "%s" `(,(car ls) ,(cadr ls) ,(caddr ls)))
         1
         -1)))

    (defun my-conda-env-current-name ()
      "Returns the name of the current conda environment."
      (if (bound-and-true-p conda-env-current-name)
          (concat " - Conda: " conda-env-current-name)
        ""))

    (defun my-git-branch-name ()
      "Returns the name of the current git branch."
      (if vc-mode
          (concat " -" (substring-no-properties vc-mode))
        ""))

    (defun my-project-name ()
      "Returns the name of the current project."
      (if (not (featurep 'project))
          ""
        (let ((project (project-current)))
          (if (null project)
              ""
            (format " - Project: %s" (project-name project))))))

    (setq frame-title-format
          '(""
            (:eval (replace-regexp-in-string "^ +" "" (my-emacs-version)))
            (:eval (my-conda-env-current-name))
            (:eval (my-git-branch-name))
            (:eval (my-project-name))))
#+end_src

** Mode line

#+begin_src emacs-lisp
     (require 'uniquify)
     (setq uniquify-buffer-name-style 'forward)
     ;; Display the column number in the mode line
     (setq column-number-mode t)
#+end_src

#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src

** Visual bell

Use visual bell.
#+begin_src emacs-lisp
  (setq visual-bell t)
#+end_src

Don't ring the bell for these common events.
#+begin_src emacs-lisp
  (setq ring-bell-function
        (lambda ()
          (unless
              (memq this-command
                    '(abort-recursive-edit
                      isearch-abort
                      isearch-printing-char
                      keyboard-quit
                      nil))
            (ding))))
#+end_src

* Fonts

#+begin_src emacs-lisp
(message "starting fonts")
#+end_src

** Set the default font

#+begin_src emacs-lisp
    (defun my-font-in-family-p (font-family)
      "True iff the current frame's font is in font-family."
      (let ((font-name (cdr (assoc 'font default-frame-alist))))
        (string-prefix-p (downcase font-family) (downcase font-name))))
#+end_src

  The default font can also be set in the site-specific preload file.
#+begin_src emacs-lisp
    (unless (boundp 'my-default-font)
      (defvar my-default-font "Fira Code-11"))
    (add-to-list 'default-frame-alist `(font . ,my-default-font))
    (set-face-font 'default my-default-font)
#+end_src

** Use ligatures if available

#+begin_src emacs-lisp :tangle no
    (use-package ligature
      :if (or (my-font-in-family-p "Fira Code")
              (my-font-in-family-p "JuliaMono"))
      :ensure t
      :config
      ;; JuliaMono (https://juliamono.netlify.app/) supports the following small set of ligatures
      (if (my-font-in-family-p "JuliaMono")
          (let ((ligs '("->" "=>" "|>" "<|" "::" "<--" "-->" "<-->")))
            (ligature-set-ligatures 'prog-mode ligs)
            (ligature-set-ligatures 'org-mode ligs)))
      (if (my-font-in-family-p "Fira Code")
          (progn
            (require 'fira-code-mode)
            (ligature-set-ligatures 'prog-mode fira-code-mode--ligatures)
            (ligature-set-ligatures 'org-mode fira-code-mode--ligatures)))

      ;; Enables ligature checks globally in all buffers. You can also do it
      ;; per mode with `ligature-mode'.
      (global-ligature-mode t))
#+end_src

** Insert Greek letters, etc

=prettify-symbols-mode= can render Greek letters, etc. Doing [[http://endlessparentheses.com/new-in-emacs-25-1-have-prettify-symbols-mode-reveal-the-symbol-at-point.html][this]]
allows you to see the original text. See also [[http://endlessparentheses.com/using-prettify-symbols-in-clojure-and-elisp-without-breaking-indentation.html][here]] and [[http://endlessparentheses.com/improving-latex-equations-with-font-lock.html][here]].
#+begin_src emacs-lisp :tangle no
(setq prettify-symbols-unprettify-at-point 'right-edge)
#+end_src

* Themes

#+begin_src emacs-lisp
(message "starting themes")
#+end_src


#+begin_src emacs-lisp
  (use-package vscode-dark-plus-theme
    :ensure t
    :config
    (load-theme 'vscode-dark-plus t)
    (setq face-remapping-alist
          `((show-paren-match
             . (:weight bold
                :foreground "#ecbc9c"))
            (show-paren-mismatch
             . (:strike-through t
                :foreground "#cc6666"))
            (sp-show-pair-match-face
             . (:weight bold
                :foreground "#ecbc9c"))
            (sp-show-pair-mismatch-face
             . (:strike-through t
                :foreground "#cc6666"))
            (comint-highlight-input
             . (:foreground "cornflower blue"
                :weight normal))
            (font-lock-function-name-face
             . (:foreground "#4ec9b0"
                :weight normal))
            (font-lock-keyword-face
             . (:foreground "cornflower blue"
                :weight normal))
            (font-lock-variable-name-face
             . (:foreground "#f0c674"))
            (lsp-face-highlight-read
             . (:underline t
                :background nil
                :foreground nil))
            (lsp-face-highlight-textual
             . (:underline t
                :background nil
                :foreground nil))
            (lsp-face-highlight-write
             . (:underline t
                :background nil
                :foreground nil))
            (lsp-ui-peek-highlight
             . (:inherit nil
                :background nil
                :foreground nil
                :weight semi-bold
                :box (:line-width -1)))
            (org-block
             . (:extend t
                :background "gray12"
                :foreground "#e8e8e8"))
            (org-block-begin-line
             . (:extend t
                :background "gray12"
                :foreground "gray40"))
            (org-tree-slide-heading-level-1
             . (:height 1.8
                :weight bold))
            (org-tree-slide-heading-level-2
             . (:height 1.5
                :weight bold))
            (org-tree-slide-heading-level-3
             . (:height 1.5
                :weight bold))
            (org-tree-slide-heading-level-4
             . (:height 1.5
                :weight bold)))))
#+end_src

* Editing

#+begin_src emacs-lisp
(message "starting editing")
#+end_src

** Search

#+begin_src emacs-lisp
  (global-set-key (kbd "C-s") 'isearch-forward-regexp)
  (global-set-key (kbd "C-r") 'isearch-backward-regexp)
  (global-set-key (kbd "C-M-s") 'isearch-forward)
  (global-set-key (kbd "C-M-r") 'isearch-backward)
  (global-set-key (kbd "C-c r") 'rgrep)
#+end_src

** Line wrapping

#+begin_src emacs-lisp
  (global-set-key (kbd "C-c q") 'auto-fill-mode)
#+end_src

** Join, open, or transpose lines

#+begin_src emacs-lisp
  (global-set-key (kbd "C-;") 'my-insert-semicolon)
  (global-set-key (kbd "M-j") 'my-join-lines)
  (global-set-key (kbd "C-o") 'open-next-line)
  (global-set-key (kbd "M-o") 'open-previous-line)
  (global-set-key (kbd "C-t") 'transpose-next-line)
  (global-set-key (kbd "M-t") 'transpose-previous-line)
#+end_src

** Camel case

#+begin_src emacs-lisp
  (global-set-key (kbd "M-c") 'toggle-camelcase-underscores)
#+end_src

** Cursor movement

Documentation is [[https://github.com/alezost/mwim.el][here]].
#+begin_src emacs-lisp
  (use-package mwim
    :ensure t
    :bind
    (("C-a" . mwim-beginning-of-code-or-line)
     ("<home>" . mwim-beginning-of-code-or-line)
     ("C-e" . mwim-end-of-code-or-line)
     ("<end>" . mwim-end-of-code-or-line))
    :pin melpa)
#+end_src

#+begin_src emacs-lisp
  (global-set-key (kbd "M-<") 'scroll-row-up)
  (global-set-key (kbd "M->") 'scroll-row-down)
  (global-set-key (kbd "C-<") 'xah-backward-block)
  (global-set-key (kbd "C->") 'xah-forward-block)
  (global-set-key (kbd "M-<up>") 'scroll-row-up)
  (global-set-key (kbd "M-<down>") 'scroll-row-down)
#+end_src

Move point to mark efficiently ([[http://endlessparentheses.com/faster-pop-to-mark-command.html][Faster pop-to-mark command]]). See also
[[https://www.masteringemacs.org/article/fixing-mark-commands-transient-mark-mode][Fixing the mark commands in transient-mark-mode]].
#+begin_src emacs-lisp
  (advice-add 'pop-to-mark-command :around #'modi/multi-pop-to-mark)
#+end_src

** Parentheses

#+begin_src emacs-lisp
  (electric-pair-mode 1)
#+end_src

** Structured editing (disabled)

[[https://github.com/AmaiKinono/puni][Puni]] is a minor mode for structured editing.

| Command                   | Default keybinding |
|---------------------------+--------------------|
| puni-forward-delete-char  | C-d                |
| puni-backward-delete-char | DEL                |
| puni-forward-kill-word    | M-d                |
| puni-backward-kill-word   | M-DEL              |
| puni-kill-line            | C-k                |
| puni-backward-kill-line   | C-S-k              |

Use puni-mode only for certain major modes.
#+begin_src emacs-lisp :tangle no
  (use-package puni
    :ensure t
    :defer t
    :hook ((prog-mode
            sgml-mode
            nxml-mode
            tex-mode
            eval-expression-minibuffer-setup
            ) . puni-mode))
#+end_src

** Mark ring

Move through the mark ring with =C-u C-SPC C-SPC= etc.
#+begin_src emacs-lisp
  (setq set-mark-command-repeat-pop t)
#+end_src

Empty the mark ring if it gets too messy.
#+begin_src emacs-lisp
  (defun empty-mark-ring (arg)
      "Empty the mark ring, leaving only the current position of point.
  If the prefix argument is non-nil, empty the global mark ring,
  leaving the only the position of point on the global mark ring."
      (interactive "P")
      (if (null arg)
          (progn
            (setq-local mark-ring (list (point-marker)))
            (message "Emptied mark ring for buffer %s" (buffer-name)))
        (setq global-mark-ring (list (point-marker)))
        (message "Emptied global mark ring.")))
  (global-set-key (kbd "M-SPC") 'empty-mark-ring)
#+end_src

** Spelling

Tweaks from Mastering Emacs, [[https://www.masteringemacs.org/article/wordsmithing-in-emacs][Wordsmithing in Emacs]].
#+begin_src emacs-lisp
  (use-package ispell
    :ensure nil
    :bind ("M-#" . dictionary-lookup-definition)
    :init
    (setq switch-to-buffer-obey-display-actions t)
    (add-to-list 'display-buffer-alist
                 '("^\\*Dictionary\\*" display-buffer-in-side-window
                   (side . bottom)
                   (window-height . 30))))
#+end_src

Find the spelling program, if installed.
#+begin_src emacs-lisp
  (let ((aspell-exe (if (eq system-type 'windows-nt)
                        (executable-find "aspell.exe")
                      (executable-find "aspell"))))
    (if aspell-exe
        (setq-default ispell-program-name aspell-exe)
      (user-error "Could not find an aspell executable on exec-path")))
#+end_src

Correct typos automatically. See [[https://www.masteringemacs.org/article/correcting-typos-misspellings-abbrev][Correcting Typos and Misspellings with Abbrev]].
#+begin_src emacs-lisp
  (setq-default abbrev-mode t)
#+end_src

** Regions

Kill or yank entire lines. Github repo [[https://github.com/purcell/whole-line-or-region][here]].
#+begin_src emacs-lisp
  (use-package whole-line-or-region
    :ensure t
    :hook (emacs-startup . whole-line-or-region-global-mode))
    ;; :bind (("C-w" . whole-line-or-region-kill-region)
    ;;        ("M-w" . whole-line-or-region-copy-region-as-kill)))
#+end_src

Expand or contract the region by sexp ([[https://github.com/magnars/expand-region.el][expand-region.el]])
#+begin_src emacs-lisp
  (use-package expand-region
    :ensure t
    :config
    :bind (("C-=" . er/expand-region)
           ("M-=" . er/contract-region)))
#+end_src

** Which-key package

Configuration from [[https://github.com/daviwil/emacs-from-scratch/blob/master/Emacs.org][Emacs from scratch]]. Source code and README is [[https://github.com/justbur/emacs-which-key][here]].
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :defer 0
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 1))
#+end_src

** Drag-stuff package (disabled)

[[https://github.com/rejeep/drag-stuff.el][drag-stuff]] lets you drag lines and regions around. Doesn't seem to
play well with =whole-line-or-region=.
#+begin_src emacs-lisp :tangle no
  (use-package drag-stuff
    :ensure t
    :custom
    (drag-stuff-modifier '(con meta))
    :config
    (drag-stuff-global-mode 1))
#+end_src

* Window management

#+begin_src emacs-lisp
(message "starting window management")
#+end_src

** Save the cursor position

#+begin_src emacs-lisp
    (require 'saveplace)
    (setq-default save-place t)
#+end_src

** Desktop mode

Note: Doesn't work with emacsclient. See StackExchange [[https://emacs.stackexchange.com/questions/8147/using-desktop-mode-with-emacs-daemon][Using desktop-mode with emacsclient]]
and the last paragraph of [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Saving-Emacs-Sessions.html#Saving-Emacs-Sessions][Saving Emacs Sessions]] in the Emacs manual.

Restore emacs' windows and buffers ([[https://bmag.github.io/2015/12/26/desktop.html][Desktop-Save Mode]] and [[https://www.emacswiki.org/emacs/Desktop][Emacs wiki]]).
#+begin_src emacs-lisp
  (if (daemonp)
      (add-hook 'server-after-make-frame-hook #'desktop-read)
    (add-hook 'window-setup-hook #'desktop-read))
  (setq desktop-save t)  ;; always save
  (desktop-save-mode)
#+end_src

#+begin_src emacs-lisp
  (defun my-desktop-after-read-hook ()
    (message "--- Running `desktop-after-read-hook'")
    (list-buffers))
#+end_src

#+begin_src emacs-lisp :tangle no
  (use-package desktop
    :preface
    (defun my-restore-desktop (frame)
      "Restores desktop and cancels hook after first frame opens.
    So the daemon can run at startup and it'll still work."
      (with-selected-frame frame
        (desktop-save-mode 1)
        (desktop-read)
        (remove-hook 'after-make-frame-functions 'my-restore-desktop)))
    :config
    ;; (add-to-list 'desktop-buffer-mode-handlers ...)
    ;; (add-to-list 'desktop-files-not-to-save ...)
    ;; (add-to-list 'desktop-modes-not-to-save ...)
    ;; (add-to-list 'desktop-globals-to-save ...)
    ;; (add-to-list 'desktop-clear-preserve-buffers ...)
    ;; (add-to-list 'desktop-globals-to-clear ...)
    ;; (add-to-list 'desktop-locals-to-save ...)
    ;; (setq desktop-restore-forces-onscreen nil)
    (if (daemonp)
        (add-hook 'server-after-make-frame-hook #'desktop-read)
      (add-hook 'window-setup-hook #'desktop-read))
    (setq desktop-save t)  ;; always save
    (desktop-save-mode 1)
    (add-hook 'after-make-frame-functions 'my-restore-desktop)
    :hook
    ((desktop-after-read . #'my-desktop-after-read-hook)))
#+end_src

** Window movement

#+begin_src emacs-lisp
  ;; (global-set-key (kbd "C-x p") 'my-rearrange-windows)
#+end_src

** Window and frame selection

See [[https://www.masteringemacs.org/article/demystifying-emacs-window-manager][Demystifying emacs' window manager]].
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-o") 'other-frame)
  (unless (< emacs-major-version 27)
    (setq switch-to-buffer-obey-display-actions t))
#+end_src

** Popup windows

Set rules for popup windows ([[https://depp.brause.cc/shackle/][shackle.el]]). Doesn't seem to work as advertised.
#+begin_src emacs-lisp :tangle no
  (use-package shackle
    :ensure t
    :init
    (setq shackle-rules '((compilation-mode :frame t))
          shackle-default-rule '(:select t))
    :config
    (shackle-mode 1))
#+end_src

Manage popup windows ([[https://github.com/karthink/popper][popper.el]])
#+begin_src emacs-lisp
  (use-package popper
    :ensure t
    :bind (("C-`"   . popper-toggle-latest)
           ("M-`"   . popper-cycle)
           ("C-M-`" . popper-toggle-type))
    :init
    (setq popper-reference-buffers
          '("\\*Messages\\*"
            "Output\\*$"
            "\\*Async Shell Command\\*"
            "\\*grep\\*"
            "\\*Backtrace\\*"
            "\\*Completions\\*"
            "\\*Flycheck errors\\*"
            "^\\*Shortdoc"
            "\\*Apropos\\*"
            "\\*Buffer List\\*"
            "^\\*eldoc"
            "\\*xref\\*"
            "\\*wclock\\*"
            "\\*shell\\*"
            "\\*PowerShell\\*"
            "\\*Shell Errors\\*"
            "\\*Tidy Error Buffer\\*"
            "\\*Pyinspect:"
            ("\\*Compile-Log\\*" . hide)
            ("\\*Warnings\\*" . hide)
            help-mode
            compilation-mode))
    (popper-mode +1)
    (popper-echo-mode +1))
#+end_src

* Markup languages

#+begin_src emacs-lisp
(message "starting markup languages")
#+end_src

** Markdown

Note: Live preview is possible using [[https://stackoverflow.com/questions/36183071/how-can-i-preview-markdown-in-emacs-in-real-time][impatient-mode]].

Configuration instructions are [[https://jblevins.org/projects/markdown-mode/][here]]. This uses [[https://pandoc.org/][pandoc]] rather than the
default multimarkdown, so it can run on Windows. A cheat sheet for
Github-flavored Markdown is [[https://github.github.com/gfm/][here]].
#+begin_src emacs-lisp
  (use-package markdown-mode
    :ensure t
    :mode
    ("README\\.md\\'" . gfm-mode)
    :custom
    (markdown-enable-math t)
    (markdown-live-preview-delete-export 'delete-on-export)
    (markdown-asymmetric-header t)
    :config
    (setq markdown-command
          (concat
           "pandoc"
           " --from=markdown --to=html"
           " --standalone --mathjax --highlight-style=pygments"
           " --css=pandoc.css"
           " --quiet"
           )))
#+end_src

[[https://github.com/Fanael/edit-indirect/][Edit code blocks]] in a new buffer, like =org-mode=.
#+begin_src emacs-lisp
  (use-package edit-indirect
    :ensure nil
    :after markdown-mode
    :load-path "mode")
#+end_src

** YAML

A major mode for =YAML= files is found [[https://github.com/yoshiki/yaml-mode/blob/master/yaml-mode.el][here]]. There's a linter called
[[https://github.com/adrienverge/yamllint][yamllint]], with a flycheck adapter [[https://github.com/krzysztof-magosa/flycheck-yamllint][here]].
#+begin_src emacs-lisp
  (use-package yaml-mode
    :ensure t
    :defer t)
#+end_src

** JSON

#+begin_src emacs-lisp
  (use-package json-mode
    :ensure t
    :defer t)
#+end_src

  [[https://github.com/taku0/json-par][json-par]] is a package that says it's "ctrl-less, yet mode-less". The
  manual is [[https://www.tatapa.org/~takuo/json-par/manual.html][here]].

  | Key        | Command                            | Description                                      |
  |------------+------------------------------------+--------------------------------------------------|
  | j          | json-par-backward-member           | To the next member (key-value pair).             |
  | k          | json-par-forward-member            | To the previous member.                          |
  | h          | json-par-up-backward               | To the beginning of the containing object/array. |
  | l, }, or ] | json-par-up-forward                | To the end of the containing object/array.       |
  | a          | json-par-beginning-of-member       | To the beginning of the member.                  |
  | e          | json-par-end-of-member             | To the end of the member.                        |
  | v          | json-par-beginning-of-object-value | To the beginning of the value.                   |
  | J          | json-par-backward-record           | To the same key in the previous object.          |
  | K          | json-par-forward-record            | To the same key in the next object.              |
  | A          | json-par-beginning-of-list         | To the beginning of the first member.            |
  | E          | json-par-end-of-list               | To the end of the last member.                   |

#+begin_src emacs-lisp
  (use-package json-par
    :ensure t
    :after json-mode
    :defer t
    :hook (json-mode . (lambda () (json-par-mode 1))))
#+end_src

** CSV

In CSV mode, the following commands are available:

- C-c C-s (`csv-sort-fields') and C-c C-n (`csv-sort-numeric-fields')
  respectively sort lexicographically and numerically on a
  specified field or column.

- C-c C-r (`csv-reverse-region') reverses the order.  (These
  commands are based closely on, and use, code in `sort.el'.)

- C-c C-k (`csv-kill-fields') and C-c C-y (`csv-yank-fields') kill
  and yank fields or columns, although they do not use the normal
  kill ring.  C-c C-k can kill more than one field at once, but
  multiple killed fields can be yanked only as a fixed group
  equivalent to a single field.

- `csv-align-mode' keeps fields visually aligned, on-the-fly.
  It truncates fields to a maximum width that can be changed per-column
  with `csv-align-set-column-width'.
  Alternatively, C-c C-a (`csv-align-fields') aligns fields into columns
  and C-c C-u (`csv-unalign-fields') undoes such alignment;
  separators can be hidden within aligned records (controlled by
  `csv-invisibility-default' and `csv-toggle-invisibility').

- C-c C-t (`csv-transpose') interchanges rows and columns.  For
  details, see the documentation for the individual commands.

#+begin_src emacs-lisp
  (use-package csv-mode
    :ensure t
    :defer t
    :hook (csv-mode . csv-align-mode))
#+end_src

** LaTeX

There's an LSP server, [[https://github.com/latex-lsp/texlab][texlab]], for LaTeX, etc. The actual LSP client
is [[https://github.com/ROCKTAKEY/lsp-latex][lsp-latex]].

* Org mode

#+begin_src emacs-lisp
(message "starting org mode")
#+end_src

** Key bindings

Note: [[https://www.reddit.com/r/orgmode/comments/ded3g8/orgmode_without_arrow_keysany_actual_better/][Org speed keys]] work only when point is at the beginning of a
header line. Press '?' there to find out what they are. Another
package for moving around org-mode headers is [[http://oremacs.com/worf/README.html][worf]], if you like
vi-like commands.

#+begin_src emacs-lisp
  (use-package org
    :ensure nil
    :init
    ;; Make speed commands work when point is on any '*' in header
    (setq org-use-speed-commands
          (lambda () (and (looking-at org-outline-regexp)
                          (looking-back "^\**"))))
    :config
    (unbind-key "M-<up>" org-mode-map)
    (unbind-key "M-<down>" org-mode-map)
    (unbind-key "M-<left>" org-mode-map)
    (unbind-key "M-<right>" org-mode-map)
    :bind (:map org-mode-map
                ("C-S-<up>" . 'org-metaup)
                ("C-S-<down>" . 'org-metadown)
                ("C-S-<left>" . 'org-metaleft)
                ("C-S-<right>" . 'org-metaright)))
#+end_src

*** Function to check folding status

Check whether current item is folded, from [[https://emacs.stackexchange.com/questions/26827/test-whether-org-mode-heading-or-list-is-folded][here]].
#+begin_src emacs-lisp
  (defun my-org-get-folded-state ()
    "Determine whether point is at a folded heading or list item.
Returns one of symbols `not-at-node', `empty-node', `folded',
or `not-folded'."
    (cond
     ((not (or (org-at-item-p) (org-at-heading-p)))
      ;; (message "not at node (neither heading nor list item)")
      'not-at-node)
     ((org-before-first-heading-p)
      ;; (message "not at node (neither heading nor list item)")
      'not-at-node)
     (t
      (let (eoh eol eos has-children children-skipped struct)
        ;; First, determine end of headline (EOH), end of subtree or item
        ;; (EOS), and if item or heading has children (HAS-CHILDREN).
        (save-excursion
          (if (org-at-item-p)
              (progn
                (beginning-of-line)
                (setq struct (org-list-struct))
                (setq eoh (point-at-eol))
                (setq eos (org-list-get-item-end-before-blank (point) struct))
                (setq has-children (org-list-has-child-p (point) struct)))
            (org-back-to-heading)
            (setq eoh (save-excursion (outline-end-of-heading) (point)))
            (setq eos (save-excursion (org-end-of-subtree t t)
                                      (when (bolp) (backward-char)) (point)))
            (setq has-children
                  (or (save-excursion
                        (let ((level (funcall outline-level)))
                          (outline-next-heading)
                          (and (org-at-heading-p t)
                               (> (funcall outline-level) level))))
                      (save-excursion
                        (org-list-search-forward (org-item-beginning-re) eos t)))))
          ;; Determine end invisible part of buffer (EOL)
          (beginning-of-line 2)
          (while (and (not (eobp)) ;; this is like `next-line'
                      (get-char-property (1- (point)) 'invisible))
            (goto-char (next-single-char-property-change (point) 'invisible))
            (and (eolp) (beginning-of-line 2)))
          (setq eol (point)))
        (cond
         ((= eos eoh)
          ;; (message "empty node")
          'empty-node)
         ((or (>= eol eos)
              (not (string-match "\\S-" (buffer-substring eol eos))))
          ;; (message "folded")
          'folded)
         (t
          ;; (message "not folded")
          'not-folded))))))
#+end_src

*** Shorter function to check folding status

#+begin_src emacs-lisp
  (defun my-org-folded-p ()
    "Returns non-nil if point is on a folded headline or plain list
  item."
    (and (or (org-at-heading-p)
             (org-at-item-p))
         (invisible-p (point-at-eol))))
#+end_src

** Appearance

Note: More customization can be found in the blog post [[https://zzamboni.org/post/beautifying-org-mode-in-emacs/][Beautifying Org Mode in Emacs]].
Note: =org-modern= ignores =org-bullets= and friends, substituting its own bullets.

Make various elements of an org-mode document look nicer ([[https://github.com/minad/org-modern][org-modern]]).
#+begin_src emacs-lisp
  (use-package org-modern
    :ensure t
    :after org
    :custom
    (org-modern-star '("◉" "○" "●" "‣"))
    (org-modern-hide-stars nil)		; adds extra indentation
    (org-modern-table nil)
    :hook
    (org-mode . org-modern-mode)
    (org-agenda-finalize . org-modern-agenda))
#+end_src

Hide markers for italics, bold, etc.
#+begin_src emacs-lisp
  (use-package org
    :ensure nil
    :custom
    (org-hide-emphasis-markers t))
#+end_src

** Refile

See [[https://blog.aaronbieber.com/2017/03/19/organizing-notes-with-refile.html][Organizing Notes with Refile]].

** Shortcuts

Note: =org= motion commands are [[https://orgmode.org/org.html#Motion][here]].

Type "<el" and hit tab to get a source block ([[https://github.com/daviwil/emacs-from-scratch/blob/master/Emacs.org#structure-templates][emacs from scratch]]).
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    ;; This is needed as of Org 9.2
    (require 'org-tempo)
    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))
    (add-to-list 'org-structure-template-alist '("rc" . "src restclient")))
#+end_src

** LaTeX

Note: An extensive configuration for AUCTeX is [[https://sqrtminusone.xyz/configs/emacs/#latex][here]].

#+begin_src emacs-lisp :tangle no
  ;; (add-hook 'org-mode-hook #'turn-on-org-cdlatex)
  (setq org-highlight-latex-and-related '(latex))
#+end_src

** Exporting

Required for [[https://github.com/hniksic/emacs-htmlize][highlighting source code]] in exported HTML.
#+begin_src emacs-lisp
  (use-package htmlize
    :ensure t)
#+end_src

Export using Tufte's CSS: code [[https://github.com/Zilong-Li/org-tufte][here]].
#+begin_src emacs-lisp
  (use-package org-tufte
    :ensure nil
    :config
      (require 'org-tufte)
      (setq org-tufte-htmlize-code t
            org-tufte-embed-images nil))
#+end_src

I don't know if this is needed for export with =pandoc=, but here it is.
#+begin_src emacs-lisp :tangle no
  (use-package ox-pandoc
    :ensure t
    :defer t)
#+end_src

** Blogging

Note: A possibly interesting setup using Hugo, [[https://andreyorst.gitlab.io/posts/2022-10-16-my-blogging-setup-with-emacs-and-org-mode/][here]].

** REST client

Execute REST API calls in src blocks. From [[https://gitlab.com/gSwag/emacs-configuration/-/blob/master/.emacs-config.org][here]]. Its repo is [[https://github.com/alf/ob-restclient.el][here]].
Uses [[https://github.com/pashky/restclient.el][restclient.el]] under the hood.
#+begin_src emacs-lisp :tangle no
  (use-package ob-restclient
    :ensure t
    :defer t
    :hook
    (org-mode . (lambda () (interactive)
                  (org-babel-do-load-languages
                   'org-babel-load-languages
                   '((restclient . t))))))
#+end_src

** Junkyard

Note: [[https://github.com/rksm/org-ai][org-ai]] is yet another emacs interface to ChatGPT, etc.

Note: org-mode does not respect =org-bullets-bullet-list=. +Don't know why not.+
The ~org-modern~ package steals this functionality.

Use Unicode characters for bullets ([[https://github.com/sabof/org-bullets][org-bullets]]), including bullets in lists.
#+begin_src emacs-lisp :tangle no
  (use-package org-bullets
    :ensure nil
    :load-path "mode"
    :after org
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
  ;;    :hook org-mode)
#+end_src

Tried this package, too. =org= just refuses to show my bullets rather
than the defaults.
 #+begin_src emacs-lisp :tangle no
   (use-package org-superstar
     :ensure t
     :config
     (setq org-superstar-headline-bullets-list '("◉" "○" "●" "‣"))
     (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1))))
#+end_src

Handle indentation correctly ([[https://github.com/jdtsmith/org-modern-indent][org-modern-indent]]).
#+begin_src emacs-lisp :tangle no
  (use-package org-modern-indent
    :ensure nil
    :after org
    :load-path "lisp"
    :config ; add late to hook
    (add-hook 'org-mode-hook #'org-modern-indent-mode 90))
#+end_src

Github code is [[https://github.com/tj64/outline-magic][here]], but there's no documentation there. Requires more
configuration; right now it steals TAB and behaves badly.
#+begin_src emacs-lisp :tangle no
  (use-package outline-magic
    :ensure t
    :demand
    :after outline
    :bind (:map outline-minor-mode-map
                ("C-<tab>" . outline-cycle)))
#+end_src

* Completions

#+begin_src emacs-lisp
(message "starting completions")
#+end_src

** Native emacs completion

Note: A setup using only native emacs [[https://www.scss.tcd.ie/~sulimanm/posts/default-emacs-completion.html][here]].

Modify completions to include remote files.
#+begin_src emacs-lisp
  (defun basic-remote-try-completion (string table pred point)
    (and (vertico--remote-p string)
         (completion-basic-try-completion string table pred point)))

  (defun basic-remote-all-completions (string table pred point)
    (and (vertico--remote-p string)
         (completion-basic-all-completions string table pred point)))

  (add-to-list
   'completion-styles-alist
   '(basic-remote basic-remote-try-completion basic-remote-all-completions nil))
#+end_src

Settings that apply everywhere.
#+begin_src emacs-lisp :tangle no
  (setq completion-styles '(basic substring flex))
  (setq completion-cycle-threshold 10)
  (setq completion-auto-help 'lazy)
  (setq completion-ignore-case t)
  (setq completion-category-overrides '())
#+end_src

Selecting buffers.
#+begin_src emacs-lisp :tangle no
  (setq read-buffer-completion-ignore-case t)
  (add-to-list 'completion-category-overrides
               '(buffer
                 (styles basic)
                 (cycle . 10)))
#+end_src

Selecting files.
#+begin_src emacs-lisp :tangle no
  (recentf-mode)
  (setq read-file-name-completion-ignore-case t)
  (add-to-list 'completion-category-overrides
               '(file
                 (styles basic partial-completion)
                 (cycle . 10)))
#+end_src

Tab completion in an ordinary buffer.
#+begin_src emacs-lisp :tangle no
  (setq tab-always-indent 'complete)
#+end_src

Use icomplete for the completion UI
#+begin_src emacs-lisp
  ;; (icomplete-vertical-mode 1)
#+end_src

Use FIDO mode for minibuffer completion UI.
#+begin_src emacs-lisp
  ;; (fido-mode 1)
#+end_src

** Orderless package

The [[https://github.com/oantolin/orderless][Orderless]] package enables completion without regard to the order in which
candidates are entered. [[https://github.com/oantolin/orderless#style-dispatchers][Style dispatchers]] can be used to customize the completion
behaviors for =M-x= and the =describe-*= commands, for instance.
#+begin_src emacs-lisp
  (use-package orderless
    :ensure t
    :init
    (recentf-mode)
    (setq completion-cycle-threshold 10)
    (setq completion-auto-help 'lazy)
    (setq completion-ignore-case t)
    (setq read-buffer-completion-ignore-case t)
    (setq read-file-name-completion-ignore-case t)
    (setq completion-styles '(basic orderless))
    (setq completion-category-defaults nil)
    (setq completion-category-overrides
               '((buffer (cycle . 10))
                 (file (styles basic partial-completion)
                       (cycle . 10))))
    ;; See https://github.com/minad/corfu/issues/136
    (add-to-list 'completion-category-overrides
                 '(eglot (styles orderless flex)
                         (cycle . 10))))
#+end_src

** Vertico package and friends

Note: [[https://www.reddit.com/r/emacs/comments/ymriwz/can_i_start_executeextendedcommand_with_an/][Can I start "execute-extended-command" with an initial input?]]

Persist history over Emacs restarts. Vertico sorts by history position.
#+begin_src emacs-lisp
  (use-package savehist
    :ensure t
    :init
    (savehist-mode))
#+end_src

Vertico is vertical interactive completion: [[https://github.com/minad/vertico][README]]. This configuration is
from [[https://github.com/minad/vertico/wiki#make-vertico-and-vertico-directory-behave-more-like-ivyido][here]].
#+begin_src emacs-lisp
  (use-package vertico
    :ensure t
    :demand
    :custom
    (vertico-cycle t)
    (vertico-preselect 'directory)
    :bind (:map vertico-map
                ("<tab>" . vertico-insert)
                ("C-M-n" . vertico-next-group)
                ("C-M-p" . vertico-previous-group)
                ("?"     . minibuffer-completion-help)
                ("C-M-i" . minibuffer-complete)
                ("M-RET" . minibuffer-force-complete-and-exit))
    :init
    ;; Prefix the current candidate with "» ". From
    ;; https://github.com/minad/vertico/wiki#prefix-current-candidate-with-arrow
    ;; (advice-add #'vertico--format-candidate
    ;;             :around
    ;;             (lambda (orig cand prefix suffix index _start)
    ;;               (setq cand (funcall orig cand prefix suffix index _start))
    ;;               (concat
    ;;                (if (= vertico--index index)
    ;;                    (propertize "» " 'face 'vertico-current)
    ;;                  "  ")
    ;;                cand)))
    :config
    (vertico-mode))
#+end_src

The [[https://github.com/minad/marginalia][Marginalia]] package adds extra information to minibuffer completions.
#+begin_src emacs-lisp
  (use-package marginalia
    :ensure t
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    :config (marginalia-mode))
#+end_src

Mouse integration into Vertico
#+begin_src emacs-lisp
  (use-package vertico-mouse
    :after vertico
    :ensure nil)
#+end_src

IDO-like directory navigation
#+begin_src emacs-lisp
  (use-package vertico-directory
    :after vertico
    :load-path "elpa/vertico-1.2"
    :ensure nil
    :demand
    :bind (:map vertico-map
                ("RET" . vertico-directory-enter)
                ("DEL" . vertico-directory-delete-char)
                ("M-DEL" . vertico-directory-delete-word))
    ;; Tidy shadowed file names
    :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))
#+end_src

Configure Vertico per command or completion category: [[https://github.com/minad/vertico#configure-vertico-per-command-or-completion-category][README]]; also [[https://github.com/minad/vertico/wiki#annotate-m-x-commands-with-keybindings-in-flatunobtrusive-mode][here]].
#+begin_src emacs-lisp :tangle no
  (use-package vertico-multiform
    :after vertico
    :ensure nil
    :init
    ;; Taken from marginalia-annotate-binding
    (defun +vertico-annotate-binding (command)
      "Annotate COMMAND with key binding in flat/unobtrusive mode."
      (if-let* (((or (bound-and-true-p vertico-flat-mode)
                     (bound-and-true-p vertico-unobtrusive-mode)))
                (sym (intern-soft command))
                (key (and (commandp sym) (where-is-internal sym nil 'first-only))))
          (format #("%s (%s)" 3 7 (face shadow)) command (key-description key))
        command))
    (vertico-multiform-mode)
    (setq vertico-multiform-commands
          '( ;; ("\\`execute-extended-command" flat +vertico-annotate-binding)
            (consult-imenu buffer indexed)
            (describe-variable unobtrusive)
            (describe-function unobtrusive)))
    (setq vertico-multiform-categories
          '((consult-grep buffer))))
#+end_src

** Consult and friends

*** Source for cpp-mode

Consult-buffer source for cpp-mode, from [[https://git.uni-wuppertal.de/firemod_UoW/configs/emacsfire/-/blob/main/.emacs.d_vanilla/04_user_completion.org][here]].
#+begin_src emacs-lisp
(defvar  cpp-source
  (list :name     "CPP buffer"
        :category 'buffer
        :narrow   ?c
        :face     'consult-buffer
        :history  'buffer-name-history
        :state    #'consult--buffer-state
        :new
        (lambda (name)
          (with-current-buffer (get-buffer-create name)
            (cpp-mode)
            (consult--buffer-action (current-buffer))))
        :items
        (lambda ()
          (mapcar #'buffer-name
                  (seq-filter
                   (lambda (x)
                     (eq (buffer-local-value 'major-mode x) 'cpp-mode))
                   (buffer-list))))))
#+end_src

*** Source for python-mode

Consult-buffer source for python-mode, from [[https://git.uni-wuppertal.de/firemod_UoW/configs/emacsfire/-/blob/main/.emacs.d_vanilla/04_user_completion.org][here]].
#+begin_src emacs-lisp
(defvar python-source
  (list :name     "Python buffer"
        :category 'buffer
        :narrow   ?P
        :face     'consult-buffer
        :history  'buffer-name-history
        :state    #'consult--buffer-state
        :new
        (lambda (name)
          (with-current-buffer (get-buffer-create name)
            (python-mode)
            (consult--buffer-action (current-buffer))))
        :items
        (lambda ()
          (mapcar #'buffer-name
                  (seq-filter
                   (lambda (x)
                     (eq (buffer-local-value 'major-mode x) 'python-mode))
                   (buffer-list))))))
#+end_src

*** Source for emacs-lisp-mode

Consult-buffer source for emacs-lisp-mode.
#+begin_src emacs-lisp
(defvar emacs-lisp-source
  (list :name     "Emacs lisp buffer"
        :category 'buffer
        :narrow   ?E
        :face     'consult-buffer
        :history  'buffer-name-history
        :state    #'consult--buffer-state
        :new
        (lambda (name)
          (with-current-buffer (get-buffer-create name)
            (emacs-lisp-mode)
            (consult--buffer-action (current-buffer))))
        :items
        (lambda ()
          (mapcar #'buffer-name
                  (seq-filter
                   (lambda (x)
                     (eq (buffer-local-value 'major-mode x) 'emacs-lisp-mode))
                   (buffer-list))))))
#+end_src

*** Source for org-mode

Consult-buffer source for org-mode, from [[https://git.uni-wuppertal.de/firemod_UoW/configs/emacsfire/-/blob/main/.emacs.d_vanilla/04_user_completion.org][here]].
#+begin_src emacs-lisp
(defvar org-source
  (list :name     "Org buffer"
        :category 'buffer
        :narrow   ?o
        :face     'consult-buffer
        :history  'buffer-name-history
        :state    #'consult--buffer-state
        :new
        (lambda (name)
          (with-current-buffer (get-buffer-create name)
            (insert "#+title: " name "\n\n")
            (org-mode)
            (consult--buffer-action (current-buffer))))
        :items
        (lambda ()
          (mapcar #'buffer-name
                  (seq-filter
                   (lambda (x)
                     (eq (buffer-local-value 'major-mode x) 'org-mode))
                   (buffer-list))))))
#+end_src

*** Source for vterm

Consult-buffer source for vterm, from [[https://git.uni-wuppertal.de/firemod_UoW/configs/emacsfire/-/blob/main/.emacs.d_vanilla/04_user_completion.org][here]].
#+begin_src emacs-lisp
(defvar  vterm-source
  (list :name     "Vterm buffer"
        :category 'buffer
        :narrow   ?v
        :face     'consult-buffer
        :history  'buffer-name-history
        :state    #'consult--buffer-state
        :new
        (lambda (name)
          (with-current-buffer (get-buffer-create name)
            ;;(insert "#+title: " name "\n\n")
            (vterm-mode)
            (consult--buffer-action (current-buffer))))
        :items
        (lambda ()
          (mapcar #'buffer-name
                  (seq-filter
                   (lambda (x)
                     (eq (buffer-local-value 'major-mode x) 'vterm-mode))
                   (buffer-list))))))
#+end_src

*** Source for eshell

Consult-buffer source for eshell, from [[https://git.uni-wuppertal.de/firemod_UoW/configs/emacsfire/-/blob/main/.emacs.d_vanilla/04_user_completion.org][here]].
#+begin_src emacs-lisp
(defvar  eshell-source
  (list :name     "Eshell buffer"
        :category 'buffer
        :narrow   ?e
        :face     'consult-buffer
        :history  'buffer-name-history
        :state    #'consult--buffer-state
        :new
        (lambda (name)
          (with-current-buffer (get-buffer-create name)
            ;;(insert "#+title: " name "\n\n")
            (eshell-mode)
            (consult--buffer-action (current-buffer))))
        :items
        (lambda ()
          (mapcar #'buffer-name
                  (seq-filter
                   (lambda (x)
                     (eq (buffer-local-value 'major-mode x) 'eshell-mode))
                   (buffer-list))))))
#+end_src

*** Consult package

These buffers will be ignored by the consult-buffer command (C-x b)
#+begin_src emacs-lisp
  (defvar my-hidden-buffers '("\\`\\*Compile-Log\\*\\'"
                              "\\`\\*Async-native-compile-log\\*\\'"
                              "\\`\\*Flycheck errors\\*\\'"
                              "\\`\\*Flycheck error messages\\*\\'"
                              "\\`\\*EGLOT.*\\*\\'"
                              "\\`\\*Native-compile-Log\\*\\'"
                              "\\`\\*debug tramp/.*\\*\\'"))
#+end_src

From the consult wiki, [[https://github.com/minad/consult/wiki#narrowing-which-key-help-without-delay][Narrowing which-key help without delay]].
#+begin_src emacs-lisp
(defun immediate-which-key-for-narrow (fun &rest args)
  (let* ((refresh t)
         (timer (and consult-narrow-key
                     (memq :narrow args)
                     (run-at-time 0.05 0.05
                                  (lambda ()
                                    (if (eq last-input-event (elt consult-narrow-key 0))
                                        (when refresh
                                          (setq refresh nil)
                                          (which-key--update))
                                      (setq refresh t)))))))
    (unwind-protect
        (apply fun args)
      (when timer
        (cancel-timer timer)))))
(advice-add #'consult--read :around #'immediate-which-key-for-narrow)
#+end_src

Simplify the =consult-buffer= command: [[https://github.com/minad/consult/wiki#hide-all-sources-except-normal-buffers-in-consult-buffer-by-default][Consult wiki]]
Filter out unwanted buffers in list: [[https://www.reddit.com/r/emacs/comments/yy79pn/how_to_hideignore_orgroam_buffersfiles_when_using/][Reddit]]
#+begin_src emacs-lisp
  (use-package consult
    :ensure t
    :after vertico
    :config
    ;; Make consult-buffer show only buffers initially
    (dolist (src consult-buffer-sources)
      (unless (eq src 'consult--source-buffer)
        (set src (plist-put (symbol-value src) :hidden t))))
    ;; Filter out unwanted buffers shown by consult-buffer
    (dolist (buff my-hidden-buffers)
      (add-to-list 'consult-buffer-filter buff t))
    ;; Use `consult-completion-in-region' if Vertico is enabled.
    ;; Otherwise use the default `completion--in-region' function.
    ;; (setq completion-in-region-function
    ;;       (lambda (&rest args)
    ;;         (apply (if vertico-mode
    ;;                    #'consult-completion-in-region
    ;;                  #'completion--in-region)
    ;;                args)))
    (setq consult-narrow-key "<")
    (setq consult-widen-key ">")
    (add-to-list 'consult-buffer-sources 'cpp-source 'append)
    (add-to-list 'consult-buffer-sources 'python-source 'append)
    (add-to-list 'consult-buffer-sources 'emacs-lisp-source 'append)
    (add-to-list 'consult-buffer-sources 'org-source 'append)
    (add-to-list 'consult-buffer-sources 'eshell-source 'append)
    (unless (eq system-type 'windows-nt)
      (add-to-list 'consult-buffer-sources 'vterm-source 'append)))
  ;; :hook (completion-list-mode . consult-preview-at-point-mode))
#+end_src

*** Consult key bindings

Key bindings for consult package.
#+begin_src emacs-lisp
  (use-package consult
    :after vertico
    :bind (;; C-c bindings in `mode-specific-map'
           ("C-c h" . consult-history)
           ("C-c k" . consult-kmacro)
           ("C-c m" . consult-man)                   ;; broken on Windows
           ("C-c i" . consult-info)
           ([remap Info-search] . consult-info)
           ;; C-x bindings in `ctl-x-map'
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ;; M-g bindings in `goto-map'
           ("M-g e" . consult-compile-error)
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings in `search-map'
           ("M-s d" . consult-find)                  ;; broken on Windows
           ("M-s D" . consult-locate)                ;; broken on Windows
           ("M-s G" . consult-grep)                  ;; broken on Windows
           ("M-s g" . consult-git-grep)
           ("M-s l" . consult-line)                  ;; broken on Windows
           ("M-s L" . consult-line-multi)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi)))          ;; needed by consult-line to detect isearch
#+end_src

=consult-flycheck= seems to need special treatment.
#+begin_src emacs-lisp
  (use-package consult-flycheck
    :ensure t
    :after flycheck
    :bind ("M-g f" . consult-flycheck))
#+end_src

*** Consult customize

Not sure what this does, so it's turned off for now. From [[https://git.uni-wuppertal.de/firemod_UoW/configs/emacsfire/-/blob/main/.emacs.d_vanilla/04_user_completion.org][here]].
#+begin_src emacs-lisp :tangle no
  (consult-customize
   consult-theme
   ;; :preview-key '(:debounce 0.2 any)
   consult-ripgrep
   consult-git-grep
   consult-grep
   consult-bookmark
   consult-recent-file
   consult-xref
   consult--source-recent-file
   consult--source-project-recent-file
   consult--source-bookmark
   :preview-key "C-,"
   )
#+end_src

Consult-buffer source for org-mode, from [[https://git.uni-wuppertal.de/firemod_UoW/configs/emacsfire/-/blob/main/.emacs.d_vanilla/04_user_completion.org][here]].
#+begin_src emacs-lisp

#+end_src

Consult-buffer source for org-mode, from [[https://git.uni-wuppertal.de/firemod_UoW/configs/emacsfire/-/blob/main/.emacs.d_vanilla/04_user_completion.org][here]].
#+begin_src emacs-lisp

#+end_src

Show all the files accessible to git stash: [[https://github.com/rcj/consult-ls-git][README]]
#+begin_src emacs-lisp :tangle no
  (use-package consult-ls-git
    :ensure t
    :bind
    (("C-c g f" . #'consult-ls-git)
     ("C-c g F" . #'consult-ls-git-other-window)))
#+end_src

** Corfu and friends

*** Notes

Note: [[https://github.com/minad/corfu/issues/136][How to make corfu + orderless work well with eglot + clangd]]
Note: [[https://github.com/minad/corfu/wiki#configuring-corfu-for-eglot][Configuring corfu for eglot]]
Note: [[https://github.com/minad/corfu#completing-in-the-eshell-or-shell][Completing in eshell or shell]]

*** Corfu package

[[https://github.com/minad/corfu][Corfu]] is a completion UI that makes use of emacs' native completion functions.
Here I set it up with [[https://github.com/minad/corfu#tab-and-go-completion][tab-and-go completion]]. It could also be used for completion
in the [[https://github.com/minad/corfu#completing-in-the-minibuffer][minibuffer]].
#+begin_src emacs-lisp
  (use-package corfu
    :ensure t
    ;; Optional customizations
    :custom
    (corfu-cycle t)
    (corfu-preselect 'prompt)

    ;; Optionally use TAB for cycling, default is `corfu-complete'.
    :bind (:map corfu-map
                ("M-SPC"      . corfu-insert-separator)
                ("TAB"        . corfu-next)
                ([tab]        . corfu-next)
                ("S-TAB"      . corfu-previous)
                ([backtab]    . corfu-previous)
                ("C-<return>" . corfu-insert)
                ("RET"        . nil))

    :init
    (defun corfu-enable-in-eshell ()
      "Enable completion with corfu in the eshell buffer."
      (setq-local corfu-quit-at-boundary t
                  corfu-quit-no-match t
                  corfu-auto nil)
      (corfu-mode 1))

    (defun corfu-send-shell (&rest _)
      "Send completion candidate when inside comint/eshell."
      (cond
       ((and (derived-mode-p 'eshell-mode) (fboundp 'eshell-send-input))
        (eshell-send-input))
       ((and (derived-mode-p 'comint-mode)  (fboundp 'comint-send-input))
        (comint-send-input))))

    (advice-add #'corfu-insert :after #'corfu-send-shell)

    ;; (global-corfu-mode)
    (corfu-history-mode)

    :config
    (setq tab-always-indent 'complete)
    :hook
    ((prog-mode . corfu-mode)
     (eshell-mode . corfu-enable-in-eshell)))
#+end_src

*** Cape package

[[https://github.com/minad/cape][Cape]] provides =completion-at-point= extensions.
#+begin_src emacs-lisp
  (use-package cape
    :ensure t
    ;; Bind dedicated completion commands
    ;; Alternative prefix keys: C-c p, M-p, M-+, ...
    :bind (("C-c p p" . completion-at-point) ;; capf
           ("C-c p t" . complete-tag)        ;; etags
           ("C-c p d" . cape-dabbrev)        ;; or dabbrev-completion
           ("C-c p h" . cape-history)
           ("C-c p f" . cape-file)
           ("C-c p k" . cape-keyword)
           ("C-c p s" . cape-symbol)
           ("C-c p a" . cape-abbrev)
           ("C-c p i" . cape-ispell)
           ("C-c p l" . cape-line)
           ("C-c p w" . cape-dict)
           ("C-c p \\" . cape-tex)
           ("C-c p _" . cape-tex)
           ("C-c p ^" . cape-tex)
           ("C-c p &" . cape-sgml)
           ("C-c p r" . cape-rfc1345))
    :init
    ;; Add `completion-at-point-functions', used by `completion-at-point'.
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    (add-to-list 'completion-at-point-functions #'cape-file)
    ;;(add-to-list 'completion-at-point-functions #'cape-history)
    ;;(add-to-list 'completion-at-point-functions #'cape-keyword)
    ;;(add-to-list 'completion-at-point-functions #'cape-tex)
    ;;(add-to-list 'completion-at-point-functions #'cape-sgml)
    ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)
    ;;(add-to-list 'completion-at-point-functions #'cape-abbrev)
    ;;(add-to-list 'completion-at-point-functions #'cape-ispell)
    ;;(add-to-list 'completion-at-point-functions #'cape-dict)
    ;;(add-to-list 'completion-at-point-functions #'cape-symbol)
    ;;(add-to-list 'completion-at-point-functions #'cape-line)

    (when (< emacs-major-version 29)
      ;; Silence the pcomplete capf, no errors or messages!
      (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-silent)
      ;; Ensure that pcomplete does not write to the buffer
      ;; and behaves as a pure `completion-at-point-function'.
      (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-purify))
  )
#+end_src

** Embark package

#+begin_src emacs-lisp :tangle no
  (use-package embark
    :disabled
    :ensure t

    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

    :init

    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)

    :config

    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :ensure t
    :after (embark consult)
    :demand t ; only necessary if you have the hook below
    ;; if you want to have consult previews as you move around an
    ;; auto-updating embark collect buffer
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

** Notes

https://www.masteringemacs.org/article/understanding-minibuffer-completion
https://www.masteringemacs.org/article/introduction-to-ido-mode

#+begin_src emacs-lisp
  (global-set-key (kbd "M-/") 'hippie-expand)
#+end_src

Show all buffers currently displayed in windows in all frames
#+begin_src emacs-lisp
  ;; (mapcar (lambda (frame) (cons frame (list (window-list frame)))) (frame-list))
#+end_src

* Remote

** Tramp

Note: A possibly useful blog post: [[https://www.eigenbahn.com/2020/07/08/painless-emacs-remote-shells][Painless Emacs remote shells]].

#+begin_src emacs-lisp
(message "starting remote")
#+end_src

From [[https://gist.github.com/agumonkey/dc6e55e7e47de9b34980e933a346e82bhttps://gist.github.com/agumonkey/dc6e55e7e47de9b34980e933a346e82b][init-tramp-plink.el]]
#+begin_src emacs-lisp
  (require 'tramp)
  (modify-coding-system-alist 'process "plink" 'utf-8-unix)
  (setq tramp-default-method "plink"
        tramp-completion-without-shell-p t
        tramp-verbose 10
        tramp-debug-buffer t)

  ;; (let ((path (getenv "PATH"))
  ;;       (plink (expand-file-name "PuTTY" (getenv "ProgramFiles(x86)"))))
  ;;   (setenv "PATH" (concat plink path-separator path)))

  ;; ;; (add-to-list 'exec-path "C:/Program Files (x86)/PuTTY/")
  ;; (add-to-list 'exec-path (expand-file-name "PuTTY" (getenv "ProgramFiles(x86)")))
#+end_src

Exclude Tramp buffers from preview: [[https://github.com/minad/consult/wiki#do-not-preview-exwm-windows-or-tramp-buffers][Consult wiki]]
#+begin_src emacs-lisp
  (defun consult-buffer-state-no-tramp ()
    "Buffer state function that doesn't preview Tramp buffers."
    (let ((orig-state (consult--buffer-state))
          (filter (lambda (action cand)
                    (if (and cand
                             (or (eq action 'return)
                                 (let ((buffer (get-buffer cand)))
                                   (and buffer
                                        (not (file-remote-p
                                              (buffer-local-value 'default-directory buffer)))))))
                        cand
                      nil))))
      (lambda (action cand)
        (funcall orig-state action (funcall filter action cand)))))

  ;; (setq consult--source-buffer
  ;;       (plist-put consult--source-buffer :state #'consult-buffer-state-no-tramp))
#+end_src

From [[https://www.emacswiki.org/emacs/Tramp_on_Windows][Tramp on Windows]]
#+begin_src emacs-lisp
    ;; (when (eq window-system 'w32)
    ;;   (setq tramp-default-method "plink")
    ;;   (when (and (not (string-match my-putty-directory (getenv "PATH")))
    ;; 	     (file-directory-p my-putty-directory))
    ;;     (setenv "PATH" (concat my-putty-directory ";" (getenv "PATH")))
    ;;     (add-to-list 'exec-path my-putty-directory)))
#+end_src

** Docker

Notes: Run Emacs from inside Docker; instructions [[https://github.com/JAremko/docker-emacs][here]]. Someone else
is running what he says is an Emacs Python IDE using Docker, [[https://rebeja.eu/posts/python-ide-with-emacs-and-docker/][here]]. Yet
another way to run Docker, a Python script called [[https://github.com/jkitchin/devcontainer][devcontainer]].

Emacs Docker package [[https://github.com/Silex/docker.el][here]].
#+begin_src emacs-lisp :tangle no
  (use-package docker
    :ensure t)
#+end_src

* Version control

** Magit package

Note: An example =magit= configuration can be found [[https://gist.github.com/soonhokong/235ae79cb0639b15f8b1][here]].

In spite of all the rave reviews, I'm not sure this package is worth
having.
#+begin_src emacs-lisp :tangle no
  (use-package magit
    :ensure t
    :pin nongnu
    :init
    (setq magit-git-executable my-git-executable))
#+end_src

** Status display

Note: The author of =git-gutter= insists on hard-coding the value of the
=git= executable, so using this with Git for Windows and MSYS2 won't
work without extensive changes to =git-gutter.el=.

#+begin_src emacs-lisp :tangle no
  (when (eq system-type 'windows-nt)
    (use-package git-gutter
      :ensure nil
      :load-path "lisp"
      :hook (prog-mode . git-gutter-mode)
      :custom
      (git-gutter:update-interval 0.02)
      (git-gutter:git-program my-git-executable)))
#+end_src

Make the gutter show added/deleted/modified code blocks ([[https://ianyepan.github.io/posts/emacs-git-gutter/][Ian Y.E. Pan]] blog).
#+begin_src emacs-lisp :tangle no
  (unless (eq system-type 'windows-nt)
    (use-package git-gutter
      :ensure nil
      :load-path "lisp"
      :hook (prog-mode . git-gutter-mode)
      :custom
      (git-gutter:update-interval 0.02)))
#+end_src

#+begin_src emacs-lisp :tangle no
  (use-package git-gutter-fringe
    :ensure t
    :config
    (define-fringe-bitmap 'git-gutter-fr:added [224] nil nil '(center repeated))
    (define-fringe-bitmap 'git-gutter-fr:modified [224] nil nil '(center repeated))
    (define-fringe-bitmap 'git-gutter-fr:deleted [128 192 224 240] nil nil 'bottom))
#+end_src

* Web access

#+begin_src emacs-lisp
(message "starting web access")
#+end_src

** Mastodon

From Sacha Chua's configuration [[https://sachachua.com/dotemacs/index.html#mastodon][here]].
#+begin_src emacs-lisp
#+end_src

** Search engines

Access search engines from emacs, [[https://github.com/hrs/engine-mode][here]].
#+begin_src emacs-lisp
  (use-package engine-mode
    :ensure t
    :bind-keymap ("C-c s" . engine-mode-prefixed-map)
    :config
    (defengine google
               "https://www.google.com/search?ie=utf-8&oe=utf-8&q=%s"
               :keybinding "g")
    (defengine wikipedia
               "https://www.wikipedia.org/search-redirect.php?language=en&go=Go&search=%s"
               :keybinding "w")
    (defengine stack-overflow
               "https://stackoverflow.com/search?q=%s"
               :keybinding "s")
    (defengine emacs-stack-exchange
               "https://emacs.stackexchange.com/search?q=%s"
               :keybinding "e")
    (defengine python-stack-exchange
               "https://python.stackexchange.com/search?q=%s"
               :keybinding "p")
    (defengine github
               "https://github.com/search?ref=simplesearch&q=%s"
               :keybinding "h")
    (defengine wolfram-alpha
               "https://www.wolframalpha.com/input/?i=%s"
               :keybinding "a")
    (engine-mode t))
#+end_src

* Shell modes

#+begin_src emacs-lisp
(message "starting shell modes")
#+end_src

** Notes

Installation [[https://github.com/akermu/emacs-libvterm/#requirements][instructions]] for [[https://github.com/akermu/emacs-libvterm][emacs-libvterm]]. Doesn't work for Windows.
Toggle between a buffer and vterm ([[https://github.com/akermu/emacs-libvterm/#requirements][vterm-toggle]]).

A possibly useful blog post: [[https://www.eigenbahn.com/2020/01/21/painless-emacs-interactive-shells][Painless Emacs interactive shells]].

A guy who says he uses =zsh= on Windows, [[https://www.reddit.com/r/emacs/comments/n8jd7z/emacs_msys2_windows_task_scheduler_a_love_story/][here]]. (Also has daemon setup.)

This code is in my =.bash_profile=, defining the =bash= prompt. The
=myprompt= function, together with =PROMPT_COMMAND=, enables directory
tracking, per this [[https://www.masteringemacs.org/article/running-shells-in-emacs-overview][article]].
#+begin_src shell :tangle no
    # printf "\x1b[38;2;40;177;249mTRUECOLOR\x1b[0m\n"
    # printf "\x1b[38;2;197;134;192mVIOLET\x1b[0m\n"
    # printf "\x1b[38;2;78;201;176mGREEN\x1b[0m\n"
    # printf "\x1b[38;2;255;195;0mYELLOW\x1b[0m\n"
    if [ -n "$INSIDE_EMACS" ]; then
        CONDAENV="\033[38;2;78;201;176m$(parse_conda_env)\033[0m"
        DIRNAME="\033[38;2;255;195;0m\w\033[0m"
        GITSTATUS="\033[38;2;197;134;192m$(__git_ps1)\033[0m"
        if [ ! -z "$FOUND_GIT_PROMPT_SH" ];then
            export PS1="${CONDAENV}${DIRNAME}${GITSTATUS} $ "
        else
            export PS1="${CONDAENV}${DIRNAME} $ "
        fi
        unset CONDAENV DIRNAME GITSTATUS
#+end_src

This guy [[https://www.masteringemacs.org/article/running-shells-in-emacs-overview][says]] the following is needed in =.bash_profile=. He's wrong.
#+begin_src shell :tangle no
        function myprompt () {
            printf "\e]7;file://%s%s\e\\" "$HOSTNAME" "$PWD"
        }
        PROMPT_COMMAND=myprompt
    fi
#+end_src

A useful StackExchange answer about ANSI color escape codes is [[https://stackoverflow.com/questions/4842424/list-of-ansi-color-escape-sequences][here]].

** Comint processes

Close the window containing the interpreter and kill its buffer when
the interpreter exits. Adapted from a StackExchange answer [[https://emacs.stackexchange.com/questions/48306/how-to-automatically-kill-a-shell-buffer-when-the-shell-process-exits][here]].
#+begin_src emacs-lisp
  (defun my-add-kill-buffer-sentinel ()
    "Set a process sentinel that kills the buffer when the process exits."
    (let* ((process (get-buffer-process (current-buffer)))
           (sentinel (process-sentinel process)))
      (set-process-sentinel
       process
       `(lambda (process signal)
          ;; Call the original process sentinel first.
          (funcall #',sentinel process signal)
          ;; Kill the buffer on an exit signal.
          (when (memq (process-status process) '(exit signal))
            (let ((buffer (process-buffer process)))
              (when (buffer-live-p buffer)
                (quit-window t (get-buffer-window buffer)))))))))
#+end_src

** Shell

Notes: [[https://github.com/atomontage/xterm-color][xterm-color]] for better color emulation, supposedly. Mastering Emacs
has a nice [[https://www.masteringemacs.org/article/running-shells-in-emacs-overview][introduction]] to running shells. The configuration below starts
with error message "no job control in this shell"; there's a discussion on
[[https://emacs.stackexchange.com/questions/71487/mingw-shell-in-emacs][StackExchange]]. Another possible hint involving =system-uses-terminfo= [[https://stackoverflow.com/questions/39761234/git-bash-for-windows-not-working-lein-repl-command][here]].

#+begin_src emacs-lisp
  (defun get-shell-file-name (&optional shell-name)
    "Return the explicit path to SHELL-NAME, based on `system-type'
and the variables defined in the `site/<hostname>-preload.el' file.
If SHELL-NAME is nil, use \"bash\"."
      (let ((shell-name (or shell-name "bash")))
        (cond ((eq system-type 'windows-nt)
               (if (bound-and-true-p my-mingw-dir)
                   (expand-file-name
                    (concat
                     (file-name-directory my-mingw-dir)
                     (format "usr/bin/%s.exe" shell-name)))
                 (user-error "Site-specific variable 'my-mingw-dir is undefined.")))
              (t
               (executable-find shell-name)))))
#+end_src

#+begin_src emacs-lisp
  (defun my-close-shell-window ()
    "Close the shell window without killing its buffer or process."
    (interactive)
    (let ((buffer (current-buffer)))
      (unless (eq
               (alist-get'major-mode (buffer-local-variables buffer))
               'shell-mode)
        (user-error "Buffer '%s' is not running a shell." buffer))
      (let ((window (get-buffer-window buffer)))
        ;; Borrowed from popper.el
        (when (window-valid-p window)
          (cond
           ((window-parent window)
            (if (window-parameter window 'window-side)
                (delete-window window)
              (quit-window nil window)))
           ((frame-parent) (delete-frame))
           (t (quit-window nil window)))))))
#+end_src

#+begin_src emacs-lisp
  (defun my-fix-shell-prompt-colors ()
    "Leave comint buffer background in the prompt alone."
    (face-remap-set-base 'comint-highlight-prompt :inherit nil))
#+end_src

#+begin_src emacs-lisp
  (use-package shell
    :defer t
    :custom
    (shell-command-default-error-buffer "*Shell Errors*")
    :config
    (setq explicit-shell-file-name (get-shell-file-name))
    (setq shell-file-name explicit-shell-file-name)
    (setenv "SHELL" explicit-shell-file-name)
    (setq explicit-bash.exe-args (list "-i" "-l"))
    (setq system-uses-terminfo t)  ;; has no effect, apparently
    (add-hook 'comint-output-filter-functions #'shell-filter-ring-bell nil t)
    :bind
    (("<f6>" . shell)
     (:map shell-mode-map
           ("<f6>" . my-close-shell-window)))
    :hook
    ((shell-mode . my-add-kill-buffer-sentinel)
     (shell-mode . my-fix-shell-prompt-colors)))
#+end_src

** Vterm

Make =vterm= reuse windows. From Mastering Emacs, [[https://www.masteringemacs.org/article/demystifying-emacs-window-manager][Demystifying Emacs' Window Manager]].
#+begin_src emacs-lisp
  (unless (eq system-type 'windows-nt)
    (add-to-list 'display-buffer-alist
                 '("\\*vterm\\*" display-buffer-reuse-mode-window
                   ;; change to `t' to not reuse same window
                   (inhibit-same-window . nil)
                   (mode vterm-mode vterm-copy-mode))))
#+end_src

** Eshell

Support jumping to prompts in eshell ([[https://github.com/minad/consult/wiki#consult-outline-support-for-eshell-prompts][Consult wiki]]).
#+begin_src emacs-lisp
  (use-package eshell
    :preface
    (defun my-set-eshell-regexp ()
      (setq outline-regexp eshell-prompt-regexp))
    :hook (eshell-mode . my-set-eshell-regexp))
#+end_src

** Powershell

Github repo [[https://github.com/jschaf/powershell.el][here]]. Run =M-x powershell= to get a shell.
#+begin_src emacs-lisp
  (when (eq system-type 'windows-nt)
    (use-package powershell
      :ensure t
      :defer t
      :hook
      ((powershell-mode . my-add-kill-buffer-sentinel))))
#+end_src

Close the powershell window without killing its buffer.
#+begin_src emacs-lisp
  (defun my-close-powershell-window ()
    (interactive)
    (let ((buffer (current-buffer))
          (window (get-buffer-window buffer)))
      ;; Borrowed from popper.el
      (when (window-valid-p window)
        (cond
         ((window-parent window)
          (if (window-parameter window 'window-side)
              (delete-window window)
            (quit-window nil window)))
         ((frame-parent) (delete-frame))
         (t (quit-window nil window))))))
#+end_src

* Programming

#+begin_src emacs-lisp
(message "starting programming")
#+end_src

** Notes

The package [[https://github.com/radian-software/apheleia][apheleia]] handles code formatters like [[https://github.com/psf/black][Black]] for Python or
[[https://clang.llvm.org/docs/ClangFormat.html][clang-format]] for C/C++ in a language-independent way. See an example
configuration [[https://gitlab.com/gSwag/emacs-configuration/-/blob/master/.emacs-config.org][here]]. There's a convenient web app to set =clang-format=
options [[https://clang.llvm.org/docs/ClangFormat.html][here]].

** Projects

*** TOML

Use the 'pyproject.toml' file in a project to set various defaults for
the project. A useful StackOverflow discussion of this file is [[https://stackoverflow.com/questions/62983756/what-is-pyproject-toml-file-for][here]].

A [[https://github.com/gongo/emacs-toml][package]] to read TOML files.
#+begin_src emacs-lisp
  (use-package toml
    :ensure t)
#+end_src

Read a toml file into an alist.
#+begin_src emacs-lisp
  (defun my-toml-read-file (dirname &optional filename)
    "Read a TOML file found in directory DIRNAME and return its
  contents. If FILENAME is not specified, use `pyproject.py'."
    (let* ((dirpath (file-name-as-directory (expand-file-name dirname)))
           (filepath (concat dirpath (or filename "pyproject.toml"))))
      (unless (file-exists-p filepath)
        (user-error "Can't find file at %s" filepath))
      (unless (file-readable-p filepath)
        (user-error "File at %s is not readable" filepath))
      (toml:read-from-file filepath)))
#+end_src

Query the toml alist.
#+begin_src emacs-lisp
  (defun my-toml-get-setting (toml-obj setting)
    "Query TOML-OBJ using SETTING, which is either a string or a list
  of strings containing keys found in TOML-OBJ."
    (let* ((path (if (listp setting) setting (list setting)))
           (result (toml:assoc path toml-obj)))
      (cdr-safe result)))
#+end_src

Get the settings under =[tool.pytest.ini_options]=.
#+begin_src emacs-lisp
  (defun my-toml-settings-pytest (dirname &optional key)
    "Get the pytest settings in the pyproject.py file in directory
  DIRNAME."
    (let ((toml (my-toml-read-file dirname))
          (path '("tool" "pytest" "ini_options")))
      (my-toml-get-setting
       toml
       (append path (if key (list key) '())))))
#+end_src

Get the settings under =[tool.pyright]=.
#+begin_src emacs-lisp
  (defun my-toml-settings-pyright (dirname &optional key)
    "Get the pyright settings in the pyproject.py file in directory
  DIRNAME."
    (let ((toml (my-toml-read-file dirname))
          (path '("tool" "pyright")))
      (my-toml-get-setting
       toml
       (append path (if key (list key) '())))))
#+end_src

#+begin_src emacs-lisp
  (defun my-toml-ignored-dirs (dirname)
    ""
    (let ((ignore (my-toml-settings-pyright dirname "ignore"))
          (exclude (my-toml-settings-pyright dirname "exclude")))
      (mapcar 'expand-file-name (append ignore exclude))))
#+end_src

*** Project

Note: [[https://github.com/karthink/project-x][project-x.el]] has some possibly useful extensions. There's also
[[https://github.com/redguardtoo/find-file-in-project][find-file-in-project.el]].

#+begin_src emacs-lisp
  (use-package project
    :ensure nil
    )
#+end_src

Here is a simple [[https://blog.sumtypeofway.com/posts/emacs-config.html][configuration]] for Emacs' new built-in =project.el=.
#+begin_src emacs-lisp :tangle no
    (use-package project
      :pin gnu
      ;; :bind (("C-c k" . #'project-kill-buffers)
      ;;        ("C-c m" . #'project-compile)
      ;;        ("C-x f" . #'find-file)
      ;;        ("C-c f" . #'project-find-file)
      ;;        ("C-c F" . #'project-switch-project))
      :custom
      ;; Customize the options shown upon switching projects.
      (project-switch-commands
       '((project-find-file "Find file")
         (magit-project-status "Magit" ?g)
         (deadgrep "Grep" ?h)))
      (compilation-always-kill t)
      (project-vc-merge-submodules nil))
  ;;    (project-current-directory-override nil)
  ;;    (project-vc-include-untracked nil))
  ;;    (project-directory-exclusion-list '())
#+end_src

A =consult= package, [[https://github.com/Qkessler/consult-project-extra][consult-project-extra.el]] for project.el.
#+begin_src emacs-lisp :tangle no
  (use-package consult-project-extra
    :ensure t)
#+end_src

Switching projects by visiting a file, from [[https://macowners.club/posts/custom-functions-5-navigation/][here]].
#+begin_src emacs-lisp
  (defun timu-nav-project-switch-project (dir)
    "\"Switch\" to another project by running an Emacs command.
  Directly use `project-find-file' instead of getting prompted.

  When called in a program, it will use the project corresponding
  to directory DIR."
    (interactive (list (project-prompt-project-dir)))
      (let ((project-current-directory-override dir))
      (project-find-file)))
#+end_src

Save project buffers only before compilation, from [[https://andreyorst.gitlab.io/posts/2022-07-16-project-el-enhancements/][here]].
#+begin_src emacs-lisp
  (defun project-save-some-buffers (&optional arg)
    "Save some modified file-visiting buffers in the current project.

  Optional argument ARG (interactively, prefix argument) non-nil
  means save all with no questions."
    (interactive "P")
    (let* ((project-buffers (project-buffers (project-current)))
           (pred (lambda () (memq (current-buffer) project-buffers))))
      (funcall-interactively #'save-some-buffers arg pred)))
#+end_src

#+begin_src emacs-lisp :tangle no
  (define-advice project-compile (:around (fn) save-project-buffers)
    "Only ask to save project-related buffers."
    (let* ((project-buffers (project-buffers (project-current)))
           (compilation-save-buffers-predicate
            (lambda () (memq (current-buffer) project-buffers))))
      (funcall fn)))
#+end_src

#+begin_src emacs-lisp :tangle no
  (define-advice recompile (:around (fn &optional edit-command) save-project-buffers)
    "Only ask to save project-related buffers if inside a project."
    (if (project-current)
        (let* ((project-buffers (project-buffers (project-current)))
               (compilation-save-buffers-predicate
                (lambda () (memq (current-buffer) project-buffers))))
          (funcall fn edit-command))
      (funcall fn edit-command)))
#+end_src

*** Projectile (disabled)

Maintain projects in emacs. Color me skeptical. Documentation for
=projectile= is [[https://docs.projectile.mx/projectile/index.html][here]]. There's a =consult= package, [[https://gitlab.com/OlMon/consult-projectile][consult-projectile]].
David Wilson blabbers on about =projectile= in this [[https://www.youtube.com/watch?v=INTu30BHZGk&list=PLEoMzSkcN8oPH1au7H6B7bBJ4ZO7BXjSZ&index=4&t=130s][video]].
#+begin_src emacs-lisp :tangle no
  (use-package projectile
    :ensure t
    :diminish projectile-mode
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)  ;; conflicts with cape
    :init
    (when (file-directory-p "~/working")
      (setq projectile-project-search-path '("~/working")))
    (setq projectile-switch-project-action #'projectile-dired)
    :config (projectile-mode))
#+end_src

#+begin_src emacs-lisp :tangle no
  (projectile-global-mode t)
  (setq projectile-indexing-method 'git)
  (setq projectile-enable-caching t)
#+end_src

** Man pages

#+begin_src emacs-lisp
  (defun my-prefix (path &optional prefix)
    "Make PATH an absolute path using PREFIX."
    (let ((prefix (or prefix my-msys2-dir)))
      (expand-file-name path prefix)))
#+end_src

#+begin_src emacs-lisp
  (defvar my-man-paths
    (mapcar
     #'my-prefix
     '("mingw64/local/man/"
       "mingw64/share/man/"
       "usr/local/man/"
       "usr/share/man/"
       "usr/man/"
       "share/man/")))
#+end_src

#+begin_src emacs-lisp
  (use-package woman
    :custom
    (woman-manpath my-man-paths))
#+end_src

** Linting

Documentation for flycheck [[https://www.flycheck.org][here]].
#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :demand
    :preface
    (defun mp-flycheck-prefer-eldoc ()
      (add-hook 'eldoc-documentation-functions #'mp-flycheck-eldoc nil t)
      (setq eldoc-documentation-strategy 'eldoc-documentation-compose-eagerly)
      (setq flycheck-display-errors-function nil)
      (setq flycheck-help-echo-function nil))
    :init
    (setq flycheck-highlighting-mode 'symbols
          flycheck-indication-mode 'left-fringe
          flycheck-standard-error-navigation t)
    :bind (("M-n" . flycheck-next-error)
           ("M-p" . flycheck-previous-error)
           ("M-l" . flycheck-list-errors))
    :hook ((flycheck-mode . mp-flycheck-prefer-eldoc)
           (after-init . global-flycheck-mode)))
#+end_src

Make flycheck play nice with eldoc. From
[[https://www.masteringemacs.org/article/seamlessly-merge-multiple-documentation-sources-eldoc][Seamlessly Merge Documentation Sources with Eldoc]].
#+begin_src emacs-lisp
  (defun mp-flycheck-eldoc (callback &rest _ignored)
     "Print flycheck messages at point by calling CALLBACK."
     (when-let ((flycheck-errors (and flycheck-mode (flycheck-overlay-errors-at (point)))))
       (mapc
        (lambda (err)
          (funcall callback
             (format "%s: %s"
                     (let ((level (flycheck-error-level err)))
                       (pcase level
                         ('info (propertize "I" 'face 'flycheck-error-list-info))
                         ('error (propertize "E" 'face 'flycheck-error-list-error))
                         ('warning (propertize "W" 'face 'flycheck-error-list-warning))
                         (_ level)))
                     (flycheck-error-message err))
             :thing (or (flycheck-error-id err)
                        (flycheck-error-group err))
             :face 'font-lock-doc-face))
        flycheck-errors)))
#+end_src

#+begin_src emacs-lisp
  (use-package eldoc
    :preface
     (add-to-list 'display-buffer-alist
                 '("^\\*eldoc for" display-buffer-at-bottom
                   (window-height . 4)))
     (setq eldoc-documentation-strategy 'eldoc-documentation-compose-eagerly)
    :config
     (eldoc-add-command-completions "paredit-")
     (eldoc-add-command-completions "combobulate-"))
#+end_src

** Code folding

*** Origami mode

A code folding package, found [[https://github.com/gregsexton/origami.el][here]].
#+begin_src emacs-lisp
  (use-package origami
    :ensure t
    :bind (:map origami-mode-map
                ("C-<tab>" . origami-recursively-toggle-node)
                ("C-S-<tab>" . origami-toggle-all-nodes))
    :hook (origami-mode . my-add-origami-emacs-lisp-parser))
#+end_src

*** Junkyard

C-<tab> and C-S-<tab> are stolen by other apps in some environments,
so I use the key binding C-+ and some prefix arguments instead.
#+begin_src emacs-lisp :tangle no
  (use-package origami
    :ensure t
    :bind (:map origami-mode-map
                ("C-+" . my-origami-toggle-nodes))
    :hook (origami-mode . my-add-origami-emacs-lisp-parser))
#+end_src

#+begin_src emacs-lisp
  (defun my-origami-toggle-nodes (arg)
    "Toggle the code fold around point."
    (interactive "P")
    (cond
     ((null arg)
      (call-interactively #'origami-recursively-toggle-node))
     ((equal arg '(4))
      (call-interactively #'origami-toggle-all-nodes))
     ((equal arg '(16))
      (call-interactively #'origami-show-only-node))
     (t
      (call-interactively #'origami-reset))))
#+end_src

*** Hide-show package (disabled)

Code from [[https://karthinks.com/software/simple-folding-with-hideshow/][karthinks]] blog.
#+begin_src emacs-lisp :tangle no
  (use-package hideshow
    :ensure t
    :config
    (defun hs-cycle (&optional level)
      (interactive "p")
      (let (message-log-max
            (inhibit-message t))
        (if (= level 1)
            (pcase last-command
              ('hs-cycle
               (hs-hide-level 1)
               (setq this-command 'hs-cycle-children))
              ('hs-cycle-children
               ;; TODO: Fix this case. `hs-show-block' needs to be
               ;; called twice to open all folds of the parent
               ;; block.
               (save-excursion (hs-show-block))
               (hs-show-block)
               (setq this-command 'hs-cycle-subtree))
              ('hs-cycle-subtree
               (hs-hide-block))
              (_
               (if (not (hs-already-hidden-p))
                   (hs-hide-block)
                 (hs-hide-level 1)
                 (setq this-command 'hs-cycle-children))))
          (hs-hide-level level)
          (setq this-command 'hs-hide-level))))

    (defun hs-global-cycle ()
      (interactive)
      (pcase last-command
        ('hs-global-cycle
         (save-excursion (hs-show-all))
         (setq this-command 'hs-global-show))
        (_ (hs-hide-all))))

    :bind (:map prog-mode-map
                (("C-<tab>" . hs-cycle)
                 ("S-C-<tab>" . hs-global-cycle)))

    :hook (prog-mode . hs-minor-mode))
#+end_src

** Eglot package

Note: Eglot's manual is [[https://joaotavora.github.io/eglot/][here]].

Use [[https://github.com/joaotavora/eglot][Eglot]] with Pyright, a language server for Python.
#+begin_src emacs-lisp :tangle no
  (use-package eglot
    :ensure t
    :after conda
    :defer t
    :preface
    (defun mp-eglot-eldoc ()
      (setq eldoc-documentation-strategy
            'eldoc-documentation-compose-eagerly))
    :custom
    (eglot-connect-timeout 120)   ; my work computer is slow, slow, slow
    (eglot-stay-out-of 'company)
    (eglot-report-progress t)
    :hook ((eglot-managed-mode . mp-eglot-eldoc)
           (python-mode . eglot-ensure)))
#+end_src

Instructions [[https://github.com/intramurz/flycheck-eglot][here]].
#+begin_src emacs-lisp :tangle no
  (use-package flycheck-eglot
    :ensure t
    :after (flycheck eglot)
    :config (global-flycheck-eglot-mode 1))
#+end_src

** LSP mode (disabled)

Note: Another [[https://gitlab.com/gSwag/emacs-configuration/-/blob/master/.emacs-config.org][configuration]] for LSP might work better than the one
below (maybe?). Hope springs eternal.

#+begin_src emacs-lisp :tangle no
  (defun my-workspace-folders (added removed)
    (message "--- Running my-workspace-folders")
    (message "--- argument 'added' is %s" added)
    (message "--- argument 'removed' is %s" removed))
#+end_src

Note: The configuration below is from [[https://ianyepan.github.io/posts/emacs-ide/][Building an Intelligent Emacs]]
and the [[https://github.com/minad/corfu/wiki#basic-example-configuration-with-orderless][Corfu wiki]]. Documentation is at the =lsp-mode= [[https://emacs-lsp.github.io/lsp-mode/][site]]. Main
features are found [[https://emacs-lsp.github.io/lsp-mode/page/main-features/][here]]. The =advice= below comes from the LSP [[https://emacs-lsp.github.io/lsp-mode/page/faq/][FAQ]].
#+begin_src emacs-lisp :tangle no
  (use-package lsp-mode
    :ensure t
    :commands lsp
    :init
    (defun my-lsp-mode-setup-completion ()
      (setf (alist-get 'styles (alist-get 'lsp-capf completion-category-defaults))
            '(orderless))) ;; Configure orderless
    ;; (advice-add 'lsp :before
    ;;             (lambda (&rest _args)
    ;;               (eval '(setf (lsp-session-server-id->folders (lsp-session)) (ht))))
    :config
    ;; Stop emacs from asking about this when in .dir-locals.el
    (put 'lsp-file-watch-ignored-directories
         'safe-local-variable
         #'my-list-of-strings-p)

    (setq lsp-completion-provider :none)
    (setq lsp-auto-guess-root t)
    (setq lsp-log-io nil)
    (setq lsp-restart 'auto-restart)
    (setq lsp-enable-symbol-highlighting nil)
    (setq lsp-enable-on-type-formatting nil)
    (setq lsp-signature-auto-activate nil)
    (setq lsp-signature-render-documentation nil)
    (setq lsp-eldoc-hook nil)
    (setq lsp-modeline-code-actions-enable nil)
    (setq lsp-modeline-diagnostics-enable nil)
    (setq lsp-headerline-breadcrumb-enable nil)
    (setq lsp-semantic-tokens-enable nil)
    (setq lsp-enable-folding nil)
    (setq lsp-enable-imenu nil)
    (setq lsp-enable-snippet nil)
    (setq read-process-output-max (* 1024 1024)) ;; 1MB
    (setq lsp-idle-delay 0.5)
    (setq lsp-log-io t)                   ;; DEBUG
    :hook
    (((c-mode          ; clangd
       c++-mode        ; clangd
       c-or-c++-mode   ; clangd
       java-mode       ; eclipse-jdtls
       js-mode         ; ts-ls (tsserver wrapper)
       js-jsx-mode     ; ts-ls (tsserver wrapper)
       typescript-mode ; ts-ls (tsserver wrapper)
       python-mode     ; pyright
       web-mode        ; ts-ls/HTML/CSS
       haskell-mode    ; haskell-language-server
       ) . lsp-deferred)
     (lsp-mode . lsp-enable-which-key-integration)
     (lsp-completion-mode . my-lsp-mode-setup-completion)
     (lsp-after-open . lsp-origami-try-enable)
     (lsp-workspace-folders-changed . my-workspace-folders)))
#+end_src

Consult interface for symbols and LSP diagnostics, found [[https://github.com/gagbo/consult-lsp][here]].
#+begin_src emacs-lisp :tangle no
  (use-package consult-lsp
    :ensure t)
#+end_src

Send LSP data to =origami.el= for code folding. Minimal documentation [[https://github.com/emacs-lsp/lsp-origami][here]].
#+begin_src emacs-lisp :tangle no
  (use-package lsp-origami
    :ensure t
    :after lsp-mode
    :config
    (setq lsp-enable-folding t)
    :hook (prog-mode . origami-mode))
#+end_src

#+begin_src emacs-lisp :tangle no
  (use-package lsp-ui
    :ensure t
    :after lsp-mode
    :commands lsp-ui-mode
    :config
    (setq lsp-ui-doc-enable nil)
    (setq lsp-ui-doc-header t)
    (setq lsp-ui-doc-include-signature t)
    (setq lsp-ui-doc-border (face-foreground 'default))
    (setq lsp-ui-sideline-show-code-actions t)
    (setq lsp-ui-sideline-delay 0.05)
    :bind (:map lsp-ui-mode-map
                ("C-c i" . lsp-ui-menu))
    :hook
    (lsp-mode . lsp-ui-menu))
#+end_src

** DAP mode (disabled)

Documentation for DAP is [[https://emacs-lsp.github.io/dap-mode/][here]]. Python configuration for DAP is [[https://emacs-lsp.github.io/dap-mode/page/configuration/#python][here]].
Overall configuration is [[https://emacs-lsp.github.io/dap-mode/page/configuration/][here]]. An interesting configuration with a
unique hydra, etc, is [[https://sqrtminusone.xyz/configs/emacs/#dap][here]].

A starting point for a configuration from [[https://blog.sumtypeofway.com/posts/emacs-config.html][here]].
#+begin_src emacs-lisp :tangle no
  (use-package dap-mode
    :ensure t
    :bind
    (:map dap-mode-map
     ("C-c b b" . dap-breakpoint-toggle)
     ("C-c b r" . dap-debug-restart)
     ("C-c b l" . dap-debug-last)
     ("C-c b d" . dap-debug))
    :custom
    (dap-print-io t)
    (lsp-enable-dap-auto-configure t)
    :init
    (defun pt/turn-on-debugger ()
      (interactive)
      (dap-mode)
      (dap-auto-configure-mode)
      (dap-ui-mode)
      (dap-ui-controls-mode)))
    ;; :hook
    ;; (dap-stopped . (lambda (arg) (call-interactively #'dap-hydra))))
#+end_src

* Emacs lisp programming

** Code folding

#+begin_src emacs-lisp
  (add-hook 'emacs-lisp-mode-hook #'origami-mode)
  (add-hook 'origami-mode-hook #'my-add-origami-emacs-lisp-parser)
#+end_src

Include emacs Common Lisp extensions.
#+begin_src emacs-lisp
  (defun my-origami-elisp-parser (create)
    (origami-lisp-parser
     create
     "(\\(cl-def\\|def\\)\\w*\\s-*\\(\\s_\\|\\w\\|[:?!]\\)*\\([ \\t]*(.*?)\\)?"))

  (defun my-add-origami-emacs-lisp-parser ()
    "Replace the origami elisp parser to handle `cl-defmethod', etc."
    (alist-pop origami-parser-alist 'emacs-lisp-mode)
    (push '(emacs-lisp-mode . my-origami-elisp-parser) origami-parser-alist)
    (alist-pop origami-parser-alist 'lisp-interaction-mode)
    (push '(lisp-interaction-mode . my-origami-elisp-parser) origami-parser-alist))
#+end_src

* Python programming

#+begin_src emacs-lisp
(message "starting python modes")
#+end_src

** Notes

Here is a [[https://github.com/palantir/python-language-server#develop-against-vs-code][claim]] that the Python language server can be run "against" VS Code.
Debugger configurations for various languages are [[https://emacs-lsp.github.io/dap-mode/page/configuration/][here]].

I should probably read through the Python page of [[https://wikemacs.org/wiki/Python][WikEmacs]].

A "minimalistic" Python IDE for Emacs, [[https://github.com/abo-abo/lpy][lpy-mode]]. See also [[https://github.com/abo-abo/lispy][lispy]] by the
same author.

Getting Emacs 29 for MacOS: [[https://www.adventuresinwhy.com/post/compiling-emacs-with-tree-sitter/][Compiling Emacs 29 with Tree-sitter]].
An Eglot configuration: [[https://www.adventuresinwhy.com/post/eglot/][Eglot+Tree-sitter in Emacs 29]].
Other useful articles by the same author [[https://www.adventuresinwhy.com/tag/emacs/][here]].

=python-lsp-server= [[https://github.com/python-lsp/python-lsp-server][here]]. Emacs lsp client for python ruff language
server [[https://github.com/emacs-lsp/lsp-mode/issues/3876][here]]. Ruff docs, such as they are, [[https://beta.ruff.rs/docs/][here]].

** Python mode

Set up Python interpreters, code folding, etc.
#+begin_src emacs-lisp
  (use-package python
    ;; :config
    ;; (require 'dap-python)
    :custom
    (python-indent-guess-indent-offset-verbose nil)
    ;; (python-indent-trigger-commands #'indent-for-tab-command)
    ;; (dap-python-executable "python3")
    ;; (dap-python-debugger 'debugpy)
    :hook
    ((python-mode . imenu-add-menubar-index)
     (python-mode . eldoc-mode)
     (python-mode . origami-mode)
     (python-mode . my-origami-local-fold-replacement)))
#+end_src

#+begin_src emacs-lisp
  (defun my-origami-local-fold-replacement ()
    (set (make-local-variable 'origami-fold-replacement)
         "...\n"))
#+end_src

** Python REPL

Set up the IPython interpreter. Hitting key F5 when the current buffer
is in =python-mode= pops up an IPython REPL. Hitting key F5 when the
current buffer is in =inferior-python-mode=, that is, when running the
REPL, closes the window without killing the REPL. Killing the REPL by
typing =exit()=, hitting key C-d, or some other means, closes the REPL
window and kills the REPL buffer.

#+begin_src emacs-lisp
  (use-package python
    :after popper
    :init
    (add-to-list 'popper-reference-buffers "\\*IPython\\*")
    (add-to-list 'popper-reference-buffers 'inferior-python-mode)
    (popper--set-reference-vars)
    :custom
    ;; (python-shell-interpreter "python3")
    ;; (python-shell-completion-native-enable nil)
    (python-shell-buffer-name "IPython")
    (python-shell-interpreter "ipython")
    (python-shell-interpreter-args
     "-i --simple-prompt --pprint --InteractiveShell.warn_venv=False")
    :bind
    ((:map python-mode-map
           ("<f5>" . my-python-start-or-switch-repl))
     (:map inferior-python-mode-map
           ("<f5>" . my-close-ipython-window)))
    :hook
    (inferior-python-mode . my-add-kill-buffer-sentinel))
#+end_src

Open a dedicated Python REPL window. From [[https://emacs.stackexchange.com/questions/36520/dedicated-python-shell][StackExchange]].
#+begin_src emacs-lisp
  (defun my-python-start-or-switch-repl ()
    "Start and/or switch to the Python REPL."
    (interactive)
    (if (python-shell-get-process)
        (python-shell-switch-to-shell)
      (progn
        (message "Starting %s REPL" python-shell-interpreter)
        (run-python (python-shell-calculate-command) t t)
        (python-shell-switch-to-shell))))
#+end_src

Close the IPython window without killing its buffer.
#+begin_src emacs-lisp
  (defun my-close-ipython-window ()
    (interactive)
    (let ((buffer (current-buffer)))
      (unless (eq
               (alist-get'major-mode (buffer-local-variables buffer))
               'inferior-python-mode)
        (user-error "Buffer '%s' is not running a Python interpreter." buffer))
      (let ((window (get-buffer-window buffer)))
        ;; Borrowed from popper.el
        (when (window-valid-p window)
          (cond
           ((window-parent window)
            (if (window-parameter window 'window-side)
                (delete-window window)
              (quit-window nil window)))
           ((frame-parent) (delete-frame))
           (t (quit-window nil window)))))))
#+end_src

Inspect values in the IPython buffer. Github repo [[https://github.com/it-is-wednesday/pyinspect.el][here]].
#+begin_src emacs-lisp
  (use-package pyinspect
    :ensure t
    :bind
    (:map inferior-python-mode-map
          ("C-c i" . pyinspect-inspect-at-point)))
#+end_src

** Environment variables

See [[https://emacs.stackexchange.com/questions/31282/unicodeencodeerror-executing-python-in-emacs-not-in-terminal][UnicodeEncodeError executing Python in Emacs]].
#+begin_src emacs-lisp
  (setenv "PYTHONIOENCODING" "utf-8")
#+end_src

The [[https://github.com/wbolster/emacs-direnv][direnv]] package maintains a consistent set of environment variables
depending on which project the current buffer is in. There appears to
be no Windows-compatible version.
#+begin_src emacs-lisp
  (use-package direnv
    :disabled
    :ensure t
    :config
    (add-to-list 'warning-suppress-types '(direnv)))
#+end_src

** Virtual environments

Note: Another possibly interesting approach is [[https://github.com/10sr/with-venv-el][with-venv.el]], which
sets up a macro =(with-venv BODY)= that ensures that =BODY= runs in the
correct virtual environment. The function =conda-with-env= in conda.el
claims to do this as well.

Note: Here's an emacs [[https://sqrtminusone.xyz/configs/emacs/#anaconda][config]] that advises conda.el functions to keep
track of

#+begin_src emacs-lisp
  (use-package pythonic
    :ensure t)
#+end_src

This uses a modified [[https://github.com/necaris/conda.el][conda.el]] package that works on Windows machines.
#+begin_src emacs-lisp
  (use-package conda
    :ensure nil
    :after pythonic
    :load-path "lisp"
    :custom
    (conda-anaconda-home my-anaconda-dir)
    (conda-env-home-directory my-anaconda-dir)
    (conda-message-on-environment-switch nil)
    :config
    (conda-env-initialize-interactive-shells)
    (conda-env-initialize-eshell)
    (conda-env-autoactivate-mode 0)
    (add-hook 'find-file-hook
              (lambda ()
                (when (bound-and-true-p conda-project-env-path)
                  (conda-env-activate-for-buffer)))))
#+end_src

#+begin_src emacs-lisp
  (defun my-conda-postactivate ()
    (message "--- in conda-postactivate hook")
    (message "--- current-buffer is %s" (current-buffer))
    (message "--- conda-env-current-name is '%s'" conda-env-current-name)
    (message "--- conda-env-current-path is '%s'" conda-env-current-path)
    (if (bound-and-true-p conda-project-env-path)
        (message "--- conda-project-env-path is '%s'" conda-project-env-path)
      (message "--- conda-project-env-path is not bound")))
  (defun my-conda-postdeactivate ()
    (message "--- in conda-postdeactivate hook")
    (message "--- current-buffer is %s" (current-buffer))
    (message "--- conda-env-current-name is '%s'" conda-env-current-name)
    (message "--- conda-env-current-path is '%s'" conda-env-current-path)
    (if (bound-and-true-p conda-project-env-path)
        (message "--- conda-project-env-path is '%s'" conda-project-env-path)
      (message "--- conda-project-env-path is not bound")))
#+end_src

Configuration from [[https://www.reddit.com/r/emacs/comments/n1gkkk/doom_emacs_pyright_lsp_conda/][Doom Emacs + Pyright + LSP + Conda]].
#+begin_src emacs-lisp :tangle no
  (use-package lsp-pyright
    :ensure t
    :after (python lsp-mode conda)
    :hook ((python-mode . (lambda () (require 'lsp-pyright)))
           (python-mode . lsp))
    ;; :custom
    ;; (lsp-pyright-venv-path (getenv "VIRTUAL_ENV"))
    :config
    ;; these hooks can't go in the :hook section since
    ;; lsp-restart-workspace is not available if lsp isn't active
    (add-hook 'conda-postactivate-hook (lambda () (lsp-restart-workspace)))
    (add-hook 'conda-postactivate-hook #'my-conda-postactivate)
    (add-hook 'conda-postdeactivate-hook (lambda () (lsp-restart-workspace)))
    (add-hook 'conda-postdeactivate-hook #'my-conda-postactivate))
#+end_src

Tell =lsp-pyright= about conda environments, from [[https://github.com/emacs-lsp/lsp-pyright/issues/52][here]].
#+begin_src emacs-lisp :tangle no
  (with-eval-after-load 'conda
    (with-eval-after-load 'lsp-pyright
      (progn
        (defun autoenv-for-lsp-pyright ()
          (let* ((env-name (conda--infer-env-from-buffer))
                 (env-path (concat conda-env-home-directory "/envs/" env-name)))
            (setq-local lsp-pyright-venv-path env-path)
            (setq-local mode-line-process (concat "(" env-name ")"))
            (message "setting lsp-pyright-venv-path to %s" env-path))
          )
        (push 'autoenv-for-lsp-pyright python-mode-hook)
        )))
#+end_src

** Testing

My own modified version of the pytest package. The original doesn't work well
on Windows.
#+begin_src emacs-lisp
  (use-package pytest
    :ensure nil
    :demand
    :load-path "lisp"
    :custom
    (pytest-global-name "pytest")
    (pytest-cmd-flags "-x -s --disable-warnings")
    (pytest-enable-minor-mode t)
    :bind (:map python-mode-map
                ("C-c a" . pytest-all)
                ("C-c m" . pytest-module)
                ("C-c d" . pytest-directory)
                ("C-c o" . pytest-one))
    :init
    (defun my-pytest-all (arg)
      (interactive "P")
      (if arg
          (call-interactively #'pytest-pdb-all)
        (call-interactively #'pytest-all)))
    (defun my-pytest-directory (arg)
      (interactive "P")
      (if arg
          (call-interactively #'pytest-pdb-directory)
        (call-interactively #'pytest-directory)))
    (defun my-pytest-module (arg)
      (interactive "P")
      (if arg
          (call-interactively #'pytest-pdb-module)
        (call-interactively #'pytest-module)))
    (defun my-pytest-one (arg)
      (interactive "P")
      (if arg
          (call-interactively #'pytest-pdb-one)
        (call-interactively #'pytest-one))))
#+end_src

*** Find monitor and frame attributes

#+begin_src emacs-lisp
  (defun names= (alist1 alist2)
    "Test whether the `name' attribute of ALIST1 is the same as the
  `name' attribute of ALIST2."
    (string= (alist-get 'name alist1) (alist-get 'name alist2)))
#+end_src

Find the attributes of a second monitor, if it exists.
#+begin_src emacs-lisp
  (defun my-other-monitor-attributes ()
    "Return the attributes of a monitor other than the one displaying
  the selected frame. If there is only one monitor, return that
  monitor's attributes."
    (let ((attrs
           (car (seq-filter
                 (lambda (attrs) (not (names= (frame-monitor-attributes) attrs)))
                 (display-monitor-attributes-list)))))
      (or attrs (frame-monitor-attributes))))

  (defun my-other-monitor-attribute (key)
    "Return monitor atttribute indexed by KEY on the other monitor."
    (alist-get key (my-other-monitor-attributes)))
#+end_src

Frame predicate for ~display-buffer-use-some-frame~. Returns `t' iff the
frame contains one or more buffers with name matching a regexp.
#+begin_src emacs-lisp
  (defun my-pytest-frame-p (frame &optional name-rx)
    "Test whether FRAME has a buffer with name matching NAME-RX,
  whether or not that buffer is visible or buried. If NAME-RX is
  not specified or nil, use '\\*pytest'."
    (let ((regexp (or name-rx "\\*pytest"))
          (visible-names (mapcar #'buffer-name (frame-parameter frame 'buffer-list)))
          (buried-names (mapcar #'buffer-name (frame-parameter frame 'buried-buffer-list))))
      (cl-some
       (apply-partially #'string-match-p regexp)
       (append visible-names buried-names))))
#+end_src

Filter all frames in a particular monitor.
#+begin_src emacs-lisp
  (defun my-pytest-filter-frames (monitor-attrs &optional name-rx)
    "Filter the `frames' attribute of MONITOR-ATTRS using the
  predicate `my-pytest-frame-p'. Returns a copy of MONITOR-ATTRS
  with a new `frames' attribute."
    (let ((filter-fn))
      (if name-rx
          (setf filter-fn (lambda (frame) (my-pytest-frame-p frame name-rx)))
        (setf filter-fn #'my-pytest-frame-p))
      (let ((filtered-frames
             (seq-filter
              filter-fn
              (alist-get 'frames monitor-attrs))))
        (alist-modify monitor-attrs 'frames filtered-frames))))
#+end_src

Return the first frame found on a monitor that contains a buffer with
matching name.
#+begin_src emacs-lisp
  (defun my-pytest-get-frame (&optional monitor-attrs name-rx)
    "Return the first frame in MONITOR-ATTRS found that contains a
  buffer matching NAME-RX. If MONITOR-ATTRS is nil, use the monitor
  attributes of the monitor other than the one currently in use."
    (let* ((attrs (or monitor-attrs (my-other-monitor-attributes)))
           (matches (my-pytest-filter-frames attrs name-rx)))
      (car (alist-get 'frames matches))))
#+end_src

*** Modify =popper='s display function

#+begin_src emacs-lisp
    (defun my-pytest-popper-display-frame (buffer &optional alist)
      ""
      (let* ((pytest-frame (or
                            (my-pytest-get-frame (my-other-monitor-attributes))
                            (car (my-other-monitor-attribute 'frames))
                            ;; (my-pytest-get-frame (frame-monitor-attributes))
                            (make-frame-on-monitor
                             (my-other-monitor-attribute 'name)
                             nil
                             '((user-position . t)
                               (top . 157)
                               (left . 1089)
                               (width . 111)
                               (height . 69)))))
             (my-alist '((inhibit-same-window . nil)
                         (inhibit-switch-frame . nil)
                         (reusable-frames . pytest-frame))))
        (display-buffer-use-some-frame buffer my-alist)
        (select-window (get-buffer-window buffer pytest-frame))))
#+end_src

Make =popper= display *pytest* buffers using my own display function.
#+begin_src emacs-lisp
  (defun my-popper-select-popup-at-bottom (buffer &optional alist)
    "Display and switch to popup-buffer BUFFER at the bottom of the screen,
  unless BUFFER is named '*pytest*'."
    (if (string-match-p "\\*pytest\\*" (buffer-name buffer))
        (my-pytest-popper-display-frame buffer alist)
      (popper-select-popup-at-bottom buffer alist)))
#+end_src

Set the =popper= display function.
#+begin_src emacs-lisp
  (popper-mode -1)
  (setq popper-display-function #'my-popper-select-popup-at-bottom)
  (popper-mode +1)
#+end_src

*** Junkyard

From [[https://e17i.github.io/articles-emacs-display-1/][Configuring the emacs display system]].
#+begin_src emacs-lisp :tangle no
  (defun push-buffer-to-frame ()
    "push current window buffer to own frame and revert current window to previous frame."
    (interactive)
    (let ((current (current-buffer))
          (selected (selected-window)))
      (if (display-buffer-other-frame current)
          (quit-restore-window selected))))
#+end_src

From [[https://emacs.stackexchange.com/questions/60558/controlling-behaviour-of-compilation-window-creation][Controlling behavior of compilation window creation]].
#+begin_src emacs-lisp :tangle no
(setq display-buffer-alist
      `((,(rx bos
              (| (literal "*compilation")
                 (literal "*shell")
                 (literal "*eshell")
                 (literal "*Compile-Log")))
         display-buffer-in-direction
         (window .                      ;reference window
                 t) ;either `t' (selected window), `main', `root', or an arbitrary valid window
         (direction .
                    below)              ;`below' (window) or `bottom' (of frame)
         (window-height . 0.33)          ;absolute (10) or relative (0.3)
         )))
#+end_src

Predicates for matching frame and monitor names.
#+begin_src emacs-lisp :tangle no
  (defun my-pytest-frame-p (name-regexp &optional frame)
    "Test whether FRAME has name matching NAME-REGEXP."
    (let ((params (frame-parameters frame)))
      (string-match-p name-regexp (alist-get 'name params))))

  (defun my-pytest-monitor-p (name-regexp monitor-attrs)
    "Test whether MONITOR-ATTRS has name matching NAME-REGEXP."
    (string-match-p name-regexp (alist-get 'name monitor-attrs)))
#+end_src

Finds matching monitor attributes alists.
#+begin_src emacs-lisp :tangle no
  (defun my-find-monitor-attributes-by-name (name-regexp)
    "Return the first set of monitor attributes found with name
  matching NAME-REGEXP. If NAME-REGEXP is blank or nil, return nil."
    (if (or (not name-regexp) (string-blank-p name-regexp))
        nil
      (car (seq-filter
            (apply-partially #'my-pytest-monitor-p name-regexp)
            (display-monitor-attributes-list)))))
#+end_src

Removes non-matching frames from a monitor attributes alist.
#+begin_src emacs-lisp :tangle no
  (defun my-filter-frames-by-name (monitor-attrs frame-name-regexp)
    "Returns a modified monitor attributes alist with frames having
  names matching FRAME-NAME-REGEXP. All other frames are removed
  from `frames' list. MONITOR-ATTRS is the original monitor
  attributes alist."
    (let ((filtered-frames
           (seq-filter
            (apply-partially #'my-pytest-frame-p frame-name-regexp)
            (alist-get 'frames monitor-attrs))))
      (alist-modify monitor-attrs 'frames filtered-frames)))
#+end_src

Removes non-matching frames from all monitor attributes alists.
#+begin_src emacs-lisp :tangle no
  (defun my-filter-all-frames-by-name (frame-name-regexp)
    "Return a list of monitor attribute alists with all frames having
  names not matching FRAME-NAME-REGEXP removed."
    (mapcar
     (apply-partially #'my-filter-frames-by-name frame-name-regexp)
     (display-monitor-attributes-list)))
#+end_src

A Magit-like emacs interface to Pytest ([[https://github.com/wbolster/emacs-python-pytest][python-pytest]]).
#+begin_src emacs-lisp :tangle no
  (use-package python-pytest
    :disabled
    :ensure t)
#+end_src

** Jupyter

Note: The package =emacs-jupyter= is [[https://github.com/nnicandro/emacs-jupyter][here]].
#+begin_src emacs-lisp :tangle no
  (use-package jupyter
    :after (ob-jupyter ob-python)
    :config
    (setq jupyter-api-authentication-method 'password)
    (setq jupyter-eval-use-overlays nil)
    (setq org-babel-default-header-args:jupyter-python '((:session . "/jpy:localhost#8888:py")
                                                         (:kernel . "conda-env-edge-py")
                                                         (:async . "yes")
                                                         (:pandoc t)))
    (add-to-list 'savehist-additional-variables 'jupyter-server-kernel-names)
    (setq ob-async-no-async-languages-alist '("jupyter-python"))
    (add-to-list 'org-structure-template-alist '("j" . "src jupyter-python")))
#+end_src

* Julia programming

[[https://discourse.julialang.org/t/jupyter-integration-with-emacs/21496/5][Instructions]] from the Julia mailing list for installing Jupyter.
#+begin_src emacs-lisp :tangle no
  (use-package jupyter
    :ensure t)
#+end_src

* Web programming

** HTML

Tidy up the HTML in the region. Adapted from this Mastering Emacs
[[https://www.masteringemacs.org/article/executing-shell-commands-emacs][article]].
#+begin_src emacs-lisp
  (defun tidy-html ()
    "Tidies the HTML content in the buffer using `tidy'"
    (interactive)
    (unless (executable-find "tidy")
      (user-error "Can't find executable for 'tidy'."))
    (shell-command-on-region
     ;; beginning and end of buffer
     (point-min)
     (point-max)
     ;; command and parameters
     "tidy -i -w 120 -q"
     ;; output buffer
     (current-buffer)
     ;; replace?
     t
     ;; name of the error buffer
     "*Tidy Error Buffer*"
     ;; show error buffer?
     t))
#+end_src

** JavaScript

A popular interactive JavaScript IDE, with documentation [[https://indium.readthedocs.io/en/latest/index.html][here]].
#+begin_src emacs-lisp :tangle no
  (use-package indium
    :ensure t)
#+end_src

* Notes

Compiling Emacs 29 on Windows with Msys2, [[https://readingworldmagazine.com/emacs/2022-02-24-compiling-emacs-29-from-source-on-windows/][here]].

The psychology of bad habits, [[https://iai.tv/video/the-psychology-of-bad-habits-susan-michie][here]].

Look for the section "space as control key" in this guy's [[https://github.com/svend/dot-emacsd][config]].
Might be a way to circumvent browser's nasty habit of stealing key
strokes. Also, see "custom hook for all major modes":
#+begin_src emacs-lisp :tangle no
(defun my/run-local-vars-mode-hook ()
  "Run a hook for the `major-mode` after the local variables have been processed."
  (run-hooks (intern (concat (symbol-name major-mode) "-local-vars-hook"))))
(add-hook 'hack-local-variables-hook 'my/run-local-vars-mode-hook)
#+end_src

Make your blog look like the [[https://github.com/moble/www_black-holes_org][black-holes.org]] website.

Installing Doom Emacs through =git-bash=, [[https://earvingad.github.io/posts/doom_emacs_windows/][here]].

Really irritating name, [[https://github.com/p3r7/awesome-elisp][Awesome Elisp]], but a useful cookbook guide.

Reproducible research and other things through [[https://github.com/jkitchin/scimax][Scimax]]. Python code
from the same author to work with org-mode, etc, called [[https://github.com/jkitchin/pycse][pycse]].
