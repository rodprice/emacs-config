#+TITLE: Emacs Configuration
#+STARTUP: overview indent

  #+begin_src emacs-lisp :comments no :tangle yes
    ;; -*- lexical-binding: t -*-
  #+end_src

* Defaults

** Text

   Character encodings default to utf-8.
   #+begin_src emacs-lisp
     (prefer-coding-system 'utf-8)
     (set-language-environment 'utf-8)
     (set-default-coding-systems 'utf-8)
     (set-terminal-coding-system 'utf-8)
     (set-selection-coding-system 'utf-8)
   #+end_src
   
   Always insert spaces, never tab characters.
   #+begin_src emacs-lisp
     (setq-default indent-tabs-mode nil)
   #+end_src

  Truncate long lines everywhere.
  #+begin_src emacs-lisp
    (global-visual-line-mode 0)
    (setq-default truncate-lines t)
  #+end_src
    
  Highlight current line.
  #+begin_src emacs-lisp
    (global-hl-line-mode t)
  #+end_src

** Clipboard
   
   Use the system clipboard.
   #+begin_src emacs-lisp
     (setq select-enable-clipboard t
           select-enable-primary t
           save-interprogram-paste-before-kill t
           mouse-yank-at-point t)
   #+end_src
   
** File locations
   
   Make emacs open files in a reasonable directory by default.
   #+begin_src emacs-lisp
     (setq default-directory (getenv "HOME"))
   #+end_src
   
   [[http://stackoverflow.com/questions/151945/how-do-i-control-how-emacs-makes-backup-files][Backup file configuration]].
   #+begin_src emacs-lisp
     (setq delete-old-versions t
           kept-new-versions 2
           kept-old-versions 2
           version-control t)
   #+end_src
   
   File locations for custom settings.
   #+begin_src emacs-lisp
     (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
     (unless (file-exists-p custom-file)
       (custom-save-all))                   ; Create new, empty custom file
     (load custom-file)
     (require 'saveplace)
     (setq save-place-file (concat user-emacs-directory "places")
           backup-directory-alist `(("." . ,(concat user-emacs-directory
                                                    "backups"))))
   #+end_src

* GUI elements

** Menu bar, tool bar, scroll bars

   Keep menu bar, drop toolbar and scroll bars.
   #+begin_src emacs-lisp
     (setq inhibit-startup-message t)
     ;;  (menu-bar-mode -1)
     (when (fboundp 'tool-bar-mode)
       (tool-bar-mode -1))
     (when (fboundp 'scroll-bar-mode)
       (scroll-bar-mode -1))
     (when (fboundp 'horizontal-scroll-bar-mode)
       (horizontal-scroll-bar-mode -1))
     (setq visible-bell t)
   #+end_src

   Show line numbers on the left.
   #+begin_src emacs-lisp
     (if (>= emacs-major-version 29)
         (global-display-line-numbers-mode 1)
       (global-linum-mode t))
   #+end_src

   #+begin_src emacs-lisp
     ;; (require 'paren)
     ;; (setq show-paren-style 'parenthesis)
     ;; (show-paren-mode 1)
   #+end_src

** Frame titles

   Display buffer name in frame titles. ([[https://github.com/malb/emacs.d/blob/master/malb.org#frame-title][source]])
   #+begin_src emacs-lisp

     (defun my-emacs-version ()
       "Returns a shortened Emacs name and version string."
       (let ((ls (split-string (emacs-version) " ")))
         (substring
          (format "%s" `(,(car ls) ,(cadr ls) ,(caddr ls)))
          1
          -1)))

     (defun my-conda-env-current-name ()
       "Returns the name of the current conda environment."
       (if (bound-and-true-p conda-env-current-name)
           (concat " - Conda: " conda-env-current-name)
         ""))

     (defun my-git-branch-name ()
       "Returns the name of the current git branch."
       (if vc-mode
           (concat " -" (substring-no-properties vc-mode))
         ""))

     (setq frame-title-format
           '(""
             (:eval (replace-regexp-in-string "^ +" "" (my-emacs-version)))
             (:eval (my-conda-env-current-name))
             (:eval (my-git-branch-name))))
   #+end_src
   
** Mode line
   
   #+begin_src emacs-lisp
     (require 'uniquify)
     (setq uniquify-buffer-name-style 'forward)
     ;; Display the column number in the mode line
     (setq column-number-mode t)
   #+end_src
  
* Fonts

  #+begin_src emacs-lisp
    (defun my-font-in-family-p (font-family)
      "True iff the current frame's font is in font-family."
      (let ((font-name (cdr (assoc 'font default-frame-alist))))
        (string-prefix-p (downcase font-family) (downcase font-name))))
  #+end_src

  The default font can also be set in the site-specific preload file.
  #+begin_src emacs-lisp
    (unless (boundp 'my-default-font)
      (defvar my-default-font "Fira Code-11"))
    (add-to-list 'default-frame-alist `(font . ,my-default-font))
    (set-face-font 'default my-default-font)
  #+end_src

  #+begin_src emacs-lisp
    (use-package ligature
      :if (or (my-font-in-family-p "Fira Code")
              (my-font-in-family-p "JuliaMono"))
      :ensure t
      :config
      ;; JuliaMono (https://juliamono.netlify.app/) supports the following small set of ligatures
      (if (my-font-in-family-p "JuliaMono")
          (let ((ligs '("->" "=>" "|>" "<|" "::" "<--" "-->" "<-->")))
            (ligature-set-ligatures 'prog-mode ligs)
            (ligature-set-ligatures 'org-mode ligs)))
      (if (my-font-in-family-p "Fira Code")
          (progn
            (require 'fira-code-mode)
            (ligature-set-ligatures 'prog-mode fira-code-mode--ligatures)
            (ligature-set-ligatures 'org-mode fira-code-mode--ligatures)))
            
      ;; Enables ligature checks globally in all buffers. You can also do it
      ;; per mode with `ligature-mode'.
      (global-ligature-mode t))
  #+end_src
  
* Themes

  #+begin_src emacs-lisp
    (use-package vscode-dark-plus-theme
      :ensure t
      :config
      (load-theme 'vscode-dark-plus t)
      (setq face-remapping-alist
            `((show-paren-match
               . (:weight bold
                  :foreground "#ecbc9c"))
              (show-paren-mismatch
               . (:strike-through t
                  :foreground "#cc6666"))
              (sp-show-pair-match-face
               . (:weight bold
                  :foreground "#ecbc9c"))
              (sp-show-pair-mismatch-face
               . (:strike-through t
                  :foreground "#cc6666"))
              (font-lock-function-name-face
               . (:foreground "#4ec9b0"
                  :weight normal))
              (font-lock-keyword-face
               . (:foreground "cornflower blue"
                  :weight normal))
              (font-lock-variable-name-face
               . (:foreground "#f0c674"))
              (lsp-face-highlight-read
               . (:underline t
                  :background nil
                  :foreground nil))
              (lsp-face-highlight-textual
               . (:underline t
                  :background nil
                  :foreground nil))
              (lsp-face-highlight-write
               . (:underline t
                  :background nil
                  :foreground nil))
              (lsp-ui-peek-highlight
               . (:inherit nil
                  :background nil
                  :foreground nil
                  :weight semi-bold
                  :box (:line-width -1)))
              (org-block
               . (:extend t
                  :background "gray12"
                  :foreground "#e8e8e8"))
              (org-block-begin-line
               . (:extend t
                  :background "gray12"
                  :foreground "gray40"))
              (org-tree-slide-heading-level-1
               . (:height 1.8
                  :weight bold))
              (org-tree-slide-heading-level-2
               . (:height 1.5
                  :weight bold))
              (org-tree-slide-heading-level-3
               . (:height 1.5
                  :weight bold))
              (org-tree-slide-heading-level-4
               . (:height 1.5
                  :weight bold)))))
  #+end_src

* Geometry

  #+begin_src emacs-lisp
    (require 'saveplace)
    (setq-default save-place t)
  #+end_src

  Save emacs frames on exit, and restore them on startup
  #+begin_src emacs-lisp
    ;; These are the same values that a bare-naked emacs uses on initial startup
    (defvar my-initial-geometry '(nil 80 38 100 100)
      "The initial frame geometry to use when no geometry file is present.")

    (defvar my-geometry-file
      (expand-file-name ".geometry" user-emacs-directory)
      "The file where frame geometry settings are saved.")

    (defun my-load-frame-geometry ()
      "Load saved frame geometry settings."
      (if (file-readable-p my-geometry-file)
          (with-temp-buffer
            (insert-file-contents my-geometry-file)
            (read (buffer-string)))
        my-initial-geometry))

    (defun my-get-geometry ()
      "Get the current geometry of the active frame."
      (mapcar
       (apply-partially 'frame-parameter nil)
       (list 'fullscreen 'width 'height 'top 'left)))

    (defun my-save-frame-geometry ()
      "Save current frame geometry settings."
      (with-temp-file my-geometry-file
        (print (my-get-geometry) (current-buffer))))

    (defun my-set-geometry ()
      "Set the default frame geometry using the values loaded from my-geometry-file."
      (let ((geom (my-load-frame-geometry)))
        (modify-all-frames-parameters
         `((fullscreen . ,(nth 0 geom))
           (width . ,(nth 1 geom))
           (height . ,(nth 2 geom))
           (top . ,(nth 3 geom))
           (left . ,(nth 4 geom))))))
        ;; (setq default-frame-alist
        ;;       (append
        ;;        default-frame-alist

    ;; Returns (top left bottom right) measured in pixels
    (defun my-get-geometry-pixels ()
      "Get the current geometry, measured in pixels, of the active frame."
      (let ((width (frame-pixel-width))
            (height (frame-pixel-height))
            (top (eval (frame-parameter nil 'top)))
            (left (eval (frame-parameter nil 'left))))
        (list top left (+ top width) (+ left height))))

    (defun my-get-margins-pixels ()
      "Return the margins remaining on each side of the frame, measured in pixels."
      (let ((frame-size (my-get-geometry-pixels))
            (display-size (cdr (assq 'workarea (frame-monitor-attributes)))))
        (list
         (- (nth 0 frame-size) (nth 0 display-size))      ; left side of the frame
         (- (nth 1 frame-size) (nth 1 display-size))      ; top side of the frame
         (- (nth 2 display-size) (nth 2 frame-size))      ; right side of the frame
         (- (nth 3 display-size) (nth 3 frame-size)))))   ; bottom side of the frame

    (defun my-geometry-startup-after-init (&optional frame)
      "Called after loading the init file."
      (if (display-graphic-p)
          (with-selected-frame (or frame (selected-frame))
            (my-set-geometry)
            (add-hook 'kill-emacs-hook 'my-save-frame-geometry))))
            ;; (add-to-list 'default-frame-alist '(internal-border-width . 0))
            ;; (set-fringe-mode '(8 . 0)))
        ;; Menu bar always off in text mode
        ;; (menu-bar-mode -1))))

    (add-hook 'after-init-hook 'my-geometry-startup-after-init)
    (add-hook 'before-make-frame-hook 'my-set-geometry)
  #+end_src
  
* Editing

** Prerequisites

  #+begin_src emacs-lisp
    (require 'my-functions)
  #+end_src

** Search

  #+begin_src emacs-lisp
    (global-set-key (kbd "C-s") 'isearch-forward-regexp)
    (global-set-key (kbd "C-r") 'isearch-backward-regexp)
    (global-set-key (kbd "C-M-s") 'isearch-forward)
    (global-set-key (kbd "C-M-r") 'isearch-backward)
    (global-set-key (kbd "C-c r") 'rgrep)
  #+end_src
  
** Line wrapping

  #+begin_src emacs-lisp
        (global-set-key (kbd "C-c q") 'auto-fill-mode)
  #+end_src

** Join, open, or transpose lines

  #+begin_src emacs-lisp
    (global-set-key (kbd "C-;") 'my-insert-semicolon)
    (global-set-key (kbd "M-j") 'my-join-lines)
    (global-set-key (kbd "C-o") 'open-next-line)
    (global-set-key (kbd "M-o") 'open-previous-line)
    (global-set-key (kbd "C-t") 'transpose-next-line)
    (global-set-key (kbd "M-t") 'transpose-previous-line)
  #+end_src
  
** Camel case

  #+begin_src emacs-lisp
    (global-set-key (kbd "M-c") 'toggle-camelcase-underscores)
  #+end_src

** Cursor movement

  #+begin_src emacs-lisp
    (use-package mwim
      :ensure t
      :bind
      (("C-a" . mwim-beginning-of-line-or-code)
       ("C-e" . mwim-end-of-line-or-code))
      :pin melpa)
  #+end_src
  
  #+begin_src emacs-lisp
    (global-set-key (kbd "<home>") 'mwim-beginning-of-line-or-code)
    (global-set-key (kbd "<end>") 'mwim-end-of-line-or-code)
    (global-set-key (kbd "M-<") 'scroll-row-up)
    (global-set-key (kbd "M->") 'scroll-row-down)
    (global-set-key (kbd "C-<") 'xah-backward-block)
    (global-set-key (kbd "C->") 'xah-forward-block)
    (global-set-key (kbd "M-<up>") 'scroll-row-up)
    (global-set-key (kbd "M-<down>") 'scroll-row-down)
  #+end_src

** Spelling

#+begin_src emacs-lisp
  (let ((aspell-exe (if (eq system-type 'windows-nt)
                        (executable-find "aspell.exe")
                      (executable-find "aspell"))))
    (if aspell-exe
        (setq-default ispell-program-name aspell-exe)
      (error "Could not find an aspell executable on exec-path.")))
#+end_src

** Regions
  
  Kill or yank entire lines
  #+begin_src emacs-lisp
    (use-package whole-line-or-region
      :ensure t
      :bind (("C-w" . whole-line-or-region-kill-region)
             ("M-w" . whole-line-or-region-copy-region-as-kill)))
  #+end_src

  Expand or contract the region by sexp
  #+begin_src emacs-lisp
    (use-package expand-region
      :ensure t
      :config
      :bind (("C-=" . er/expand-region)
             ("M-=" . er/contract-region)))
  #+end_src

* Window management

** Window movement

  #+begin_src emacs-lisp
    ;; (global-set-key (kbd "C-x p") 'my-rearrange-windows)
  #+end_src
  
** Window and frame selection

  #+begin_src emacs-lisp
    (global-set-key (kbd "C-x C-o") 'other-frame)
  #+end_src

#+begin_src emacs-lisp
  (desktop-save-mode 1)
#+end_src

** Popper

#+begin_src emacs-lisp
  (use-package popper
    :ensure t ; or :straight t
    :bind (("C-`"   . popper-toggle-latest)
           ("M-`"   . popper-cycle)
           ("C-M-`" . popper-toggle-type))
    :init
    (setq popper-reference-buffers
          '("\\*Messages\\*"
            "Output\\*$"
            "\\*Async Shell Command\\*"
            "\\*grep\\*"
            "\\*Backtrace\\*"
            "\\*Completions\\*"
            "\\*Flycheck errors\\*"
            "^\\*Shortdoc"
            "\\*grep\\*"
            "\\*Apropos\\*"
            ("\\*Warnings\\*" . hide)
            help-mode
            compilation-mode))
    (popper-mode +1)
    (popper-echo-mode +1))                ; For echo area hints
#+end_src

* Completions

** Vertico package and friends

Persist history over Emacs restarts. Vertico sorts by history position.
#+begin_src emacs-lisp
  (use-package savehist
    :ensure t
    :init
    (savehist-mode))
#+end_src

Vertico is vertical interactive completion: [[https://github.com/minad/vertico][README]]
#+begin_src emacs-lisp
  (use-package vertico
    :ensure t
    :custom
    (vertico-cycle t)
    :init
    (vertico-mode +1))
#+end_src

Mouse integration into Vertico
#+begin_src emacs-lisp
  (use-package vertico-mouse
    :after vertico
    :ensure nil)
#+end_src

IDO-like directory navigation
#+begin_src emacs-lisp
  (use-package vertico-directory
    :after vertico
    :ensure nil
    :bind (:map vertico-map
                ("RET" . vertico-directory-enter)
                ("DEL" . vertico-directory-delete-char)
                ("M-DEL" . vertico-directory-delete-word))
    ;; Tidy shadowed file names
    :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))
#+end_src

Configure Vertico per command or completion category: [[https://github.com/minad/vertico#configure-vertico-per-command-or-completion-category][README]]
#+begin_src emacs-lisp
  (use-package vertico-multiform
    :after vertico
    :ensure nil
    :init
    (vertico-multiform-mode)
    (setq vertico-multiform-commands
          '((consult-imenu buffer indexed)
            (describe-variable unobtrusive)
            (describe-function unobtrusive)))
    (setq vertico-multiform-categories
          '((consult-grep buffer))))
#+end_src

The [[https://github.com/oantolin/orderless][Orderless]] package enables completion without regard to the order in which
candidates are entered. 
#+begin_src emacs-lisp
  (use-package orderless
    :ensure t
    :init
    (defun basic-remote-try-completion (string table pred point)
      (and (vertico--remote-p string)
           (completion-basic-try-completion string table pred point)))
    (defun basic-remote-all-completions (string table pred point)
      (and (vertico--remote-p string)
           (completion-basic-all-completions string table pred point)))
    (add-to-list
     'completion-styles-alist
     '(basic-remote basic-remote-try-completion basic-remote-all-completions nil))
    (setq completion-styles '(orderless basic)
          completion-category-overrides '((file (styles basic-remote partial-completion)))
          completion-category-defaults nil))

#+end_src

The [[https://github.com/minad/marginalia][Marginalia]] package adds extra information to minibuffer completions.
#+begin_src emacs-lisp
  (use-package marginalia
    :ensure t
    :config (marginalia-mode))
#+end_src

** Consult and friends

These buffers will be ignored by the consult-buffer command (C-x b)
#+begin_src emacs-lisp
  (defvar my-hidden-buffers '("\\`\\*Compile-Log\\*\\'"
                              "\\`\\*Async-native-compile-log\\*\\'"
                              "\\`\\*Flycheck errors\\*\\'"
                              "\\`\\*Flycheck error messages\\*\\'"
                              "\\`\\*EGLOT.*\\*\\'"
                              "\\`\\*Native-compile-Log\\*\\'"
                              "\\`\\*debug tramp/.*\\*\\'"))
#+end_src

Simplify the =consult-buffer= command: [[https://github.com/minad/consult/wiki#hide-all-sources-except-normal-buffers-in-consult-buffer-by-default][Consult wiki]]
Filter out unwanted buffers in list: [[https://www.reddit.com/r/emacs/comments/yy79pn/how_to_hideignore_orgroam_buffersfiles_when_using/][Reddit]]
#+begin_src emacs-lisp
  (use-package consult
    :ensure t
    :after vertico
    :config
    ;; Make consult-buffer show only buffers initially
    (dolist (src consult-buffer-sources)
      (unless (eq src 'consult--source-buffer)
        (set src (plist-put (symbol-value src) :hidden t))))
    ;; Filter out unwanted buffers shown by consult-buffer
    (dolist (buff my-hidden-buffers)
      (add-to-list 'consult-buffer-filter buff t))
    ;; Use `consult-completion-in-region' if Vertico is enabled.
    ;; Otherwise use the default `completion--in-region' function.
    ;; (setq completion-in-region-function
    ;;       (lambda (&rest args)
    ;;         (apply (if vertico-mode
    ;;                    #'consult-completion-in-region
    ;;                  #'completion--in-region)
    ;;                args)))
    :bind
    (("M-y" . consult-yank-from-kill-ring)
     ("C-x b" . consult-buffer)))

  (recentf-mode)
  (setq completion-ignore-case t)
  (setq read-file-name-completion-ignore-case t)
#+end_src

Show all the files accessible to git stash: [[https://github.com/rcj/consult-ls-git][README]]
#+begin_src emacs-lisp
  (use-package consult-ls-git
    :ensure t
    :bind
    (("C-c g f" . #'consult-ls-git)
     ("C-c g F" . #'consult-ls-git-other-window)))
#+end_src

** Corfu and friends

#+begin_src emacs-lisp
  (use-package corfu
    :ensure t
    ;; Optional customizations
    :custom
    (corfu-cycle t)                 ; Allows cycling through candidates
    (corfu-preselect 'prompt)
    ;; (corfu-auto t)                  ; Enable auto completion
    ;; (corfu-auto-prefix 2)
    ;; (corfu-auto-delay 0.0)
    ;; (corfu-echo-documentation 0.25) ; Enable documentation for completions
    ;; (corfu-preview-current 'insert) ; Do not preview current candidate
    ;; (corfu-preselect-first nil)
    ;; (corfu-on-exact-match nil)      ; Don't auto expand tempel snippets

    ;; Optionally use TAB for cycling, default is `corfu-complete'.
    :bind (:map corfu-map
                ("M-SPC"      . corfu-insert-separator)
                ("TAB"        . corfu-next)
                ([tab]        . corfu-next)
                ("S-TAB"      . corfu-previous)
                ([backtab]    . corfu-previous)
                ("C-<return>" . corfu-insert)
                ("RET"        . nil))

    :init
    (global-corfu-mode)
    ;;(corfu-history-mode)

    :config
    (setq tab-always-indent 'complete)
    :hook
    (eshell-mode . (lambda () (setq-local corfu-quit-at-boundary t
                                          corfu-quit-no-match t
                                          corfu-auto nil)
                     (corfu-mode))))
#+end_src

** Embark package

#+begin_src emacs-lisp
    (use-package embark
      :disabled
      :ensure t

      :bind
      (("C-." . embark-act)         ;; pick some comfortable binding
       ("C-;" . embark-dwim)        ;; good alternative: M-.
       ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

      :init

      ;; Optionally replace the key help with a completing-read interface
      (setq prefix-help-command #'embark-prefix-help-command)

      :config

      ;; Hide the mode line of the Embark live/completions buffers
      (add-to-list 'display-buffer-alist
                   '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                     nil
                     (window-parameters (mode-line-format . none)))))

    ;; Consult users will also want the embark-consult package.
    (use-package embark-consult
      :ensure t
      :after (embark consult)
      :demand t ; only necessary if you have the hook below
      ;; if you want to have consult previews as you move around an
      ;; auto-updating embark collect buffer
      :hook
      (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

** Notes

https://www.masteringemacs.org/article/understanding-minibuffer-completion
https://www.masteringemacs.org/article/introduction-to-ido-mode

#+begin_src emacs-lisp
  (global-set-key (kbd "M-/") 'hippie-expand)
#+end_src

Show all buffers currently displayed in windows in all frames
#+begin_src emacs-lisp
  ;; (mapcar (lambda (frame) (cons frame (list (window-list frame)))) (frame-list))
#+end_src

* Remote

From [[https://gist.github.com/agumonkey/dc6e55e7e47de9b34980e933a346e82bhttps://gist.github.com/agumonkey/dc6e55e7e47de9b34980e933a346e82b][init-tramp-plink.el]]
#+begin_src emacs-lisp
  (require 'tramp)
  (modify-coding-system-alist 'process "plink" 'utf-8-unix)
  (setq tramp-default-method "plink"
        tramp-completion-without-shell-p t
        tramp-verbose 10
        tramp-debug-buffer t)

  ;; (let ((path (getenv "PATH"))
  ;;       (plink (expand-file-name "PuTTY" (getenv "ProgramFiles(x86)"))))
  ;;   (setenv "PATH" (concat plink path-separator path)))

  ;; ;; (add-to-list 'exec-path "C:/Program Files (x86)/PuTTY/")
  ;; (add-to-list 'exec-path (expand-file-name "PuTTY" (getenv "ProgramFiles(x86)")))
#+end_src

Exclude Tramp buffers from preview: [[https://github.com/minad/consult/wiki#do-not-preview-exwm-windows-or-tramp-buffers][Consult wiki]]
#+begin_src emacs-lisp
  (defun consult-buffer-state-no-tramp ()
    "Buffer state function that doesn't preview Tramp buffers."
    (let ((orig-state (consult--buffer-state))
          (filter (lambda (action cand)
                    (if (and cand
                             (or (eq action 'return)
                                 (let ((buffer (get-buffer cand)))
                                   (and buffer
                                        (not (file-remote-p
                                              (buffer-local-value 'default-directory buffer)))))))
                        cand
                      nil))))
      (lambda (action cand)
        (funcall orig-state action (funcall filter action cand)))))

  ;; (setq consult--source-buffer
  ;;       (plist-put consult--source-buffer :state #'consult-buffer-state-no-tramp))
#+end_src

From [[https://www.emacswiki.org/emacs/Tramp_on_Windows][Tramp on Windows]]
#+begin_src emacs-lisp
  ;; (when (eq window-system 'w32)
  ;;   (setq tramp-default-method "plink")
  ;;   (when (and (not (string-match my-putty-directory (getenv "PATH")))
  ;; 	     (file-directory-p my-putty-directory))
  ;;     (setenv "PATH" (concat my-putty-directory ";" (getenv "PATH")))
  ;;     (add-to-list 'exec-path my-putty-directory)))
#+end_src

* Org mode

Appearance
#+begin_src emacs-lisp
  (use-package org-modern
    :ensure t
    :hook ((org-mode . org-modern-mode)
           (org-agenda-finalize . org-modern-agenda)))
#+end_src
  
#+begin_src emacs-lisp
  (eval-after-load 'org
    (lambda ()
      (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))))
#+end_src

LaTeX
#+begin_src emacs-lisp
  ;; (add-hook 'org-mode-hook #'turn-on-org-cdlatex)
#+end_src

Export using Tufte's CSS: code [[https://github.com/Zilong-Li/org-tufte][here]].
#+begin_src emacs-lisp
  (use-package org-tufte
    :ensure nil
    :config
      (require 'org-tufte)
      (setq org-tufte-htmlize-code t
            org-tufte-embed-images nil))
#+end_src

* Code folding

Code from [[https://karthinks.com/software/simple-folding-with-hideshow/][karthinks]] blog.
#+begin_src emacs-lisp
  (use-package hideshow
    :ensure t
    :config
    (defun hs-cycle (&optional level)
      (interactive "p")
      (let (message-log-max
            (inhibit-message t))
        (if (= level 1)
            (pcase last-command
              ('hs-cycle
               (hs-hide-level 1)
               (setq this-command 'hs-cycle-children))
              ('hs-cycle-children
               ;; TODO: Fix this case. `hs-show-block' needs to be
               ;; called twice to open all folds of the parent
               ;; block.
               (save-excursion (hs-show-block))
               (hs-show-block)
               (setq this-command 'hs-cycle-subtree))
              ('hs-cycle-subtree
               (hs-hide-block))
              (_
               (if (not (hs-already-hidden-p))
                   (hs-hide-block)
                 (hs-hide-level 1)
                 (setq this-command 'hs-cycle-children))))
          (hs-hide-level level)
          (setq this-command 'hs-hide-level))))

    (defun hs-global-cycle ()
      (interactive)
      (pcase last-command
        ('hs-global-cycle
         (save-excursion (hs-show-all))
         (setq this-command 'hs-global-show))
        (_ (hs-hide-all))))    

    :bind (:map prog-mode-map
                (("C-<tab>" . hs-cycle)
                 ("S-C-<tab>" . hs-global-cycle)))
    
    :hook (prog-mode . hs-minor-mode))
#+end_src

* Python modes

** Python mode

Remove "guess indent" python message
#+begin_src emacs-lisp
  (use-package python
    :config
    (setq python-indent-guess-indent-offset-verbose nil))
#+end_src

** Virtual environments

#+begin_src emacs-lisp
  (use-package pythonic
    :ensure t)

  (use-package conda
     :ensure nil
     :after pythonic
     :load-path "lisp"
     :init
       (setq conda-anaconda-home my-anaconda-dir)
       (setq conda-env-home-directory my-anaconda-dir)
     :config
       (conda-env-initialize-interactive-shells)
       (conda-env-initialize-eshell)
       (conda-env-autoactivate-mode 0)
       (add-hook 'find-file-hook
                 (lambda ()
                   (when (bound-and-true-p conda-project-env-path)
                     (conda-env-activate-for-buffer)))))
#+end_src

** Linting

Use [[https://github.com/joaotavora/eglot][Eglot]] with Pyright, a language server for Python.
#+begin_src emacs-lisp
  (use-package eglot
    :ensure t
    :after conda
    :defer t
    :hook (python-mode . eglot-ensure))
#+end_src

Documentation for flycheck [[https://www.flycheck.org][here]].
#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode)
    :bind (("M-n" . flycheck-next-error)
           ("M-p" . flycheck-previous-error)
           ("M-l" . flycheck-list-errors)))
#+end_src

Instructions [[https://github.com/intramurz/flycheck-eglot][here]].
#+begin_src emacs-lisp
(use-package flycheck-eglot
  :ensure t
  :after (flycheck eglot)
  :config (global-flycheck-eglot-mode 1))
#+end_src
  
