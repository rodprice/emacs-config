#+TITLE: My Emacs Config
#+STARTUP: overview indent

* Defaults
** Character encodings
   
   Character encodings default to utf-8.
   #+BEGIN_SRC emacs-lisp
     (prefer-coding-system 'utf-8)
     (set-language-environment 'utf-8)
     (set-default-coding-systems 'utf-8)
     (set-terminal-coding-system 'utf-8)
     (set-selection-coding-system 'utf-8)
   #+END_SRC
   
** Tabs
   
   Always insert spaces, never tab characters.
   #+BEGIN_SRC emacs-lisp
     (setq-default indent-tabs-mode nil)
   #+END_SRC

** Clipboard
   
   Use the system clipboard.
   #+BEGIN_SRC emacs-lisp
     (setq select-enable-clipboard t
           select-enable-primary t
           save-interprogram-paste-before-kill t
           mouse-yank-at-point t)
   #+END_SRC
   
** File locations
   
   Make emacs open files in a reasonable directory by default.
   #+BEGIN_SRC emacs-lisp
     (setq default-directory (getenv "HOME"))
   #+END_SRC
   
   [[http://stackoverflow.com/questions/151945/how-do-i-control-how-emacs-makes-backup-files][Backup file configuration]].
   #+BEGIN_SRC emacs-lisp
     (setq delete-old-versions t
           kept-new-versions 2
           kept-old-versions 2
           version-control t)
   #+END_SRC
   
   File locations for custom settings.
   #+BEGIN_SRC emacs-lisp
     (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
     (unless (file-exists-p custom-file)
       (custom-save-all))                   ; Create new, empty custom file
     (load custom-file)
     (require 'saveplace)
     (setq save-place-file (concat user-emacs-directory "places")
           backup-directory-alist `(("." . ,(concat user-emacs-directory
                                                    "backups"))))
   #+END_SRC

* Look and feel
** GUI elements

   Keep menu bar, drop toolbar and scroll bars.
   #+BEGIN_SRC emacs-lisp
     (setq inhibit-startup-message t)
     ;;  (menu-bar-mode -1)
     (when (fboundp 'tool-bar-mode)
       (tool-bar-mode -1))
     (when (fboundp 'scroll-bar-mode)
       (scroll-bar-mode -1))
     (when (fboundp 'horizontal-scroll-bar-mode)
       (horizontal-scroll-bar-mode -1))
     (setq visible-bell t)
   #+END_SRC

   Show line numbers on the left.
   #+BEGIN_SRC emacs-lisp
     (global-linum-mode t)
   #+END_SRC

   Display buffer name in frame titles. ([[https://github.com/malb/emacs.d/blob/master/malb.org#frame-title][source]])
   #+BEGIN_SRC emacs-lisp
     (setq frame-title-format
           '("" (:eval (replace-regexp-in-string "^ +" "" (buffer-name)))
             " - " invocation-name))
   #+END_SRC

** Mode line
   
   #+BEGIN_SRC emacs-lisp
     (require 'uniquify)
     (setq uniquify-buffer-name-style 'forward)
     ;; Display the column number in the mode line
     (setq column-number-mode t)
   #+END_SRC
   
** IDO mode

   #+BEGIN_SRC emacs-lisp
     (require 'ido)
     (ido-mode t)
     (setq ido-enable-flex-matching t
           ido-auto-merge-work-directories-length -1
           ;; Control the window in which Emacs visits a new file
           ido-default-file-method 'selected-window
           ;; Don't pop up window of completions
           ido-cannot-complete-command 'ido-next-match)
   #+END_SRC

* Help and Info files

  See [[See https://www.gnu.org/software/emacs/manual/html_node/efaq/Installing-Texinfo-documentation.html][Installing TeXinfo documents]].
  #+BEGIN_SRC emacs-lisp
    ;; When opening a help window, always select the new help window
    (setq help-window-select t)
    (require 'info)
    (info-initialize)                      ; populate Info-directory-list
    (require 'apropos)
    (setq apropos-do-all t)                ; apropos searches more extensively
  #+END_SRC
  
* Geometry

  #+BEGIN_SRC emacs-lisp
    (require 'saveplace)
    (setq-default save-place t)
  #+END_SRC

  Save emacs frames on exit, and restore them on startup
  #+BEGIN_SRC emacs-lisp
    ;; These are the same values that a bare-naked emacs uses on initial startup
    (defvar my-initial-geometry '(nil 80 38 100 100)
      "The initial frame geometry to use when no geometry file is present.")

    (defvar my-geometry-file
      (expand-file-name ".geometry" user-emacs-directory)
      "The file where frame geometry settings are saved.")

    (defun my-load-frame-geometry ()
      "Load saved frame geometry settings."
      (if (file-readable-p my-geometry-file)
          (with-temp-buffer
            (insert-file-contents my-geometry-file)
            (read (buffer-string)))
        my-initial-geometry))

    (defun my-get-geometry ()
      "Get the current geometry of the active frame."
      (mapcar
       (apply-partially 'frame-parameter nil)
       (list 'fullscreen 'width 'height 'top 'left)))

    (defun my-save-frame-geometry ()
      "Save current frame geometry settings."
      (with-temp-file my-geometry-file
        (print (my-get-geometry) (current-buffer))))

    (defun my-set-geometry ()
      "Set the default frame geometry using the values loaded from my-geometry-file."
      (let ((geom (my-load-frame-geometry)))
        (setq default-frame-alist
              (append
               default-frame-alist
               `((fullscreen . ,(nth 0 geom))
                 (width . ,(nth 1 geom))
                 (height . ,(nth 2 geom))
                 (top . ,(nth 3 geom))
                 (left . ,(nth 4 geom)))))))

    ;; Returns (top left bottom right) measured in pixels
    (defun my-get-geometry-pixels ()
      "Get the current geometry, measured in pixels, of the active frame."
      (let ((width (frame-pixel-width))
            (height (frame-pixel-height))
            (top (eval (frame-parameter nil 'top)))
            (left (eval (frame-parameter nil 'left))))
        (list top left (+ top width) (+ left height))))

    (defun my-get-margins-pixels ()
      "Return the margins remaining on each side of the frame, measured in pixels."
      (let ((frame-size (my-get-geometry-pixels))
            (display-size (cdr (assq 'workarea (frame-monitor-attributes)))))
        (list
         (- (nth 0 frame-size) (nth 0 display-size))      ; left side of the frame
         (- (nth 1 frame-size) (nth 1 display-size))      ; top side of the frame
         (- (nth 2 display-size) (nth 2 frame-size))      ; right side of the frame
         (- (nth 3 display-size) (nth 3 frame-size)))))   ; bottom side of the frame

    (defun my-geometry-startup-after-init ()
      "Called after loading the init file."
      (if (display-graphic-p)
          (progn
            (my-set-geometry)
            (add-hook 'kill-emacs-hook 'my-save-frame-geometry))))
            ;; (add-to-list 'default-frame-alist '(internal-border-width . 0))
            ;; (set-fringe-mode '(8 . 0)))
        ;; Menu bar always off in text mode
        ;; (menu-bar-mode -1))))

    (add-hook 'after-init-hook 'my-geometry-startup-after-init)
  #+END_SRC
  
* Theme

  The default font is set in the site-specific preload file.
  #+BEGIN_SRC emacs-lisp
    (unless (boundp 'my-default-font)
      (defvar my-default-font "Consolas-12"))
  #+END_SRC
    
  Specify the default font.
  #+BEGIN_SRC emacs-lisp
    (add-to-list 'default-frame-alist `(font . ,my-default-font))
    (set-face-font 'default my-default-font)
  #+END_SRC
  
  Truncate long lines everywhere.
  #+BEGIN_SRC emacs-lisp
    (global-visual-line-mode 0)
    (setq-default truncate-lines t)
  #+END_SRC
    
  Highlight current line.
  #+BEGIN_SRC emacs-lisp
    (global-hl-line-mode t)
  #+END_SRC

  The following are face definitions from the zenburn theme.  These
  are not defined in the base16 theme above, with the exception of
  the builtin and constant faces.

      `(web-mode-builtin-face ((t (:inherit ,font-lock-builtin-face))))
      `(web-mode-comment-face ((t (:inherit ,font-lock-comment-face))))
      `(web-mode-constant-face ((t (:inherit ,font-lock-constant-face))))
      `(web-mode-css-at-rule-face ((t (:foreground ,zenburn-orange ))))
      `(web-mode-css-prop-face ((t (:foreground ,zenburn-orange))))
      `(web-mode-css-pseudo-class-face ((t (:foreground ,zenburn-green+3 :weight bold))))
      `(web-mode-css-rule-face ((t (:foreground ,zenburn-blue))))
      `(web-mode-doctype-face ((t (:inherit ,font-lock-comment-face))))
      `(web-mode-folded-face ((t (:underline t))))
      `(web-mode-function-name-face ((t (:foreground ,zenburn-blue))))
      `(web-mode-html-attr-name-face ((t (:foreground ,zenburn-orange))))
      `(web-mode-html-attr-value-face ((t (:inherit ,font-lock-string-face))))
      `(web-mode-html-tag-face ((t (:foreground ,zenburn-cyan))))
      `(web-mode-keyword-face ((t (:inherit ,font-lock-keyword-face))))
      `(web-mode-preprocessor-face ((t (:inherit ,font-lock-preprocessor-face))))
      `(web-mode-string-face ((t (:inherit ,font-lock-string-face))))
      `(web-mode-type-face ((t (:inherit ,font-lock-type-face))))
      `(web-mode-variable-name-face ((t (:inherit ,font-lock-variable-name-face))))
      `(web-mode-server-background-face ((t (:background ,zenburn-bg))))
      `(web-mode-server-comment-face ((t (:inherit web-mode-comment-face))))
      `(web-mode-server-string-face ((t (:inherit web-mode-string-face))))
      `(web-mode-symbol-face ((t (:inherit font-lock-constant-face))))
      `(web-mode-warning-face ((t (:inherit font-lock-warning-face))))
      `(web-mode-whitespaces-face ((t (:background ,zenburn-red))))

  Load hc-zenburn theme first, then load the base16 theme we will use
  throughout, except in web-mode.  This is a nasty hack used to make
  web-mode syntax highlight HTML, since otherwise the faces in the
  listing above are not defined.  I really should define these
  directly, but I kind of like the hc-zenburn highighting for HTML.

  #+BEGIN_SRC emacs-lisp
    (use-package hc-zenburn-theme
      :ensure t
      :config
      (load-theme 'hc-zenburn t)
      :pin melpa)
  #+END_SRC
    
  #+BEGIN_SRC emacs-lisp
    (use-package base16-theme
      :ensure t
      :config
      (load-theme 'base16-tomorrow-night t)
      (let ((base00 (plist-get base16-tomorrow-night-colors :base00))
            (base01 (plist-get base16-tomorrow-night-colors :base01))
            (base02 (plist-get base16-tomorrow-night-colors :base02))
            (base03 (plist-get base16-tomorrow-night-colors :base03))
            (base04 (plist-get base16-tomorrow-night-colors :base04))
            (base05 (plist-get base16-tomorrow-night-colors :base05))
            (base06 (plist-get base16-tomorrow-night-colors :base06))
            (base07 (plist-get base16-tomorrow-night-colors :base07))
            (base08 (plist-get base16-tomorrow-night-colors :base08))
            (base09 (plist-get base16-tomorrow-night-colors :base09))
            (base0A (plist-get base16-tomorrow-night-colors :base0A))
            (base0B (plist-get base16-tomorrow-night-colors :base0B))
            (base0C (plist-get base16-tomorrow-night-colors :base0C))
            (base0D (plist-get base16-tomorrow-night-colors :base0D))
            (base0E (plist-get base16-tomorrow-night-colors :base0E))
            (base0F (plist-get base16-tomorrow-night-colors :base0F)))
        (setq face-remapping-alist
              `((show-paren-match
                 . (:foreground ,base0D
                    :background ,base01))
                (show-paren-mismatch
                 . (:strike-through t
                    :foreground ,base09
                    :background ,base01))
                (sp-show-pair-match-face
                 . (:foreground ,base0D
                    :background ,base01))
                (sp-show-pair-mismatch-face
                 . (:strike-through t
                    :foreground ,base09
                    :background ,base01))
                (font-lock-keyword-face
                 . (:foreground ,base0E))
                (font-lock-builtin-face
                 . (:foreground ,base0C))
                (font-lock-function-name-face
                 . (:foreground "cornflower blue"))
                (font-lock-doc-face
                 . (:foreground ,base0C))
                (font-lock-string-face
                 . (:foreground "slate gray"))
                (font-lock-comment-face
                 . (:foreground "light slate gray"))
                (font-lock-comment-delimiter-face
                 . (:foreground "light slate gray"))
                (py-builtins-face
                 . (:foreground "#ECBC9C"))
                (org-block
                 . (:foreground "#ECBC9C"))
                (fringe
                 . (:background unspecified))
                (avy-lead-face
                 . (:foreground "#FFD700"
                    :background unspecified
                    :weight bold))
                (avy-lead-face-0
                 . (:foreground "#FFD700"
                    :background unspecified
                    :weight bold))
                (avy-lead-face-2
                 . (:foreground "#FFD700"
                    :background unspecified
                    :weight bold))
                )))
      :pin melpa-stable)
  #+END_SRC

* Regions
  
  Kill or yank entire lines
  #+BEGIN_SRC emacs-lisp
    (use-package whole-line-or-region
      :ensure t
      :bind (("C-w" . whole-line-or-region-kill-region)
             ("M-w" . whole-line-or-region-copy-region-as-kill))
      :pin melpa-stable)
  #+END_SRC

  Expand or contract the region by sexp
  #+BEGIN_SRC emacs-lisp
    (use-package expand-region
      :ensure t
      :config
      :bind (("C-=" . er/expand-region)))
  #+END_SRC

* Snippets and autocomplete

  First set up yasnippet.
  #+BEGIN_SRC emacs-lisp
    (use-package yasnippet
      :ensure t
      :config
      (yas-global-mode 1)
      (setq warning-suppress-types '((yasnippet backquote-change)))
      (define-key yas-minor-mode-map (kbd "<C-return>") 'yas-ido-expand)
      :pin gnu
    )
  #+END_SRC

  Then set up autocomplete to use tabs
  #+BEGIN_SRC emacs-lisp
    (use-package auto-complete
      :ensure t
      :config
      (progn
        (require 'auto-complete-config)
        (add-to-list 'ac-dictionary-directories "~/.emacs.d/ac-dict")
        (ac-config-default)
        (setq ac-auto-start nil)
        (ac-set-trigger-key "TAB")
        (ac-set-trigger-key "<tab>"))
      :pin melpa
    )
  #+END_SRC

  According to [[https://truongtx.me/2013/01/06/config-yasnippet-and-autocomplete-on-emacs][the Truong blog]], when you press tab, this should let
  yasnippet run first.  If yasnippet cannot find an expansion, auto-
  complete will show completions.
  
  Downloads the official snippet collection.
  #+BEGIN_SRC emacs-lisp
    (use-package yasnippet-snippets
      :ensure t
      :pin melpa-stable)
  #+END_SRC

  Create snippet-like things on the fly
  #+BEGIN_SRC emacs-lisp
    (use-package auto-yasnippet
      :ensure t
      :bind (("C-c y" . aya-create)
             ("C-c e" . aya-expand))
      :pin melpa)
  #+END_SRC
  
* Parenthesis matching

  Match parenthesis visually by color
  #+BEGIN_SRC emacs-lisp  
    (use-package rainbow-mode
      :ensure t
      :pin gnu)
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
    (use-package smartparens
      :ensure t
      :init
        (progn
          (use-package smartparens-config)
          (use-package smartparens-html)
          (use-package smartparens-python)
          (use-package smartparens-javascript)
          (use-package smartparens-latex)
          (smartparens-global-mode 1)
          (show-smartparens-global-mode 1)
          (setq sp-show-pair-delay 0))
      :config
        (progn
          (sp-local-pair 'emacs-lisp-mode "`" nil :when '(sp-in-string-p)))
      :bind
        (("C-M-k" . sp-kill-sexp-with-a-twist-of-lime)
         ("C-M-f" . sp-forward-sexp)
         ("C-M-b" . sp-backward-sexp)
         ("C-M-n" . sp-up-sexp)
         ("C-M-d" . sp-down-sexp)
         ("C-M-u" . sp-backward-up-sexp)
         ("C-M-p" . sp-backward-down-sexp)
         ("C-M-w" . sp-copy-sexp)
         ;; ("M-s" . sp-splice-sexp)
         ("M-r" . sp-splice-sexp-killing-around)
         ("C-)" . sp-forward-slurp-sexp)
         ("C-}" . sp-forward-barf-sexp)
         ("C-(" . sp-backward-slurp-sexp)
         ("C-{" . sp-backward-barf-sexp)
         ("M-S" . sp-split-sexp)
         ("M-J" . sp-join-sexp)
         ("C-M-t" . sp-transpose-sexp)))
  #+END_SRC

* Minor modes
** Fira Code mode

   See instructions [[https://github.com/tonsky/FiraCode/wiki/Emacs-instructions][here]]. The Fira Code Symbol font must be installed
   as well as the Fira Code font. The Fira Code Symbol font can be
   installed from AUR [[https://aur.archlinux.org/packages/otf-fira-code-symbol/][here]]. The Fira Code font itself is in the pacman
   community library.

   #+BEGIN_SRC emacs-lisp
   
(defun fira-code-mode--make-alist (list)
  "Generate prettify-symbols alist from LIST."
  (let ((idx -1))
    (mapcar
     (lambda (s)
       (setq idx (1+ idx))
       (let* ((code (+ #Xe100 idx))
          (width (string-width s))
          (prefix ())
          (suffix '(?\s (Br . Br)))
          (n 1))
     (while (< n width)
       (setq prefix (append prefix '(?\s (Br . Bl))))
       (setq n (1+ n)))
     (cons s (append prefix suffix (list (decode-char 'ucs code))))))
     list)))

(defconst fira-code-mode--ligatures
  '("www" "**" "***" "**/" "*>" "*/" "\\\\" "\\\\\\"
    "{-" "[]" "::" ":::" ":=" "!!" "!=" "!==" "-}"
    "--" "---" "-->" "->" "->>" "-<" "-<<" "-~"
    "#{" "#[" "##" "###" "####" "#(" "#?" "#_" "#_("
    ".-" ".=" ".." "..<" "..." "?=" "??" ";;" "/*"
    "/**" "/=" "/==" "/>" "//" "///" "&&" "||" "||="
    "|=" "|>" "^=" "$>" "++" "+++" "+>" "=:=" "=="
    "===" "==>" "=>" "=>>" "<=" "=<<" "=/=" ">-" ">="
    ">=>" ">>" ">>-" ">>=" ">>>" "<*" "<*>" "<|" "<|>"
    "<$" "<$>" "<!--" "<-" "<--" "<->" "<+" "<+>" "<="
    "<==" "<=>" "<=<" "<>" "<<" "<<-" "<<=" "<<<" "<~"
    "<~~" "</" "</>" "~@" "~-" "~=" "~>" "~~" "~~>" "%%"
    "x" ":" "+" "+" "*"))

(defvar fira-code-mode--old-prettify-alist)

(defun fira-code-mode--enable ()
  "Enable Fira Code ligatures in current buffer."
  (setq-local fira-code-mode--old-prettify-alist prettify-symbols-alist)
  (setq-local prettify-symbols-alist (append (fira-code-mode--make-alist fira-code-mode--ligatures) fira-code-mode--old-prettify-alist))
  (prettify-symbols-mode t))

(defun fira-code-mode--disable ()
  "Disable Fira Code ligatures in current buffer."
  (setq-local prettify-symbols-alist fira-code-mode--old-prettify-alist)
  (prettify-symbols-mode -1))

(define-minor-mode fira-code-mode
  "Fira Code ligatures minor mode"
  :lighter " Fira Code"
  (setq-local prettify-symbols-unprettify-at-point 'right-edge)
  (if fira-code-mode
      (fira-code-mode--enable)
    (fira-code-mode--disable)))

(defun fira-code-mode--setup ()
  "Setup Fira Code Symbols"
  (set-fontset-font t '(#Xe100 . #Xe16f) "Fira Code Symbol"))

(provide 'fira-code-mode)
   #+END_SRC
   
** Folding

  Folding
  #+BEGIN_SRC emacs-lisp
    (use-package bicycle
      :after outline
      :bind (:map outline-minor-mode-map
                  ([C-tab] . bicycle-cycle)
                  ([S-tab] . bicycle-cycle-global))
      :pin melpa)

    (use-package prog-mode
      :config
      (add-hook 'prog-mode-hook 'outline-minor-mode)
      (add-hook 'prog-mode-hook 'hs-minor-mode))
  #+END_SRC

** Miscellaneous  
   
  #+BEGIN_SRC 
    (global-linum-mode t)
    (show-paren-mode 1)
  #+END_SRC
  
* Search
** Cursor movement

   Move around on the screen using search.  I've modified the
   following faces in Themes: avy-lead-face, avy-lead-face-0,
   avy-lead-face-2 to remove the distracting red and blue
   background colors.

   #+BEGIN_SRC emacs-lisp
   (use-package avy
     :ensure t
     :config
       (setq avy-background t)
       (setq avy-all-windows 'all-frames)
       (setq avy-timeout-seconds 0.5)
     :bind ("M-s" . avy-goto-char-timer)
     :pin melpa)
   #+END_SRC

** Grepping

   Put the cursor in the results window after a grep.
   #+BEGIN_SRC emacs-lisp
     (defun my-other-other-window (&rest r)
       (message "Executing my-other-window after rgrep...")
       (other-window 1))
     (advice-add 'rgrep :after 'my-other-other-window)
   #+END_SRC
  
* Shell mode

  From the blog post [[http://manuel-uberti.github.io//emacs/2019/06/14/xterm/][Better colours in Emacs shell]]; doesn't appear to
  make a difference.
  #+BEGIN_SRC emacs-lisp
    (defvar mu--tomorrow-night-colours ["#1d1f21" "#cc6666"
                                        "#b5bd68" "#f0c674"
                                        "#81a2be" "#b294bb"
                                        "#8abeb7" "#c5c8c6"])
    (setq xterm-color-names mu--tomorrow-night-colours
          xterm-color-names-bright mu--tomorrow-night-colours)
  #+END_SRC

* Comint mode

  #+BEGIN_SRC emacs-lisp
    (add-hook 'comint-mode-hook
              (lambda ()
                (define-key comint-mode-map
                  (kbd "C-d") 'my-comint-delchar-or-eof-or-kill-buffer)
                (define-key comint-mode-map
                  (kbd "C-<up>") 'comint-previous-matching-input-from-input)
                (define-key comint-mode-map
                  (kbd "C-p") 'comint-previous-matching-input-from-input)
                (define-key comint-mode-map
                  (kbd "C-<down>") 'comint-next-matching-input-from-input)
                (define-key comint-mode-map
                  (kbd "C-n") 'comint-next-matching-input-from-input)))
  #+END_SRC
  
* YAML etc

  PKGBUILD files
  #+BEGIN_SRC emacs-lisp
    (use-package pkgbuild-mode
      :ensure t
      :config
      (add-to-list 'auto-mode-alist '("/PKGBUILD$" . pkgbuild-mode))
      :pin melpa-stable)  
  #+END_SRC

  Yet another markup language
  #+BEGIN_SRC emacs-lisp  
    (use-package yaml-mode
      :ensure t
      :mode "\\.\\(condarc\\|ya?ml\\)\\''"
      :bind ("C-m" . newline-and-indent)
      :pin melpa-stable)
  #+END_SRC

* C/C++
** Format C/C++ code according to Clang standard

   #+BEGIN_SRC emacs-lisp
     (use-package clang-format
       :ensure t
       :pin melpa)
   #+END_SRC

** Jump to/from function definitions

   #+BEGIN_SRC emacs-lisp
     (use-package ggtags
       :ensure t
       :config 
       (add-hook 'c-mode-common-hook
                 (lambda ()
                   (when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
                     (ggtags-mode 1)))))  
   #+END_SRC

** Vertical guides to sexps

   #+BEGIN_SRC emacs-lisp
     (use-package highlight-indent-guides
       :ensure t
       :config
       (progn
         (setq highlight-indent-guides-method 'column)
         (add-hook 'c-mode-hook 'highlight-indent-guides-mode)
         (add-hook 'c++-mode-hook 'highlight-indent-guides-mode)
         (add-hook 'arduino-mode-hook 'highlight-indent-guides-mode)))
   #+END_SRC

** Put a semicolon at the end of a line

   #+BEGIN_SRC emacs-lisp
     (defun my-insert-semicolon ()
       (interactive)
       (move-end-of-line 1)
       (unless (looking-back ";" 1)
           (insert ";")))
     (add-hook 'c-mode-hook
               (lambda ()
                 (local-set-key (kbd "C-;") 'my-insert-semicolon)))
     (add-hook 'c++-mode-hook
               (lambda ()
                 (local-set-key (kbd "C-;") 'my-insert-semicolon)))
   #+END_SRC

** Find the right makefile and compile

   https://emacs.stackexchange.com/questions/7475/recursively-go-up-to-find-makefile-and-compile
   #+BEGIN_SRC emacs-lisp
     (defun my-compile ()
       "Traveling up the path, find a Makefile and `compile'."
       (interactive)
       (let ((makedir
              (or
               (locate-dominating-file default-directory "Makefile")
               (locate-dominating-file default-directory "makefile"))))
       (when makedir
         (with-temp-buffer
           (cd makedir)
           (call-interactively 'compile))
         (select-window (get-buffer-window "*compilation*") 'no-record))))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
     (add-hook 'c-mode-hook
               (lambda ()
                 (local-set-key (kbd "C-c C-c") 'my-compile)))
     (add-hook 'c++-mode-hook
               (lambda ()
                 (local-set-key (kbd "C-c C-c") 'my-compile)))   
   #+END_SRC

** Arduino mode

  #+BEGIN_SRC emacs-lisp  
    (use-package arduino-mode
      :ensure t
      :mode "\\.ino\\''"
      :pin melpa)
  #+END_SRC

* HTML, CSS, etc.
** HTMLize

  Required by some syntax coloring code
  #+BEGIN_SRC emacs-lisp
    (use-package htmlize
      :ensure t
      :pin melpa-stable)  
  #+END_SRC

** Web mode

  This hook runs once whenever a file is opened, as opposed to
  web-mode-hook, which runs only once when web-mode is loaded.  For
  some reason, sp-local-pair has to be run once in every web-mode
  buffer.  Perhaps something to do with a buffer-local variable.
  There's probably a better way to do this, but for now this is it.

  #+BEGIN_SRC emacs-lisp
    (defun my-find-file-hook ()
      (when (string= major-mode "web-mode")
        (sp-local-pair 'web-mode "\"" "\"" :actions :rem)
        (sp-local-pair 'web-mode "{" "}" :actions :rem)))
    (add-hook 'find-file-hook #'my-find-file-hook)
  #+END_SRC
  
  All-in-one web mode
  #+BEGIN_SRC emacs-lisp
    (use-package web-mode
      :ensure t
      :init
      (setq web-mode-enable-current-element-highlight t
            web-mode-enable-current-column-highlight t
            web-mode-engines-alist
            '(("php"    . "\\.phtml\\'")
              ("django" . "\\.html\\'"))
            web-mode-enable-auto-pairing t
            web-mode-enable-auto-closing t
            web-mode-ac-sources-alist
            '(("css" . (ac-source-css-property))
              ("html" . (ac-source-words-in-buffer ac-source-abbrev)))
            web-mode-enable-css-colorization t
            web-mode-markup-indent-offset 2)
      :mode
      (("\\.html?\\'"     . web-mode)
       ("\\.tmpl\\'"      . web-mode)
       ("\\.phtml\\'"     . web-mode)
       ("\\.tpl\\.php\\'" . web-mode)
       ("\\.[agj]sp\\'"   . web-mode)
       ("\\.as[cp]x\\'"   . web-mode)
       ("\\.erb\\'"       . web-mode)
       ("\\.mustache\\'"  . web-mode)
       ("\\.djhtml\\'"    . web-mode))
      :pin melpa)
  #+END_SRC

* JavaScript
** js2-mode
   
  From [[https://emacs.cafe/emacs/javascript/setup/2017/04/23/emacs-setup-javascript.html][Emacs Cafe]], Setting up Emacs for JavaScript, part #1
  #+BEGIN_SRC emacs-lisp
    (use-package js2-mode
      :ensure t
      ;; :requires ac-js2
      :config
      (setq js2-highlight-level 3
            flycheck-jshint-rc (concat user-emacs-directory ".jshintrc"))
      :mode
      (("\\.js\\'" . js2-mode))
      :hook
      ((js-mode-hook . js2-minor-mode)
       (js-mode-hook . smartparens-mode)
       (js2-mode-hook . js2-imenu-extras-mode))
      :pin melpa
    )

    (add-hook 'js2-mode-hook (lambda ()
      (define-key js2-mode-map (kbd "C-k") #'kill-line)))

    (add-hook 'js2-mode-hook (lambda () 
      (setq js2-basic-offset 2)))
  #+END_SRC
  
** Autocomplete

  Auto-complete for js2-mode
  #+BEGIN_SRC emacs-lisp
    ;; (use-package ac-js2
    ;;   :ensure t
    ;;   :pin melpa
    ;; )
  #+END_SRC

  Completion (requires npm install -g tern)
  #+BEGIN_SRC emacs-lisp
    ;; (use-package tern-auto-complete
    ;;   :ensure t
    ;;   :pin melpa
    ;; )
    ;; (use-package tern
    ;;   :ensure t
    ;;   :after tern-auto-complete
    ;;   :requires js2-mode-hook
    ;;   :config
    ;;   (add-hook 'js2-mode-hook (lambda () (tern-mode t)))
    ;;   (tern-ac-setup)
    ;;   :pin melpa
    ;; )
  #+END_SRC

** Refactoring

  Refactoring and linting
  #+BEGIN_SRC emacs-lisp
    ;; (use-package js2-refactor
    ;;   :ensure t
    ;;   :requires js2-mode
    ;;   :config
    ;;   (add-hook 'js2-mode-hook #'js2-refactor-mode)
    ;;   (add-hook 'js2-mode-hook (lambda () (flycheck-mode t)))
    ;;   (js2r-add-keybindings-with-prefix "C-c C-r")
    ;;   (define-key js2-mode-map (kbd "C-k") #'jsr2-kill)
    ;;   :pin melpa
    ;; )
  #+END_SRC
  
  Cross references
  #+BEGIN_SRC emacs-lisp
    ;; (use-package xref-js2
    ;;   :ensure t
    ;;   :requires js2-mode
    ;;   :config
    ;;   ;; js2 binds "M-.", which conflicts with xref, so unbind it
    ;;   (define-key js-mode-map (kbd "M-.") nil)
    ;;   (add-hook 'js2-mode-hook (lambda ()
    ;;     (add-hook 'xref-backend-functions #'xref-js2-xref-backend nil t)))
    ;;   :pin melpa
    ;; )
  #+END_SRC

** REPL and inspector

  #+BEGIN_SRC emacs-lisp
    ;; (use-package indium
    ;;   :ensure t
    ;;   :config
    ;;   (setq indium-chrome-executable 
    ;;         "C:/Users/rodprice/AppData/Local/Google/Chrome/Application/chrome.exe")
    ;;   (add-hook 'js-mode-hook #'indium-interaction-mode)
    ;;   :pin melpa
    ;; )
  #+END_SRC

** JSON

   #+BEGIN_SRC emacs-lisp
   (use-package json-mode
     :ensure t
     :mode
      (("\\.json\\'" . json-mode)
       (".jshint" . json-mode))
     :config
     (setq json-reformat:indent-width 2)
     (setq json-reformat:pretty-string\? t)
     (add-hook 'json-mode-hook
               (lambda ()
                 (make-local-variable 'js-indent-level)
                 (setq js-indent-level 2)))
     :pin melpa-stable)
   #+END_SRC

* Python
** Python mode

   #+BEGIN_SRC emacs-lisp
     (require 'python)
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
   (defun python-version (python-executable-name)
     "Find out whether Python can be run from Emacs, and if so, return
      the major version number (either 2 or 3).  If Python cannot be
      run from Emacs, return -1."
     (let* ((command (concat python-executable-name " --version"))
            (version-string-list
              (split-string
                (shell-command-to-string command))))
       (if (string= (car version-string-list) "Python")
         (string-to-number
           (car (split-string (nth 1 version-string-list) "\\.")))
         -1)))
   #+END_SRC
   
   Put a few customizations here that should be loaded after
   python-mode is completely loaded.

   #+BEGIN_SRC emacs-lisp
     (add-hook 'python-mode-hook 
       (lambda () 
         (setq fill-column 72)))
   #+END_SRC

** Conda

   #+BEGIN_SRC emacs-lisp
     (use-package conda
       :config (progn
            (conda-env-initialize-interactive-shells)
            (conda-env-initialize-eshell)
            (conda-env-autoactivate-mode t)
            (setq conda-env-home-directory (expand-file-name "~/.conda/"))
            (custom-set-variables '(conda-anaconda-home "/c/users/rdprice/apps/anaconda3/")))
       :pin melpa)
   #+END_SRC

** Ipython

   Tell python-mode where to find Ipython and how to run it.
   #+BEGIN_SRC emacs-lisp
     (setq python-shell-interpreter 
       (if (string-equal system-type "windows-nt")
         (expand-file-name "ipython" my-anaconda-scripts-dir)
         "ipython3"))
     (setq python-shell-interpreter-args "--simple-prompt -i --pprint")
     (setq python-shell-prompt-regexp "In \\[[0-9]+\\]: ")
     (setq python-shell-prompt-output-regexp "Out\\[[0-9]+\\]: ")

     ;; Stop python-mode from complaining about matching prompts
     (setq python-shell-prompt-detect-failure-warning nil)
     ;; Completion stuff that I don't understand
     (setq python-shell-completion-setup-code
           "from IPython.core.completerlib import module_completion"
           python-shell-completion-string-code
           "';'.join(module_completion('''%s'''))\n"
           python-shell-completion-string-code
           "';'.join(get_ipython().Completer.all_completions('''%s'''))\n")   
   #+END_SRC

   Enable completion in IPython buffers.
   #+BEGIN_SRC emacs-lisp
   (use-package ac-capf
     :ensure t
     :config
     (add-hook 'inferior-python-mode-hook 'ac-capf-setup)
     :pin melpa-stable)
   #+END_SRC
   
** Documentation

   Access to info-formatted Python documentation

** Testing

   Prerequisites
   #+BEGIN_SRC emacs-lisp
     (use-package s
       :ensure t
       :pin melpa-stable)   
   #+END_SRC

   Tell python mode where to find pytest
   #+BEGIN_SRC emacs-lisp
     ;; (require 'pytest)
     ;; (setq pytest-global-name "python -B -m pytest"
     ;;       pytest-cmd-flags "-x -s -r a")
     ;;       ;; pytest-use-verbose nil
     ;;       ;; pytest-loop-on-failing nil
     ;;       ;; pytest-assert-isinstance(lain t)
   #+END_SRC

   Run all the tests in the package
   #+BEGIN_SRC emacs-lisp
     (defun my-pytest-all (&optional flags)
       (interactive)
       (pytest-run nil flags)
       (other-window 1))
   #+END_SRC

   Run all the tests in the directory
   #+BEGIN_SRC emacs-lisp
     (defun my-pytest-directory (&optional flags)
       (interactive)
       (pytest-run (file-name-directory buffer-file-name) flags)
       (other-window 1))
   #+END_SRC

   Run all the tests in the module
   #+BEGIN_SRC emacs-lisp
     (defun my-pytest-module (&optional flags)
       (interactive)
       (pytest-run buffer-file-name flags)
       (other-window 1))
   #+END_SRC

   Run the test under the cursor
   #+BEGIN_SRC emacs-lisp
     (defun my-pytest-one (&optional flags)
       (interactive)
       (pytest-run (format "%s" (pytest-py-testable)) flags)
       (other-window 1))
   #+END_SRC
   
*** TODO Run tests with debugger

** Flycheck

   Use pyflakes and nothing else.
   #+BEGIN_SRC emacs-lisp
     (defun pyflakes-predicate () (not (equal 0 (- (point-max) (point-min)))))
     (defun add-python-pyflakes ()
       (flycheck-define-checker python-pyflakes
         "A Python syntax checker using the pyflakes utility."
         :command ("pyflakes" source-inplace)
         :error-patterns
         ((error line-start (file-name) ":" line ":" (message) line-end))
         :modes python-mode
         :predicate pyflakes-predicate
       )
       (add-to-list 'flycheck-checkers 'python-pyflakes)
       (add-to-list 'flycheck-disabled-checkers 'python-flake8)
       (add-to-list 'flycheck-disabled-checkers 'python-pylint))
   #+END_SRC
   
   Add type checking with mypy.  Expects Python version 3.7.
   #+BEGIN_SRC emacs-lisp
     (defun mypy-predicate () (not (equal 0 (- (point-max) (point-min)))))
     (defun add-python-mypy ()
       (flycheck-define-checker python-mypy
         "Type checking for Python."
         :command ("mypy"
                   "--ignore-missing-imports"
                   "--python-version" "3.7"
                   source-original)
         :error-patterns
         ((error   line-start (file-name) ":" line ": error:"   (message) line-end)
          (warning line-start (file-name) ":" line ": warning:" (message) line-end)
          (info    line-start (file-name) ":" line ": note:"    (message) line-end))
         :modes python-mode
         :predicate mypy-predicate
       )
       (add-to-list 'flycheck-checkers 'python-mypy 'append)
       (flycheck-add-next-checker 'python-pyflakes '(error . python-mypy)))
   #+END_SRC
   
   #+BEGIN_SRC emacs-lisp
     (use-package flycheck
       :ensure t
       :config
       ;; Python
       (add-python-pyflakes)
       (add-python-mypy)
       ;; Emacs lisp
       (with-eval-after-load 'flycheck
         (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc)))
       (setq flycheck-emacs-lisp-load-path 'inherit)
       ;; Start flycheck up
       (add-hook 'after-init-hook #'global-flycheck-mode)
       :pin melpa)
   #+END_SRC

** TODO completion

   Fix this so it only offers completion candidates when I hit <tab>
   #+BEGIN_SRC emacs-lisp
     (use-package jedi
       :ensure t
       :config
       (progn
         (add-hook 'python-mode-hook 'jedi:setup)
         (add-hook 'python-mode-hook 'jedi:ac-setup)
         (setq jedi:setup-keys t)
         (setq jedi:complete-on-dot t)
         ;; (setq python-environment-virtualenv
         ;;       '("python3" "-m" "venv" "--system-site-packages" "--quiet"))
       )
       :pin melpa-stable)
   #+END_SRC

   #+BEGIN_SRC emacs-lisp
   (use-package anaconda-mode
     :disabled
     :config
     :hook ((python-mode-hook . anaconda-mode)
            (python-mode-hook . anaconda-eldoc-mode))
     :pin melpa-stable)
   #+END_SRC

** TODO Folding
** Key bindings

   #+BEGIN_SRC emacs-lisp
     (add-hook 'python-mode-hook
               (lambda ()
                 ;; (local-set-key (kbd "C-c l") 'my-python-shell-send-line)
                 (local-set-key (kbd "C-x C-e") 'python-shell-send-defun)
                 (local-set-key (kbd "C-c a") 'my-pytest-all)
                 (local-set-key (kbd "C-c m") 'my-pytest-module)
                 (local-set-key (kbd "C-c o") 'my-pytest-one)
                 (local-set-key (kbd "C-c d") 'my-pytest-directory)))
   #+END_SRC

** Notes

*** Anaconda on Windows

**** Find the prompt in Anaconda3

     The Anaconda prompt does not show up in the start menu after
     Anaconda installation.  A shortcut to the prompt can be found at
     C:\Users\rodprice\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Anaconda3 (64-bit)
     
     The Anaconda prompt shortcut can be customized to start up in a
     particular project with a virtual environment.  Copy the shortcut
     somewhere convenient, then change the command line to start up
     the virtual environment and the startup folder to the top level
     of your project.  

**** Make conda and pip use gcc on Windows

     Put the following in anacondaX/Lib/distutils/distutils.cfg:
    
         [build]
           mingw64
          
**** Install pymc3 on Windows

     1. Make conda and pip use gcc
     2. conda install libpython m2w64-toolchain -c msys
     3. conda install pymc3 -c conda-forge

**** Install pystan on Windows

     1. Make conda and pip use gcc
     2. conda install libpython m2w64-toolchain -c msys
     3. conda install pystan -c conda-forge

     Then test by typing the following at the python prompt:

     >>> import pystan
     >>> model_code = 'parameters {real y;} model {y ~ normal(0,1);}'
     >>> model = pystan.StanModel(model_code=model_code)
     >>> y = model.sampling().extract()['y']
     >>> y.mean()  # with luck the result will be near 0

     For more details, see documentation [[https://pystan.readthedocs.io/en/latest/windows.html][here]].  After this procedure,
     I found that bash is installed in Anaconda!

     - Anaconda2: gcc dies on the third step with gcc exit status 1.
       Works on Anaconda3.
          
* Typesetting
** LaTeX

  #+BEGIN_SRC emacs-lisp
    ;; (use-package cdlatex
    ;;   :ensure t
    ;;   :pin melpa-stable)
  #+END_SRC

** Markdown

  #+BEGIN_SRC emacs-lisp
    (use-package markdown-mode
      :ensure t
      :defer t
      :mode "\\.md\\'"
      :commands (markdown-mode gfm-mode)
      :init
      (setq
       markdown-command "pelican content"
       markdown-command-needs-filename nil
       markdown-enable-math t
       markdown-open-command nil)
      :pin melpa-stable)  
  #+END_SRC

  Preview Markdown content in a browser at every save
  See https://github.com/ancane/markdown-preview-mode
  #+BEGIN_SRC emacs-lisp
    (use-package markdown-preview-mode
      :disabled
      :ensure t
      :defer t
      :pin melpa-stable)  
  #+END_SRC
* Version control

  Git interface
  #+BEGIN_SRC emacs-lisp
    (use-package magit
      :ensure t
      :bind (("C-c m" . magit-status)
             ("C-x C-m" . magit-dispatch-popup))
      :pin melpa-stable)  
  #+END_SRC
  
* Hydras
** Root

  #+BEGIN_SRC emacs-lisp
    (use-package hydra
      :ensure t
      :pin melpa
    )
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
    (defhydra hydra-root ()
      "Hydra access"
      ("h" hydra-help/body "help" :exit t)
      ("p" hydra-smartparens/body "parens" :exit t)
      ("z" hydra-zoom/body "zoom" :exit t)
      ("q" nil "quit"))
    (define-key global-map (kbd "<f5>") 'hydra-root/body)
  #+END_SRC

** Help

   #+BEGIN_SRC emacs-lisp
     (defhydra hydra-help (:color blue)
       "Help"
       ("?" help-for-help "help")
       ("i" info "info")
       ("k" describe-key "key")
       ("o" describe-symbol "symbol")
       ("v" describe-variable "variable")
       ("f" describe-function "function")
       ("b" describe-bindings "bindings")
       ("m" describe-mode "mode")
       ("q" nil "quit"))
   #+END_SRC

** Smartparens

   #+BEGIN_SRC emacs-lisp
     (defhydra hydra-smartparens ()
       "Smartparens"
       (")" sp-forward-slurp-sexp "slurp")
       ("}" sp-forward-barf-sexp "barf")
       ("(" sp-backward-slurp-sexp "unslurp")
       ("{" sp-backward-barf-sexp "unbarf")
       ("s" sp-split-sexp "split")
       ("j" sp-join-sexp "join")
       ("q" nil "quit"))
   #+END_SRC

** Zoom

   #+BEGIN_SRC emacs-lisp
     (defhydra hydra-zoom (global-map "M-z")
       "zoom"
       ("g" text-scale-increase "in")
       ("l" text-scale-decrease "out")
       ("q" nil "quit"))
   #+END_SRC

* Key bindings
** Prerequisites

  #+BEGIN_SRC emacs-lisp
    (require 'my-functions)
  #+END_SRC

** Completions

  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "M-/") 'hippie-expand)
  #+END_SRC

** Switch buffers

  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-x C-b") 'ibuffer)
  #+END_SRC
  
** Search

  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-s") 'isearch-forward-regexp)
    (global-set-key (kbd "C-r") 'isearch-backward-regexp)
    (global-set-key (kbd "C-M-s") 'isearch-forward)
    (global-set-key (kbd "C-M-r") 'isearch-backward)
    (global-set-key (kbd "C-c r") 'rgrep)
  #+END_SRC
  
** Line wrapping

  #+BEGIN_SRC emacs-lisp
        (global-set-key (kbd "C-c q") 'auto-fill-mode)
  #+END_SRC

** Join, open, or transpose lines

  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-;") 'my-insert-semicolon)
    (global-set-key (kbd "M-j") 'my-join-lines)
    (global-set-key (kbd "C-o") 'open-next-line)
    (global-set-key (kbd "M-o") 'open-previous-line)
    (global-set-key (kbd "C-t") 'transpose-next-line)
    (global-set-key (kbd "M-t") 'transpose-previous-line)
  #+END_SRC
  
** Cursor movement

  #+BEGIN_SRC emacs-lisp
    (use-package mwim
      :ensure t
      :bind
      (("C-a" . mwim-beginning-of-line-or-code)
       ("C-e" . mwim-end-of-line-or-code))
      :pin melpa)
  #+END_SRC
  
  #+BEGIN_SRC emacs-lisp
    ;; (global-set-key (kbd "C-a") 'smarter-move-beginning-of-line)
    (global-set-key (kbd "M-<") 'scroll-row-up)
    (global-set-key (kbd "M->") 'scroll-row-down)
    (global-set-key (kbd "C-<") 'xah-backward-block)
    (global-set-key (kbd "C->") 'xah-forward-block)
    (global-set-key (kbd "M-<up>") 'scroll-row-up)
    (global-set-key (kbd "M-<down>") 'scroll-row-down)
  #+END_SRC

*** Notes

    smarter-move-beginning-of-line is from [[https://emacsredux.com/blog/2013/05/22/smarter-navigation-to-the-beginning-of-a-line/][here]].
  
** Window movement

  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-x p") 'my-rearrange-windows)
  #+END_SRC
  
** Window and frame selection

  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-x C-o") 'other-frame)
  #+END_SRC
  
** Camel case

  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "M-c") 'toggle-camelcase-underscores)
  #+END_SRC
  
** Narrow or widen to the region

  #+BEGIN_SRC emacs-lisp
    (define-key ctl-x-map "n" #'narrow-or-widen-dwim)
  #+END_SRC

* TODO Org mode
  
  Use whole-line-or-region yank, not org-yank, to maintain consistency
  with the yank behavior everywhere else.

  #+BEGIN_SRC emacs-lisp
    ;; (use-package org-mode
    ;;   :bind (:map org-mode-map
    ;;     ("C-y" . whole-line-or-region-yank)))
  #+END_SRC


  #+BEGIN_SRC emacs-lisp
    (use-package org-bullets
      :ensure t
      :config
        (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
      :pin melpa-stable)
  #+END_SRC

* Notes

[[https://getpocket.com/explore/item/why-you-can-t-trust-yourself][Bertrand Russell famously said, "The whole problem with the world
is that fools and fanatics are so certain of themselves and wiser
people so full of doubts."]]

A reference would be nice...

    The Second Coming

    Turning and turning in the widening gyre
    The falcon cannot hear the falconer;
    Things fall apart; the centre cannot hold;
    Mere anarchy is loosed upon the world,
    The blood-dimmed tide is loosed, and everywhere
    The ceremony of innocence is drowned;
    The best lack all conviction, while the worst
    Are full of passionate intensity.

    - W. B. Yeats, 1920


    "Everywhere I go I'm asked if I think universities stifle
    writers," she said. "I think they don't stifle enough of
    them. The kind of writing that can be taught is the kind you then
    have to teach people not to read..."

    She explained that what she had at the University of Iowa was
    valuable, "but it wasn't training to write as such; it was
    training to read with critical attention -- my own work and other
    people's."

    - Flannery O'Connor, 1960


    Shall we not have sympathy with the muskrat that gnaws its third
    leg off, not as pitying its sufferings but, through our kindred
    mortality, appreciating its majestic pains and its heroic virtue? 
    Are we not made brothers by fate?  For whom are psalms sung and
    mass said, if not for such worthies as these?

    - Thoreau


    "Lost life by stab in falling on ink eraser, evading six young
    women trying to give him birthday kisses in office Metropolitan
    Life Building."

    - gravestone of one George Spencer Millet, 1894-1909

    
    "We have got to teach ourselves to understand literature.  Money
    is no longer going to do our thinking for us."
    
    - Virginia Woolf, 1940


    "I did my best, it wasn't much
    I couldn't feel, so I tried to touch
    I've told the truth, I didn't come to fool you
    And even though it all went wrong
    I'll stand before the lord of song
    With nothing on my tongue but hallelujah..."

    - Leonard Cohen, from [[https://www.google.com/search?client=firefox-b-1-d&q=leonard+cohen+hallelujah+lyrics][Hallelujah]]


    "Most software today is very much like an Egyptian pyramid with
    millions of bricks piled on top of each other, with no structural
    integrity, but just done by brute force and thousands of slaves."

    - Alan Kay, [[https://queue.acm.org/detail.cfm?id=1039523][ACM Queue "A Conversation with Alan Kay" Vol. 2, No. 9]]

      
    See the description of how you should respond to a cyber breach of
    your name, birthdate, social security number at 37:22 of the video
    at https://www.youtube.com/watch?v=vsMydMDi3rI. Short answer: get 
    a good service to watch your credit (NOT, NOT, NOT Equifax) and 
    never use a debit card, or a "credit-debit" card, but a real credit
    card.
    
    - Frank Abagnale: "Catch Me If You Can" | Talks at Google
