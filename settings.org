#+TITLE: Emacs Configuration
#+STARTUP: overview indent


* Defaults

#+begin_src emacs-lisp
(message "starting defaults")
#+end_src

** Preliminaries

All functions below use lexical binding.
#+begin_src emacs-lisp
  ;; -*- coding: utf-8; lexical-binding: t -*-
#+end_src

Some packages use the [[https://github.com/magnars/s.el#functions][s]] library without explicitly naming it as a
prerequisite (I'm looking at you, [[https://github.com/sabof/org-bullets][org-bullets]]), so load it now.
#+begin_src emacs-lisp
  (use-package s
    :ensure t)
#+end_src

** Text

Character encodings default to utf-8.
#+begin_src emacs-lisp
  (prefer-coding-system 'utf-8)
  (set-language-environment 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
#+end_src

Sentences end with a single space.
#+begin_src emacs-lisp
  (setq sentence-end-double-space nil)
#+end_src
   
Always insert spaces, never tab characters.
#+begin_src emacs-lisp
   (setq-default indent-tabs-mode nil)
#+end_src

Truncate long lines everywhere.
#+begin_src emacs-lisp
  (global-visual-line-mode 0)
  (setq-default truncate-lines t)
#+end_src

Delete trailing whitespace before save.
#+begin_src emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

Highlight current line.
#+begin_src emacs-lisp
  (global-hl-line-mode t)
#+end_src

** Clipboard
   
   Use the system clipboard.
#+begin_src emacs-lisp
     (setq select-enable-clipboard t
           select-enable-primary t
           save-interprogram-paste-before-kill t
           mouse-yank-at-point t)
#+end_src
   
** File locations
   
Make emacs open files in a reasonable directory by default.
#+begin_src emacs-lisp
  (setq default-directory (getenv "HOME"))
#+end_src
   
[[http://stackoverflow.com/questions/151945/how-do-i-control-how-emacs-makes-backup-files][Backup file configuration]].
#+begin_src emacs-lisp
  (setq delete-old-versions t
        kept-new-versions 2
        kept-old-versions 2
        version-control t)
#+end_src
   
File locations for custom settings.
#+begin_src emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (unless (file-exists-p custom-file)
    (custom-save-all))                   ; Create new, empty custom file
  (load custom-file)
#+end_src

File location for saving cursor state.
#+begin_src emacs-lisp
  (require 'saveplace)
  (setq save-place-file (concat user-emacs-directory "places")
        backup-directory-alist `(("." . ,(concat user-emacs-directory
                                                 "backups"))))
#+end_src

* GUI elements

#+begin_src emacs-lisp
(message "starting gui elements")
#+end_src

** Menu bar, tool bar, scroll bars

   Keep menu bar, drop toolbar and scroll bars.
#+begin_src emacs-lisp
     (setq inhibit-startup-message t)
     ;;  (menu-bar-mode -1)
     (when (fboundp 'tool-bar-mode)
       (tool-bar-mode -1))
     (when (fboundp 'scroll-bar-mode)
       (scroll-bar-mode -1))
     (when (fboundp 'horizontal-scroll-bar-mode)
       (horizontal-scroll-bar-mode -1))
     (setq visible-bell t)
#+end_src

   Show line numbers on the left.
#+begin_src emacs-lisp
     (if (>= emacs-major-version 29)
         (global-display-line-numbers-mode 1)
       (global-linum-mode t))
#+end_src

#+begin_src emacs-lisp
     ;; (require 'paren)
     ;; (setq show-paren-style 'parenthesis)
     ;; (show-paren-mode 1)
#+end_src

** Frame titles

   Display buffer name in frame titles. ([[https://github.com/malb/emacs.d/blob/master/malb.org#frame-title][source]])
#+begin_src emacs-lisp

     (defun my-emacs-version ()
       "Returns a shortened Emacs name and version string."
       (let ((ls (split-string (emacs-version) " ")))
         (substring
          (format "%s" `(,(car ls) ,(cadr ls) ,(caddr ls)))
          1
          -1)))

     (defun my-conda-env-current-name ()
       "Returns the name of the current conda environment."
       (if (bound-and-true-p conda-env-current-name)
           (concat " - Conda: " conda-env-current-name)
         ""))

     (defun my-git-branch-name ()
       "Returns the name of the current git branch."
       (if vc-mode
           (concat " -" (substring-no-properties vc-mode))
         ""))

     (setq frame-title-format
           '(""
             (:eval (replace-regexp-in-string "^ +" "" (my-emacs-version)))
             (:eval (my-conda-env-current-name))
             (:eval (my-git-branch-name))))
#+end_src
   
** Mode line
   
#+begin_src emacs-lisp
     (require 'uniquify)
     (setq uniquify-buffer-name-style 'forward)
     ;; Display the column number in the mode line
     (setq column-number-mode t)
#+end_src
  
* Fonts

#+begin_src emacs-lisp
(message "starting fonts")
#+end_src

** Set the default font

#+begin_src emacs-lisp
    (defun my-font-in-family-p (font-family)
      "True iff the current frame's font is in font-family."
      (let ((font-name (cdr (assoc 'font default-frame-alist))))
        (string-prefix-p (downcase font-family) (downcase font-name))))
#+end_src

  The default font can also be set in the site-specific preload file.
#+begin_src emacs-lisp
    (unless (boundp 'my-default-font)
      (defvar my-default-font "Fira Code-11"))
    (add-to-list 'default-frame-alist `(font . ,my-default-font))
    (set-face-font 'default my-default-font)
#+end_src

** Use ligatures if available

#+begin_src emacs-lisp :tangle no
    (use-package ligature
      :if (or (my-font-in-family-p "Fira Code")
              (my-font-in-family-p "JuliaMono"))
      :ensure t
      :config
      ;; JuliaMono (https://juliamono.netlify.app/) supports the following small set of ligatures
      (if (my-font-in-family-p "JuliaMono")
          (let ((ligs '("->" "=>" "|>" "<|" "::" "<--" "-->" "<-->")))
            (ligature-set-ligatures 'prog-mode ligs)
            (ligature-set-ligatures 'org-mode ligs)))
      (if (my-font-in-family-p "Fira Code")
          (progn
            (require 'fira-code-mode)
            (ligature-set-ligatures 'prog-mode fira-code-mode--ligatures)
            (ligature-set-ligatures 'org-mode fira-code-mode--ligatures)))
            
      ;; Enables ligature checks globally in all buffers. You can also do it
      ;; per mode with `ligature-mode'.
      (global-ligature-mode t))
#+end_src
  
** Insert Greek letters, etc

=prettify-symbols-mode= can render Greek letters, etc. Doing [[http://endlessparentheses.com/new-in-emacs-25-1-have-prettify-symbols-mode-reveal-the-symbol-at-point.html][this]]
allows you to see the original text. See also [[http://endlessparentheses.com/using-prettify-symbols-in-clojure-and-elisp-without-breaking-indentation.html][here]] and [[http://endlessparentheses.com/improving-latex-equations-with-font-lock.html][here]].
#+begin_src emacs-lisp :tangle no
(setq prettify-symbols-unprettify-at-point 'right-edge)
#+end_src

* Themes

#+begin_src emacs-lisp
(message "starting themes")
#+end_src


#+begin_src emacs-lisp
    (use-package vscode-dark-plus-theme
      :ensure t
      :config
      (load-theme 'vscode-dark-plus t)
      (setq face-remapping-alist
            `((show-paren-match
               . (:weight bold
                  :foreground "#ecbc9c"))
              (show-paren-mismatch
               . (:strike-through t
                  :foreground "#cc6666"))
              (sp-show-pair-match-face
               . (:weight bold
                  :foreground "#ecbc9c"))
              (sp-show-pair-mismatch-face
               . (:strike-through t
                  :foreground "#cc6666"))
              (font-lock-function-name-face
               . (:foreground "#4ec9b0"
                  :weight normal))
              (font-lock-keyword-face
               . (:foreground "cornflower blue"
                  :weight normal))
              (font-lock-variable-name-face
               . (:foreground "#f0c674"))
              (lsp-face-highlight-read
               . (:underline t
                  :background nil
                  :foreground nil))
              (lsp-face-highlight-textual
               . (:underline t
                  :background nil
                  :foreground nil))
              (lsp-face-highlight-write
               . (:underline t
                  :background nil
                  :foreground nil))
              (lsp-ui-peek-highlight
               . (:inherit nil
                  :background nil
                  :foreground nil
                  :weight semi-bold
                  :box (:line-width -1)))
              (org-block
               . (:extend t
                  :background "gray12"
                  :foreground "#e8e8e8"))
              (org-block-begin-line
               . (:extend t
                  :background "gray12"
                  :foreground "gray40"))
              (org-tree-slide-heading-level-1
               . (:height 1.8
                  :weight bold))
              (org-tree-slide-heading-level-2
               . (:height 1.5
                  :weight bold))
              (org-tree-slide-heading-level-3
               . (:height 1.5
                  :weight bold))
              (org-tree-slide-heading-level-4
               . (:height 1.5
                  :weight bold)))))
#+end_src

* Editing

#+begin_src emacs-lisp
(message "starting editing")
#+end_src

** Prerequisites

#+begin_src emacs-lisp
  (require 'my-functions)
#+end_src

** Search

#+begin_src emacs-lisp
  (global-set-key (kbd "C-s") 'isearch-forward-regexp)
  (global-set-key (kbd "C-r") 'isearch-backward-regexp)
  (global-set-key (kbd "C-M-s") 'isearch-forward)
  (global-set-key (kbd "C-M-r") 'isearch-backward)
  (global-set-key (kbd "C-c r") 'rgrep)
#+end_src
  
** Line wrapping

#+begin_src emacs-lisp
  (global-set-key (kbd "C-c q") 'auto-fill-mode)
#+end_src

** Join, open, or transpose lines

#+begin_src emacs-lisp
  (global-set-key (kbd "C-;") 'my-insert-semicolon)
  (global-set-key (kbd "M-j") 'my-join-lines)
  (global-set-key (kbd "C-o") 'open-next-line)
  (global-set-key (kbd "M-o") 'open-previous-line)
  (global-set-key (kbd "C-t") 'transpose-next-line)
  (global-set-key (kbd "M-t") 'transpose-previous-line)
#+end_src
  
** Camel case

#+begin_src emacs-lisp
  (global-set-key (kbd "M-c") 'toggle-camelcase-underscores)
#+end_src

** Cursor movement

#+begin_src emacs-lisp
  (use-package mwim
    :ensure t
    :bind
    (("C-a" . mwim-beginning-of-line-or-code)
     ("C-e" . mwim-end-of-line-or-code))
    :pin melpa)
#+end_src
  
#+begin_src emacs-lisp
  (global-set-key (kbd "<home>") 'mwim-beginning-of-line-or-code)
  (global-set-key (kbd "<end>") 'mwim-end-of-line-or-code)
  (global-set-key (kbd "M-<") 'scroll-row-up)
  (global-set-key (kbd "M->") 'scroll-row-down)
  (global-set-key (kbd "C-<") 'xah-backward-block)
  (global-set-key (kbd "C->") 'xah-forward-block)
  (global-set-key (kbd "M-<up>") 'scroll-row-up)
  (global-set-key (kbd "M-<down>") 'scroll-row-down)
#+end_src

Move point to mark efficiently ([[http://endlessparentheses.com/faster-pop-to-mark-command.html][Faster pop-to-mark command]]). See also
[[https://www.masteringemacs.org/article/fixing-mark-commands-transient-mark-mode][Fixing the mark commands in transient-mark-mode]].
#+begin_src emacs-lisp
  (advice-add 'pop-to-mark-command :around #'modi/multi-pop-to-mark)
#+end_src

** Spelling

Tweaks from Mastering Emacs, [[https://www.masteringemacs.org/article/wordsmithing-in-emacs][Wordsmithing in Emacs]].
#+begin_src emacs-lisp
  (use-package ispell
    :ensure nil
    :bind ("M-#" . dictionary-lookup-definition)
    :init
    (setq switch-to-buffer-obey-display-actions t)
    (add-to-list 'display-buffer-alist
                 '("^\\*Dictionary\\*" display-buffer-in-side-window
                   (side . bottom)
                   (window-height . 30))))
#+end_src

Find the spelling program, if installed.
#+begin_src emacs-lisp
  (let ((aspell-exe (if (eq system-type 'windows-nt)
                        (executable-find "aspell.exe")
                      (executable-find "aspell"))))
    (if aspell-exe
        (setq-default ispell-program-name aspell-exe)
      (error "Could not find an aspell executable on exec-path.")))
#+end_src

** Regions
  
Kill or yank entire lines
#+begin_src emacs-lisp
  (use-package whole-line-or-region
    :ensure t
    :bind (("C-w" . whole-line-or-region-kill-region)
           ("M-w" . whole-line-or-region-copy-region-as-kill)))
#+end_src

Expand or contract the region by sexp ([[https://github.com/magnars/expand-region.el][expand-region.el]])
#+begin_src emacs-lisp
  (use-package expand-region
    :ensure t
    :config
    :bind (("C-=" . er/expand-region)
           ("M-=" . er/contract-region)))
#+end_src

** Which-key package

Configuration from [[https://github.com/daviwil/emacs-from-scratch/blob/master/Emacs.org][Emacs from scratch]]. Source code and README is [[https://github.com/justbur/emacs-which-key][here]].
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :defer 0
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 1))
#+end_src

* Window management

#+begin_src emacs-lisp
(message "starting window management")
#+end_src

** Save the cursor position

#+begin_src emacs-lisp
    (require 'saveplace)
    (setq-default save-place t)
#+end_src

** Desktop mode

Note: Doesn't work with emacsclient. See StackExchange [[https://emacs.stackexchange.com/questions/8147/using-desktop-mode-with-emacs-daemon][Using desktop-mode with emacsclient]]
and the last paragraph of [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Saving-Emacs-Sessions.html#Saving-Emacs-Sessions][Saving Emacs Sessions]] in the Emacs manual.

Restore emacs' windows and buffers ([[https://bmag.github.io/2015/12/26/desktop.html][Desktop-Save Mode]] and [[https://www.emacswiki.org/emacs/Desktop][Emacs wiki]]).
#+begin_src emacs-lisp
  (if (daemonp)
      (add-hook 'server-after-make-frame-hook #'desktop-read)
    (add-hook 'window-setup-hook #'desktop-read))
  (setq desktop-save t)  ;; always save
  (desktop-save-mode)
#+end_src

** Window movement

#+begin_src emacs-lisp
  ;; (global-set-key (kbd "C-x p") 'my-rearrange-windows)
#+end_src
  
** Window and frame selection

See [[https://www.masteringemacs.org/article/demystifying-emacs-window-manager][Demystifying emacs' window manager]].
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-o") 'other-frame)
  (unless (< emacs-major-version 27)
    (setq switch-to-buffer-obey-display-actions t))
#+end_src

** Popup windows

Set rules for popup windows ([[https://depp.brause.cc/shackle/][shackle.el]])
#+begin_src emacs-lisp :tangle no
  (use-package shackle
    :ensure t
    :init
    (setq shackle-rules '((compilation-mode :frame t))
          shackle-default-rule '(:select t))
    :config
    (shackle-mode 1))
#+end_src

Manage popup windows ([[https://github.com/karthink/popper][popper.el]])
#+begin_src emacs-lisp
  (use-package popper
    :ensure t
    :bind (("C-`"   . popper-toggle-latest)
           ("M-`"   . popper-cycle)
           ("C-M-`" . popper-toggle-type))
    :init
    (setq popper-reference-buffers
          '("\\*Messages\\*"
            "Output\\*$"
            "\\*Async Shell Command\\*"
            "\\*grep\\*"
            "\\*Backtrace\\*"
            "\\*Completions\\*"
            "\\*Flycheck errors\\*"
            "^\\*Shortdoc"
            "\\*Apropos\\*"
            "\\*Buffer List\\*"
            ("\\*Warnings\\*" . hide)
            help-mode
            compilation-mode))
    (popper-mode +1)
    (popper-echo-mode +1))
#+end_src

* Markdown mode

#+begin_src emacs-lisp
(message "starting markdown mode")
#+end_src

Configuration instructions are [[https://jblevins.org/projects/markdown-mode/][here]].
#+begin_src emacs-lisp
  (use-package markdown-mode
    :ensure t
    :mode
    ("README\\.md\\'" . gfm-mode)
    :custom
    (markdown-enable-math t)
    :init
    (setq markdown-command "multimarkdown"))
#+end_src

[[https://github.com/Fanael/edit-indirect/][Edit code blocks]] in a new buffer, like =org-mode=.
#+begin_src emacs-lisp
  (use-package edit-indirect
    :ensure nil
    :after markdown-mode
    :load-path "mode")
#+end_src

* Org mode

#+begin_src emacs-lisp
(message "starting org mode")
#+end_src

** Appearance

Note: More customization can be found in the blog post [[https://zzamboni.org/post/beautifying-org-mode-in-emacs/][Beautifying Org Mode in Emacs]].
Note: =org-modern= ignores =org-bullets= and friends, substituting its own bullets.

#+begin_src emacs-lisp
  (use-package org
    :ensure nil
    :custom
    (org-hide-emphasis-markers t)
    (org-use-speed-commands t))
#+end_src

Make various elements of an org-mode document look nicer ([[https://github.com/minad/org-modern][org-modern]]).
#+begin_src emacs-lisp
  (use-package org-modern
    :ensure t
    :after org
    :custom
    (org-modern-star '("◉" "○" "●" "‣"))
    (org-modern-hide-stars nil)		; adds extra indentation
    (org-modern-table nil)
    :hook
    (org-mode . org-modern-mode)
    (org-agenda-finalize . org-modern-agenda))
#+end_src

** Shortcuts

Note: =org= motion commands are [[https://orgmode.org/org.html#Motion][here]].

Type "<el" and hit tab to get a source block ([[https://github.com/daviwil/emacs-from-scratch/blob/master/Emacs.org#structure-templates][emacs from scratch]]).
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    ;; This is needed as of Org 9.2
    (require 'org-tempo)
    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python")))
#+end_src

Github code is [[https://github.com/tj64/outline-magic][here]], but there's no documentation there. Requires more
configuration; right now it steals TAB and behaves badly.
#+begin_src emacs-lisp :tangle no
  (use-package outline-magic
    :ensure t
    :demand
    :after outline
    :bind (:map outline-minor-mode-map
                ("C-<tab>" . outline-cycle)))
#+end_src

** LaTeX

#+begin_src emacs-lisp :tangle no
  ;; (add-hook 'org-mode-hook #'turn-on-org-cdlatex)
  (setq org-highlight-latex-and-related '(latex))
#+end_src

** Exporting

Required for [[https://github.com/hniksic/emacs-htmlize][highlighting source code]] in exported HTML.
#+begin_src emacs-lisp
  (use-package htmlize
    :ensure t)
#+end_src

Export using Tufte's CSS: code [[https://github.com/Zilong-Li/org-tufte][here]].
#+begin_src emacs-lisp
  (use-package org-tufte
    :ensure nil
    :config
      (require 'org-tufte)
      (setq org-tufte-htmlize-code t
            org-tufte-embed-images nil))
#+end_src

** Junkyard

Note: org-mode does not respect =org-bullets-bullet-list=. Don't know why not.
Use Unicode characters for bullets ([[https://github.com/sabof/org-bullets][org-bullets]]), including bullets in lists.
#+begin_src emacs-lisp :tangle no
  (use-package org-bullets
    :ensure nil
    :load-path "mode"
    :after org
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
  ;;    :hook org-mode)
#+end_src

Tried this package, too. =org= just refuses to show my bullets rather
than the defaults.
 #+begin_src emacs-lisp :tangle no
   (use-package org-superstar
     :ensure t
     :config
     (setq org-superstar-headline-bullets-list '("◉" "○" "●" "‣"))
     (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1))))
#+end_src

Handle indentation correctly ([[https://github.com/jdtsmith/org-modern-indent][org-modern-indent]]).
#+begin_src emacs-lisp :tangle no
  (use-package org-modern-indent
    :ensure nil
    :after org
    :load-path "lisp"
    :config ; add late to hook
    (add-hook 'org-mode-hook #'org-modern-indent-mode 90))
#+end_src

Note: [[https://github.com/rksm/org-ai][org-ai]] is yet another emacs interface to ChatGPT, etc.

* Completions

#+begin_src emacs-lisp
(message "starting completions")
#+end_src

** Native emacs completion

Note: A setup using only native emacs [[https://www.scss.tcd.ie/~sulimanm/posts/default-emacs-completion.html][here]].

Modify completions to include remote files.
#+begin_src emacs-lisp
  (defun basic-remote-try-completion (string table pred point)
    (and (vertico--remote-p string)
         (completion-basic-try-completion string table pred point)))

  (defun basic-remote-all-completions (string table pred point)
    (and (vertico--remote-p string)
         (completion-basic-all-completions string table pred point)))

  (add-to-list
   'completion-styles-alist
   '(basic-remote basic-remote-try-completion basic-remote-all-completions nil))
#+end_src

Settings that apply everywhere.
#+begin_src emacs-lisp :tangle no
  (setq completion-styles '(basic substring flex))
  (setq completion-cycle-threshold 10)
  (setq completion-auto-help 'lazy)
  (setq completion-ignore-case t)
  (setq completion-category-overrides '())
#+end_src

Selecting buffers.
#+begin_src emacs-lisp :tangle no
  (setq read-buffer-completion-ignore-case t)
  (add-to-list 'completion-category-overrides
               '(buffer
                 (styles basic)
                 (cycle . 10)))
#+end_src

Selecting files.
#+begin_src emacs-lisp :tangle no
  (recentf-mode)
  (setq read-file-name-completion-ignore-case t)
  (add-to-list 'completion-category-overrides
               '(file
                 (styles basic partial-completion)
                 (cycle . 10)))
#+end_src

Tab completion in an ordinary buffer.
#+begin_src emacs-lisp :tangle no
  (setq tab-always-indent 'complete)
#+end_src

Use icomplete for the completion UI
#+begin_src emacs-lisp
  ;; (icomplete-vertical-mode 1)
#+end_src

Use FIDO mode for minibuffer completion UI.
#+begin_src emacs-lisp
  ;; (fido-mode 1)
#+end_src

** Orderless package

The [[https://github.com/oantolin/orderless][Orderless]] package enables completion without regard to the order in which
candidates are entered. [[https://github.com/oantolin/orderless#style-dispatchers][Style dispatchers]] can be used to customize the completion
behaviors for =M-x= and the =describe-*= commands, for instance.
#+begin_src emacs-lisp
  (use-package orderless
    :ensure t
    :init
    (recentf-mode)
    (setq completion-cycle-threshold 10)
    (setq completion-auto-help 'lazy)
    (setq completion-ignore-case t)
    (setq read-buffer-completion-ignore-case t)
    (setq read-file-name-completion-ignore-case t)
    (setq completion-styles '(basic orderless))
    (setq completion-category-defaults nil)
    (setq completion-category-overrides
               '((buffer (cycle . 10))
                 (file (styles basic partial-completion)
                       (cycle . 10))))
    ;; See https://github.com/minad/corfu/issues/136
    (add-to-list 'completion-category-overrides
                 '(eglot (styles orderless flex)
                         (cycle . 10))))
#+end_src

** Vertico package and friends

Note: [[https://www.reddit.com/r/emacs/comments/ymriwz/can_i_start_executeextendedcommand_with_an/][Can I start "execute-extended-command" with an initial input?]]

Persist history over Emacs restarts. Vertico sorts by history position.
#+begin_src emacs-lisp
  (use-package savehist
    :ensure t
    :init
    (savehist-mode))
#+end_src

Vertico is vertical interactive completion: [[https://github.com/minad/vertico][README]]. This configuration is
from [[https://github.com/minad/vertico/wiki#make-vertico-and-vertico-directory-behave-more-like-ivyido][here]].
#+begin_src emacs-lisp
  (use-package vertico
    :ensure t
    :demand
    :custom
    (vertico-cycle t)
    (vertico-preselect 'directory)
    :bind (:map vertico-map
                ("<tab>" . vertico-insert)
                ("C-M-n" . vertico-next-group)
                ("C-M-p" . vertico-previous-group)
                ("?"     . minibuffer-completion-help)
                ("C-M-i" . minibuffer-complete)
                ("M-RET" . minibuffer-force-complete-and-exit))
    :init
    ;; Prefix the current candidate with "» ". From
    ;; https://github.com/minad/vertico/wiki#prefix-current-candidate-with-arrow
    ;; (advice-add #'vertico--format-candidate
    ;;             :around
    ;;             (lambda (orig cand prefix suffix index _start)
    ;;               (setq cand (funcall orig cand prefix suffix index _start))
    ;;               (concat
    ;;                (if (= vertico--index index)
    ;;                    (propertize "» " 'face 'vertico-current)
    ;;                  "  ")
    ;;                cand)))
    :config
    (vertico-mode))
#+end_src

The [[https://github.com/minad/marginalia][Marginalia]] package adds extra information to minibuffer completions.
#+begin_src emacs-lisp
  (use-package marginalia
    :ensure t
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    :config (marginalia-mode))
#+end_src

Mouse integration into Vertico
#+begin_src emacs-lisp
  (use-package vertico-mouse
    :after vertico
    :ensure nil)
#+end_src

IDO-like directory navigation
#+begin_src emacs-lisp
  (use-package vertico-directory
    :after vertico
    :load-path "elpa/vertico-1.2"
    :ensure nil
    :demand
    :bind (:map vertico-map
                ("RET" . vertico-directory-enter)
                ("DEL" . vertico-directory-delete-char)
                ("M-DEL" . vertico-directory-delete-word))
    ;; Tidy shadowed file names
    :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))
#+end_src

Configure Vertico per command or completion category: [[https://github.com/minad/vertico#configure-vertico-per-command-or-completion-category][README]]; also [[https://github.com/minad/vertico/wiki#annotate-m-x-commands-with-keybindings-in-flatunobtrusive-mode][here]].
#+begin_src emacs-lisp :tangle no
  (use-package vertico-multiform
    :after vertico
    :ensure nil
    :init
    ;; Taken from marginalia-annotate-binding
    (defun +vertico-annotate-binding (command)
      "Annotate COMMAND with key binding in flat/unobtrusive mode."
      (if-let* (((or (bound-and-true-p vertico-flat-mode)
                     (bound-and-true-p vertico-unobtrusive-mode)))
                (sym (intern-soft command))
                (key (and (commandp sym) (where-is-internal sym nil 'first-only))))
          (format #("%s (%s)" 3 7 (face shadow)) command (key-description key))
        command))
    (vertico-multiform-mode)
    (setq vertico-multiform-commands
          '( ;; ("\\`execute-extended-command" flat +vertico-annotate-binding)
            (consult-imenu buffer indexed)
            (describe-variable unobtrusive)
            (describe-function unobtrusive)))
    (setq vertico-multiform-categories
          '((consult-grep buffer))))
#+end_src

** Consult and friends

*** Source for cpp-mode

Consult-buffer source for cpp-mode, from [[https://git.uni-wuppertal.de/firemod_UoW/configs/emacsfire/-/blob/main/.emacs.d_vanilla/04_user_completion.org][here]].
#+begin_src emacs-lisp
(defvar  cpp-source
  (list :name     "CPP Buffer"
        :category 'buffer
        :narrow   ?c
        :face     'consult-buffer
        :history  'buffer-name-history
        :state    #'consult--buffer-state
        :new
        (lambda (name)
          (with-current-buffer (get-buffer-create name)
            (cpp-mode)
            (consult--buffer-action (current-buffer))))
        :items
        (lambda ()
          (mapcar #'buffer-name
                  (seq-filter
                   (lambda (x)
                     (eq (buffer-local-value 'major-mode x) 'cpp-mode))
                   (buffer-list))))))
#+end_src

*** Source for python-mode

Consult-buffer source for python-mode, from [[https://git.uni-wuppertal.de/firemod_UoW/configs/emacsfire/-/blob/main/.emacs.d_vanilla/04_user_completion.org][here]].
#+begin_src emacs-lisp
(defvar python-source
  (list :name     "Python Buffer"
        :category 'buffer
        :narrow   ?P
        :face     'consult-buffer
        :history  'buffer-name-history
        :state    #'consult--buffer-state
        :new
        (lambda (name)
          (with-current-buffer (get-buffer-create name)
            (python-mode)
            (consult--buffer-action (current-buffer))))
        :items
        (lambda ()
          (mapcar #'buffer-name
                  (seq-filter
                   (lambda (x)
                     (eq (buffer-local-value 'major-mode x) 'python-mode))
                   (buffer-list))))))
#+end_src

*** Source for org-mode

Consult-buffer source for org-mode, from [[https://git.uni-wuppertal.de/firemod_UoW/configs/emacsfire/-/blob/main/.emacs.d_vanilla/04_user_completion.org][here]].
#+begin_src emacs-lisp
(defvar org-source
  (list :name     "Org Buffer"
        :category 'buffer
        :narrow   ?o
        :face     'consult-buffer
        :history  'buffer-name-history
        :state    #'consult--buffer-state
        :new
        (lambda (name)
          (with-current-buffer (get-buffer-create name)
            (insert "#+title: " name "\n\n")
            (org-mode)
            (consult--buffer-action (current-buffer))))
        :items
        (lambda ()
          (mapcar #'buffer-name
                  (seq-filter
                   (lambda (x)
                     (eq (buffer-local-value 'major-mode x) 'org-mode))
                   (buffer-list))))))
#+end_src

*** Source for vterm

Consult-buffer source for vterm, from [[https://git.uni-wuppertal.de/firemod_UoW/configs/emacsfire/-/blob/main/.emacs.d_vanilla/04_user_completion.org][here]].
#+begin_src emacs-lisp
(defvar  vterm-source
  (list :name     "Vterm Buffer"
        :category 'buffer
        :narrow   ?v
        :face     'consult-buffer
        :history  'buffer-name-history
        :state    #'consult--buffer-state
        :new
        (lambda (name)
          (with-current-buffer (get-buffer-create name)
            ;;(insert "#+title: " name "\n\n")
            (vterm-mode)
            (consult--buffer-action (current-buffer))))
        :items
        (lambda ()
          (mapcar #'buffer-name
                  (seq-filter
                   (lambda (x)
                     (eq (buffer-local-value 'major-mode x) 'vterm-mode))
                   (buffer-list))))))
#+end_src

*** Source for eshell

Consult-buffer source for eshell, from [[https://git.uni-wuppertal.de/firemod_UoW/configs/emacsfire/-/blob/main/.emacs.d_vanilla/04_user_completion.org][here]].
#+begin_src emacs-lisp
(defvar  eshell-source
  (list :name     "Eshell Buffer"
        :category 'buffer
        :narrow   ?e
        :face     'consult-buffer
        :history  'buffer-name-history
        :state    #'consult--buffer-state
        :new
        (lambda (name)
          (with-current-buffer (get-buffer-create name)
            ;;(insert "#+title: " name "\n\n")
            (eshell-mode)
            (consult--buffer-action (current-buffer))))
        :items
        (lambda ()
          (mapcar #'buffer-name
                  (seq-filter
                   (lambda (x)
                     (eq (buffer-local-value 'major-mode x) 'eshell-mode))
                   (buffer-list))))))
#+end_src

*** Consult package

These buffers will be ignored by the consult-buffer command (C-x b)
#+begin_src emacs-lisp
  (defvar my-hidden-buffers '("\\`\\*Compile-Log\\*\\'"
                              "\\`\\*Async-native-compile-log\\*\\'"
                              "\\`\\*Flycheck errors\\*\\'"
                              "\\`\\*Flycheck error messages\\*\\'"
                              "\\`\\*EGLOT.*\\*\\'"
                              "\\`\\*Native-compile-Log\\*\\'"
                              "\\`\\*debug tramp/.*\\*\\'"))
#+end_src

From the consult wiki, [[https://github.com/minad/consult/wiki#narrowing-which-key-help-without-delay][Narrowing which-key help without delay]].
#+begin_src emacs-lisp
(defun immediate-which-key-for-narrow (fun &rest args)
  (let* ((refresh t)
         (timer (and consult-narrow-key
                     (memq :narrow args)
                     (run-at-time 0.05 0.05
                                  (lambda ()
                                    (if (eq last-input-event (elt consult-narrow-key 0))
                                        (when refresh
                                          (setq refresh nil)
                                          (which-key--update))
                                      (setq refresh t)))))))
    (unwind-protect
        (apply fun args)
      (when timer
        (cancel-timer timer)))))
(advice-add #'consult--read :around #'immediate-which-key-for-narrow)
#+end_src

Simplify the =consult-buffer= command: [[https://github.com/minad/consult/wiki#hide-all-sources-except-normal-buffers-in-consult-buffer-by-default][Consult wiki]]
Filter out unwanted buffers in list: [[https://www.reddit.com/r/emacs/comments/yy79pn/how_to_hideignore_orgroam_buffersfiles_when_using/][Reddit]]
#+begin_src emacs-lisp
  (use-package consult
    :ensure t
    :after vertico
    :config
    ;; Make consult-buffer show only buffers initially
    (dolist (src consult-buffer-sources)
      (unless (eq src 'consult--source-buffer)
        (set src (plist-put (symbol-value src) :hidden t))))
    ;; Filter out unwanted buffers shown by consult-buffer
    (dolist (buff my-hidden-buffers)
      (add-to-list 'consult-buffer-filter buff t))
    ;; Use `consult-completion-in-region' if Vertico is enabled.
    ;; Otherwise use the default `completion--in-region' function.
    ;; (setq completion-in-region-function
    ;;       (lambda (&rest args)
    ;;         (apply (if vertico-mode
    ;;                    #'consult-completion-in-region
    ;;                  #'completion--in-region)
    ;;                args)))
    (setq consult-narrow-key "<")
    (add-to-list 'consult-buffer-sources 'cpp-source 'append)
    (add-to-list 'consult-buffer-sources 'python-source 'append)
    (add-to-list 'consult-buffer-sources 'org-source 'append)
    (add-to-list 'consult-buffer-sources 'eshell-source 'append)
    (unless (eq system-type 'windows-nt)
      (add-to-list 'consult-buffer-sources 'vterm-source 'append))
    :bind
    (("M-y" . consult-yank-from-kill-ring)
     ("C-x b" . consult-buffer)))
  ;; :hook (completion-list-mode . consult-preview-at-point-mode))
#+end_src

*** Consult customize

Not sure what this does, so it's turned off for now. From [[https://git.uni-wuppertal.de/firemod_UoW/configs/emacsfire/-/blob/main/.emacs.d_vanilla/04_user_completion.org][here]].
#+begin_src emacs-lisp :tangle no
  (consult-customize
   consult-theme
   ;; :preview-key '(:debounce 0.2 any)
   consult-ripgrep
   consult-git-grep
   consult-grep
   consult-bookmark
   consult-recent-file
   consult-xref
   consult--source-recent-file
   consult--source-project-recent-file
   consult--source-bookmark
   :preview-key "C-,"
   )
#+end_src

Consult-buffer source for org-mode, from [[https://git.uni-wuppertal.de/firemod_UoW/configs/emacsfire/-/blob/main/.emacs.d_vanilla/04_user_completion.org][here]].
#+begin_src emacs-lisp

#+end_src

Consult-buffer source for org-mode, from [[https://git.uni-wuppertal.de/firemod_UoW/configs/emacsfire/-/blob/main/.emacs.d_vanilla/04_user_completion.org][here]].
#+begin_src emacs-lisp

#+end_src

Show all the files accessible to git stash: [[https://github.com/rcj/consult-ls-git][README]]
#+begin_src emacs-lisp :tangle no
  (use-package consult-ls-git
    :ensure t
    :bind
    (("C-c g f" . #'consult-ls-git)
     ("C-c g F" . #'consult-ls-git-other-window)))
#+end_src

** Corfu and friends

Note: [[https://github.com/minad/corfu/issues/136][How to make corfu + orderless work well with eglot + clangd]]
Note: [[https://github.com/minad/corfu/wiki#configuring-corfu-for-eglot][Configuring corfu for eglot]]
Note: [[https://github.com/minad/corfu#completing-in-the-eshell-or-shell][Completing in eshell or shell]]

[[https://github.com/minad/corfu][Corfu]] is a completion UI that makes use of emacs' native completion functions.
Here I set it up with [[https://github.com/minad/corfu#tab-and-go-completion][tab-and-go completion]]. It could also be used for completion
in the [[https://github.com/minad/corfu#completing-in-the-minibuffer][minibuffer]].
#+begin_src emacs-lisp
    (use-package corfu
      :ensure t
      ;; Optional customizations
      :custom
      (corfu-cycle t)
      (corfu-preselect 'prompt)

      ;; Optionally use TAB for cycling, default is `corfu-complete'.
      :bind (:map corfu-map
                  ("M-SPC"      . corfu-insert-separator)
                  ("TAB"        . corfu-next)
                  ([tab]        . corfu-next)
                  ("S-TAB"      . corfu-previous)
                  ([backtab]    . corfu-previous)
                  ("C-<return>" . corfu-insert)
                  ("RET"        . nil))

      :init
      (defun corfu-enable-in-eshell ()
        "Enable completion with corfu in the eshell buffer."
        (setq-local corfu-quit-at-boundary t
                    corfu-quit-no-match t
                    corfu-auto nil)
        (corfu-mode 1))

      (defun corfu-send-shell (&rest _)
        "Send completion candidate when inside comint/eshell."
        (cond
         ((and (derived-mode-p 'eshell-mode) (fboundp 'eshell-send-input))
          (eshell-send-input))
         ((and (derived-mode-p 'comint-mode)  (fboundp 'comint-send-input))
          (comint-send-input))))

      (advice-add #'corfu-insert :after #'corfu-send-shell)

      ;; (global-corfu-mode)
      (corfu-history-mode)

      :config
      (setq tab-always-indent 'complete)
      :hook
      ((prog-mode . corfu-mode)
             (eshell-mode . corfu-enable-in-eshell)))
#+end_src

[[https://github.com/minad/cape][Cape]] provides =completion-at-point= extensions.
#+begin_src emacs-lisp
  (use-package cape
    :ensure t
    ;; Bind dedicated completion commands
    ;; Alternative prefix keys: C-c p, M-p, M-+, ...
    :bind (("C-c p p" . completion-at-point) ;; capf
           ("C-c p t" . complete-tag)        ;; etags
           ("C-c p d" . cape-dabbrev)        ;; or dabbrev-completion
           ("C-c p h" . cape-history)
           ("C-c p f" . cape-file)
           ("C-c p k" . cape-keyword)
           ("C-c p s" . cape-symbol)
           ("C-c p a" . cape-abbrev)
           ("C-c p i" . cape-ispell)
           ("C-c p l" . cape-line)
           ("C-c p w" . cape-dict)
           ("C-c p \\" . cape-tex)
           ("C-c p _" . cape-tex)
           ("C-c p ^" . cape-tex)
           ("C-c p &" . cape-sgml)
           ("C-c p r" . cape-rfc1345))
    :init
    ;; Add `completion-at-point-functions', used by `completion-at-point'.
    (add-to-list 'completion-at-point-functions #'cape-dabbrev)
    (add-to-list 'completion-at-point-functions #'cape-file)
    ;;(add-to-list 'completion-at-point-functions #'cape-history)
    ;;(add-to-list 'completion-at-point-functions #'cape-keyword)
    ;;(add-to-list 'completion-at-point-functions #'cape-tex)
    ;;(add-to-list 'completion-at-point-functions #'cape-sgml)
    ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345)
    ;;(add-to-list 'completion-at-point-functions #'cape-abbrev)
    ;;(add-to-list 'completion-at-point-functions #'cape-ispell)
    ;;(add-to-list 'completion-at-point-functions #'cape-dict)
    ;;(add-to-list 'completion-at-point-functions #'cape-symbol)
    ;;(add-to-list 'completion-at-point-functions #'cape-line)

    (when (< emacs-major-version 29)
      ;; Silence the pcomplete capf, no errors or messages!
      (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-silent)
      ;; Ensure that pcomplete does not write to the buffer
      ;; and behaves as a pure `completion-at-point-function'.
      (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-purify))
  )
#+end_src

** Embark package

#+begin_src emacs-lisp :tangle no
  (use-package embark
    :disabled
    :ensure t

    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

    :init

    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)

    :config

    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :ensure t
    :after (embark consult)
    :demand t ; only necessary if you have the hook below
    ;; if you want to have consult previews as you move around an
    ;; auto-updating embark collect buffer
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

** Notes

https://www.masteringemacs.org/article/understanding-minibuffer-completion
https://www.masteringemacs.org/article/introduction-to-ido-mode

#+begin_src emacs-lisp
  (global-set-key (kbd "M-/") 'hippie-expand)
#+end_src

Show all buffers currently displayed in windows in all frames
#+begin_src emacs-lisp
  ;; (mapcar (lambda (frame) (cons frame (list (window-list frame)))) (frame-list))
#+end_src

* Remote

#+begin_src emacs-lisp
(message "starting remote")
#+end_src

From [[https://gist.github.com/agumonkey/dc6e55e7e47de9b34980e933a346e82bhttps://gist.github.com/agumonkey/dc6e55e7e47de9b34980e933a346e82b][init-tramp-plink.el]]
#+begin_src emacs-lisp
  (require 'tramp)
  (modify-coding-system-alist 'process "plink" 'utf-8-unix)
  (setq tramp-default-method "plink"
        tramp-completion-without-shell-p t
        tramp-verbose 10
        tramp-debug-buffer t)

  ;; (let ((path (getenv "PATH"))
  ;;       (plink (expand-file-name "PuTTY" (getenv "ProgramFiles(x86)"))))
  ;;   (setenv "PATH" (concat plink path-separator path)))

  ;; ;; (add-to-list 'exec-path "C:/Program Files (x86)/PuTTY/")
  ;; (add-to-list 'exec-path (expand-file-name "PuTTY" (getenv "ProgramFiles(x86)")))
#+end_src

Exclude Tramp buffers from preview: [[https://github.com/minad/consult/wiki#do-not-preview-exwm-windows-or-tramp-buffers][Consult wiki]]
#+begin_src emacs-lisp
  (defun consult-buffer-state-no-tramp ()
    "Buffer state function that doesn't preview Tramp buffers."
    (let ((orig-state (consult--buffer-state))
          (filter (lambda (action cand)
                    (if (and cand
                             (or (eq action 'return)
                                 (let ((buffer (get-buffer cand)))
                                   (and buffer
                                        (not (file-remote-p
                                              (buffer-local-value 'default-directory buffer)))))))
                        cand
                      nil))))
      (lambda (action cand)
        (funcall orig-state action (funcall filter action cand)))))

  ;; (setq consult--source-buffer
  ;;       (plist-put consult--source-buffer :state #'consult-buffer-state-no-tramp))
#+end_src

From [[https://www.emacswiki.org/emacs/Tramp_on_Windows][Tramp on Windows]]
#+begin_src emacs-lisp
    ;; (when (eq window-system 'w32)
    ;;   (setq tramp-default-method "plink")
    ;;   (when (and (not (string-match my-putty-directory (getenv "PATH")))
    ;; 	     (file-directory-p my-putty-directory))
    ;;     (setenv "PATH" (concat my-putty-directory ";" (getenv "PATH")))
    ;;     (add-to-list 'exec-path my-putty-directory)))
#+end_src

* Code folding

#+begin_src emacs-lisp
(message "starting code folding")
#+end_src

Code from [[https://karthinks.com/software/simple-folding-with-hideshow/][karthinks]] blog.
#+begin_src emacs-lisp
  (use-package hideshow
    :ensure t
    :config
    (defun hs-cycle (&optional level)
      (interactive "p")
      (let (message-log-max
            (inhibit-message t))
        (if (= level 1)
            (pcase last-command
              ('hs-cycle
               (hs-hide-level 1)
               (setq this-command 'hs-cycle-children))
              ('hs-cycle-children
               ;; TODO: Fix this case. `hs-show-block' needs to be
               ;; called twice to open all folds of the parent
               ;; block.
               (save-excursion (hs-show-block))
               (hs-show-block)
               (setq this-command 'hs-cycle-subtree))
              ('hs-cycle-subtree
               (hs-hide-block))
              (_
               (if (not (hs-already-hidden-p))
                   (hs-hide-block)
                 (hs-hide-level 1)
                 (setq this-command 'hs-cycle-children))))
          (hs-hide-level level)
          (setq this-command 'hs-hide-level))))

    (defun hs-global-cycle ()
      (interactive)
      (pcase last-command
        ('hs-global-cycle
         (save-excursion (hs-show-all))
         (setq this-command 'hs-global-show))
        (_ (hs-hide-all))))    

    :bind (:map prog-mode-map
                (("C-<tab>" . hs-cycle)
                 ("S-C-<tab>" . hs-global-cycle)))
    
    :hook (prog-mode . hs-minor-mode))
#+end_src

* Python programming

#+begin_src emacs-lisp
(message "starting python modes")
#+end_src

** Notes

Here is a [[https://github.com/palantir/python-language-server#develop-against-vs-code][claim]] that the Python language server can be run "against" VS Code.
Debugger configurations for various languages are [[https://emacs-lsp.github.io/dap-mode/page/configuration/][here]].

** Python mode

Remove "guess indent" python message
#+begin_src emacs-lisp
  (use-package python
    :config
    (setq python-indent-guess-indent-offset-verbose nil))
#+end_src

** Environment variables

The [[https://github.com/wbolster/emacs-direnv][direnv]] package maintains a consistent set of environment variables depending on
which project the current buffer is in.
#+begin_src emacs-lisp
  (use-package direnv
    :disabled
    :ensure t
    :config
    (add-to-list 'warning-suppress-types '(direnv)))
#+end_src

** Virtual environments

#+begin_src emacs-lisp
  (use-package pythonic
    :ensure t)

  (use-package conda
     :ensure nil
     :after pythonic
     :load-path "lisp"
     :custom
       (conda-anaconda-home my-anaconda-dir)
       (conda-env-home-directory my-anaconda-dir)
       (conda-message-on-environment-switch nil)
     :config
       (conda-env-initialize-interactive-shells)
       (conda-env-initialize-eshell)
       (conda-env-autoactivate-mode 0)
       (add-hook 'find-file-hook
                 (lambda ()
                   (when (bound-and-true-p conda-project-env-path)
                     (conda-env-activate-for-buffer)))))
#+end_src

** Linting

Use [[https://github.com/joaotavora/eglot][Eglot]] with Pyright, a language server for Python.
#+begin_src emacs-lisp
  (use-package eglot
    :ensure t
    :after conda
    :defer t
    :hook (python-mode . eglot-ensure))
#+end_src

Documentation for flycheck [[https://www.flycheck.org][here]].
#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode)
    :bind (("M-n" . flycheck-next-error)
           ("M-p" . flycheck-previous-error)
           ("M-l" . flycheck-list-errors)))
#+end_src

Instructions [[https://github.com/intramurz/flycheck-eglot][here]].
#+begin_src emacs-lisp
  (use-package flycheck-eglot
    :ensure t
    :after (flycheck eglot)
    :config (global-flycheck-eglot-mode 1))
#+end_src

** Testing

My own modified version of the pytest package. The original doesn't work well
on Windows.
#+begin_src emacs-lisp
  (use-package pytest
    :ensure nil
    :demand
    :load-path "lisp"
    :custom
    (pytest-global-name "pytest")
    (pytest-cmd-flags "-x -s --disable-warnings")
    :bind (:map compilation-mode-map
                ("Q" . push-buffer-to-frame))
    :init
    (defun my-pytest-all (&optional flags)
      (interactive)
      (pytest-run nil flags)
      (other-window 1))
    (defun my-pytest-directory (&optional flags)
      (interactive)
      (pytest-run (file-name-directory buffer-file-name) flags)
      (other-window 1))
    (defun my-pytest-module (&optional flags)
      (interactive)
      (pytest-run buffer-file-name flags)
      (other-window 1))
    (defun my-pytest-one (&optional flags)
      (interactive)
      (pytest-run (format "%s" (pytest-py-testable)) flags)
      (other-window 1)))
#+end_src

*** Find monitor and frame attributes

Returns a modified version of an association list.
#+begin_src emacs-lisp
  (defun alist-modify (alist key value)
    "If KEY is found in ALIST, replace the old value for KEY with
  VALUE. If KEY is not found in ALIST, add KEY,VALUE to the result."
    (if (assq key alist)
        (mapcar
         (lambda (pair)
           (if (not (eq key (car pair))) pair (cons key value)))
         alist)
      (cons (cons key value) alist)))
#+end_src

Predicates for matching frame and monitor names.
#+begin_src emacs-lisp
  (defun my-pytest-frame-p (name-regexp &optional frame)
    "Test whether FRAME has name matching NAME-REGEXP."
    (let ((params (frame-parameters frame)))
      (string-match-p name-regexp (alist-get 'name params))))

  (defun my-pytest-monitor-p (name-regexp monitor-attrs)
    "Test whether MONITOR-ATTRS has name matching NAME-REGEXP."
    (string-match-p name-regexp (alist-get 'name monitor-attrs)))
#+end_src

Finds matching monitor attributes alists.
#+begin_src emacs-lisp
  (defun my-find-monitor-attributes-by-name (name-regexp)
    "Return the first set of monitor attributes found with name
  matching NAME-REGEXP. If NAME-REGEXP is blank or nil, return nil."
    (if (or (not name-regexp) (string-blank-p name-regexp))
        nil
      (car (seq-filter
            (apply-partially #'my-pytest-monitor-p name-regexp)
            (display-monitor-attributes-list)))))
#+end_src

Removes non-matching frames from a monitor attributes alist.
#+begin_src emacs-lisp
  (defun my-filter-frames-by-name (frame-name-regexp monitor-attrs)
    "Returns a modified monitor attributes alist with frames having
  names matching FRAME-NAME-REGEXP. All other frames are removed
  from `frames' list. MONITOR-ATTRS is the original monitor
  attributes alist."
    (let ((filtered-frames
           (seq-filter
            (apply-partially #'my-pytest-frame-p frame-name-regexp)
            (alist-get 'frames monitor-attrs))))
      (alist-modify monitor-attrs 'frames filtered-frames)))
#+end_src

Removes non-matching frames from all monitor attributes alists.
#+begin_src emacs-lisp
  (defun my-filter-all-frames-by-name (frame-name-regexp)
    "Return a list of monitor attribute alists with all frames having
  names not matching FRAME-NAME-REGEXP removed."
    (mapcar
     (apply-partially #'my-filter-frames-by-name frame-name-regexp)
     (display-monitor-attributes-list)))
#+end_src

*** Modify =popper='s display function

Keep =popper= from displaying *pytest* buffers.
#+begin_src emacs-lisp
  (defun my-popper-select-popup-at-bottom (buffer &optional alist)
    "Display and switch to popup-buffer BUFFER at the bottom of the screen,
  unless BUFFER is named '*pytest*'."
    (if (string-match-p "\\*pytest\\*" (buffer-name buffer))
        (progn
          (message "--- found a *pytest* buffer")
          (display-buffer-in-child-frame buffer alist))
      (popper-select-popup-at-bottom buffer alist)))
#+end_src

Set the =popper= display function.
#+begin_src emacs-lisp
  (popper-mode -1)
  (setq popper-display-function #'my-popper-select-popup-at-bottom)
  (popper-mode +1)
#+end_src

From [[https://e17i.github.io/articles-emacs-display-1/][Configuring the emacs display system]].
#+begin_src emacs-lisp
  (defun push-buffer-to-frame ()
    "push current window buffer to own frame and revert current window to previous frame."
    (interactive)
    (let ((current (current-buffer))
          (selected (selected-window)))
      (if (display-buffer-other-frame current)
          (quit-restore-window selected))))
#+end_src

From [[https://emacs.stackexchange.com/questions/60558/controlling-behaviour-of-compilation-window-creation][Controlling behavior of compilation window creation]].
#+begin_src emacs-lisp :tangle no
(setq display-buffer-alist
      `((,(rx bos
              (| (literal "*compilation")
                 (literal "*shell")
                 (literal "*eshell")
                 (literal "*Compile-Log")))
         display-buffer-in-direction
         (window .                      ;reference window
                 t) ;either `t' (selected window), `main', `root', or an arbitrary valid window
         (direction .
                    below)              ;`below' (window) or `bottom' (of frame)
         (window-height . 0.33)          ;absolute (10) or relative (0.3)
         )))
#+end_src

A Magit-like emacs interface to Pytest ([[https://github.com/wbolster/emacs-python-pytest][python-pytest]]).
#+begin_src emacs-lisp
  (use-package python-pytest
    :disabled
    :ensure t)
#+end_src

** Jupyter

#+begin_src emacs-lisp :tangle no
  (use-package jupyter
    :after (ob-jupyter ob-python)
    :config
    (setq jupyter-api-authentication-method 'password)
    (setq jupyter-eval-use-overlays nil)
    (setq org-babel-default-header-args:jupyter-python '((:session . "/jpy:localhost#8888:py")
                                                         (:kernel . "conda-env-edge-py")
                                                         (:async . "yes")
                                                         (:pandoc t)))
    (add-to-list 'savehist-additional-variables 'jupyter-server-kernel-names)
    (setq ob-async-no-async-languages-alist '("jupyter-python"))
    (add-to-list 'org-structure-template-alist '("j" . "src jupyter-python")))
#+end_src

* Julia programming

[[https://discourse.julialang.org/t/jupyter-integration-with-emacs/21496/5][Instructions]] from the Julia mailing list for installing Jupyter.
#+begin_src emacs-lisp :tangle no
  (use-package jupyter
    :ensure t)
#+end_src

* Shell modes

#+begin_src emacs-lisp
(message "starting shell modes")
#+end_src

Make =vterm= reuse windows. From Mastering Emacs, [[https://www.masteringemacs.org/article/demystifying-emacs-window-manager][Demystifying Emacs' Window Manager]].
#+begin_src emacs-lisp :tangle no
(add-to-list 'display-buffer-alist
     '("\\*vterm\\*" display-buffer-reuse-mode-window
       ;; change to `t' to not reuse same window
       (inhibit-same-window . nil)
       (mode vterm-mode vterm-copy-mode)))
#+end_src

** Notes

Installation [[https://github.com/akermu/emacs-libvterm/#requirements][instructions]] for [[https://github.com/akermu/emacs-libvterm][emacs-libvterm]]. Doesn't work for Windows.
Toggle between a buffer and vterm ([[https://github.com/akermu/emacs-libvterm/#requirements][vterm-toggle]]).

* Social media

** Mastodon

From Sacha Chua's configuration [[https://sachachua.com/dotemacs/index.html#mastodon][here]].
#+begin_src emacs-lisp
#+end_src
