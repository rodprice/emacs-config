#+TITLE: Minimal Emacs configuration
#+STARTUP: overview indent

* Preliminaries

All functions below use lexical binding.
#+begin_src emacs-lisp
;; -*- coding: utf-8; lexical-binding: t -*-
(message "... starting settings-minimal")
#+end_src

This configuration requires packages

  - expand-region
  - gnupg
  - mwim
  - popper
  - vscode-dark-plus-theme
  - which-key
  - whole-line-or-region

* Notes

Emacs 29 only: New user option 'calc-kill-line-numbering'.
Set it to nil to exclude line numbering from kills and copies.

* Defaults

#+begin_src emacs-lisp
(message "... starting defaults")
#+end_src

** Text

Character encodings default to utf-8. Xah Lee (bless his crooked
little heart) [[http://xahlee.info/emacs/emacs/emacs_convert_line_ending.html][says]] you should use =utf-8-unix= rather than =utf-8=.
#+begin_src emacs-lisp
  (prefer-coding-system 'utf-8)
  (set-language-environment 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
#+end_src

See [[https://emacs.stackexchange.com/questions/31282/unicodeencodeerror-executing-python-in-emacs-not-in-terminal][UnicodeEncodeError executing Python in Emacs]].
#+begin_src emacs-lisp
  (setenv "LANG" "en_US.UTF-8")
  (setenv "LC_ALL" "en_US.UTF-8")
  (setenv "LC_CTYPE" "en_US.UTF-8")
#+end_src

Sentences end with a single space.
#+begin_src emacs-lisp
  (setq sentence-end-double-space nil)
#+end_src

No CRLF auto-translation in '~/.emacs.d'. See the variable
[[help:w32-untranslated-filesystem-list][w32-untranslated-filesystem-list]].
#+begin_src emacs-lisp
  (when (eq system-type 'windows-nt)
    (w32-add-untranslated-filesystem
     (expand-file-name user-emacs-directory)))
#+end_src

Always insert spaces, never tab characters.
#+begin_src emacs-lisp
   (setq-default indent-tabs-mode nil)
#+end_src

Truncate long lines everywhere.
#+begin_src emacs-lisp
  (global-visual-line-mode 0)
  (setq-default truncate-lines t)
#+end_src

Delete trailing whitespace before save.
#+begin_src emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
  (setq require-final-newline t)
#+end_src

Highlight current line.
#+begin_src emacs-lisp
  (global-hl-line-mode t)
#+end_src

** Keyboard

Use TeX '\alpha' to enter TeX characters such as 'Î±' easily. Run
[[help:toggle-input-method][toggle-input-method]], bound to 'C-\', to turn this off.
#+begin_src emacs-lisp
  (set-input-method 'TeX)
#+end_src

Use Windows modifier keys in emacs. See help for function
[[help:w32-register-hot-key][w32-register-hot-key]] to bind key chords. See also Xah Lee's
(bless his crooked little heart) [[http://xahlee.info/emacs/emacs/emacs_hyper_super_keys.html][guide]].
#+begin_src emacs-lisp
  (when (eq system-type 'windows-nt)
    ;; Left and right Windows keys map to 'super'
    (setq w32-pass-lwindow-to-system nil)
    (setq w32-lwindow-modifier 'super)
    (setq w32-pass-rwindow-to-system nil)
    (setq w32-rwindow-modifier 'super)
    ;; Menu/App key maps to 'hyper'
    (setq w32-pass-apps-to-system nil)
    (setq w32-apps-modifier 'hyper))
#+end_src

** Clipboard

Use the system clipboard.
#+begin_src emacs-lisp
  (setq select-enable-clipboard t
        select-enable-primary t
        save-interprogram-paste-before-kill t
        mouse-yank-at-point t)
#+end_src

** File locations

Make emacs open files in a reasonable directory by default.
#+begin_src emacs-lisp
  (setq default-directory (getenv "HOME"))
#+end_src

[[http://stackoverflow.com/questions/151945/how-do-i-control-how-emacs-makes-backup-files][Backup file configuration]].
#+begin_src emacs-lisp
  (setq delete-old-versions t
        kept-new-versions 2
        kept-old-versions 2
        version-control t)
#+end_src

File locations for custom settings.
#+begin_src emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (unless (file-exists-p custom-file)
    (custom-save-all))                   ; Create new, empty custom file
  (load custom-file)
#+end_src

File location for saving cursor state.
#+begin_src emacs-lisp
  (require 'saveplace)
  (setq save-place-file (concat user-emacs-directory "places"))
#+end_src

File location for backups.
#+begin_src emacs-lisp
  (let ((filename (concat user-emacs-directory "backups")))
    (setq backup-directory-alist (list `("." . ,filename))))
#+end_src

Info directory locations. On Windows, for no apparent reason, the
Emacs manual and all the other defaults vanished from the top-level
info node. This puts the defaults back in. Use this only if you are
running the Emacs for Windows downloaded from the [[https://www.gnu.org/software/emacs/download.html][GNU website]].
#+begin_src emacs-lisp
  (when (and
         (eq system-type 'windows-nt)
         (not (string= system-configuration "x86_64-w64-mingw32")))
    (use-package info
      :commands Info-default-dirs
      :init
      (dolist (dir (Info-default-dirs))
        (when (file-directory-p dir)
          (add-to-list 'Info-directory-list dir t)))))
#+end_src

See this StackExchange [[https://emacs.stackexchange.com/a/51396][answer]] for details on MSYS2 behavior with
respect to INFOPATH. It's an [[https://github.com/msys2/MINGW-packages/issues/631][MSYS2 bug]]. First reported in 2015, it's
still not fixed. The following should be run in whichever MSYS2
shell this copy of Emacs is installed in.
#+begin_src shell :tangle no
  for f in $MINGW_PREFIX/share/info/* ;
    do install-info $f $MINGW_PREFIX/share/info/dir ;
  done
#+end_src

** Buffer defaults

Add options to kill or revert buffer when prompted to save a buffer.
From this [[https://github.com/svend/dot-emacsd][config]].
#+begin_src emacs-lisp
  (add-to-list
   'save-some-buffers-action-alist
   '(?k
     (lambda (buf)
       (kill-buffer buf))
     "kill this buffer"))
  (add-to-list
   'save-some-buffers-action-alist
   '(?r
     (lambda (buf)
       (save-current-buffer
         (set-buffer buf)
         (revert-buffer t t t)))
     "revert this buffer"))
#+end_src

** Time zones

Set time zones displayed by [[help:world-clock][world-clock]]. A list of time zones is [[https://timezonedb.com/time-zones][here]].
Another list, with legacy abbreviations, is [[https://en.wikipedia.org/wiki/List_of_tz_database_time_zones][here]]. Windows requires
the legacy Posix format, while Linux, etc. use the zoneinfo format.

#+begin_src emacs-lisp
  (if (eq system-type 'windows-nt)
      (setq legacy-style-world-list
            '(("UTC0" "UTC")
              ("MST7MDT" "Denver")         ;; UTC-06:00
              ("EST5EDT" "Fairfax")        ;; UTC-04:00
              ("GMT0BST" "London")))       ;; UTC+01:00
    (setq world-clock-list
          '(("UTC0" "UTC")
            ("America/Denver" "Denver")    ;; UTC-06:00
            ("America/New_York" "Fairfax") ;; UTC-04:00
            ("Europe/London" "London"))))  ;; UTC+01:00
#+end_src

* GUI elements

#+begin_src emacs-lisp
(message "... starting gui elements")
#+end_src

** Menu bar, tool bar, scroll bars

Keep menu bar, drop toolbar and scroll bars.
#+begin_src emacs-lisp
     (setq inhibit-startup-message t)
     ;;  (menu-bar-mode -1)
     (when (fboundp 'tool-bar-mode)
       (tool-bar-mode -1))
     (when (fboundp 'scroll-bar-mode)
       (scroll-bar-mode -1))
     (when (fboundp 'horizontal-scroll-bar-mode)
       (horizontal-scroll-bar-mode -1))
     (setq visible-bell t)
#+end_src

Show line numbers on the left.
#+begin_src emacs-lisp
  (global-display-line-numbers-mode 1)
#+end_src

Smooth scrolling.
#+begin_src emacs-lisp
  (pixel-scroll-mode)
#+end_src

#+begin_src emacs-lisp
     ;; (require 'paren)
     ;; (setq show-paren-style 'parenthesis)
     ;; (show-paren-mode 1)
#+end_src

** Frame titles

Display buffer information in frame titles. ([[https://github.com/malb/emacs.d/blob/master/malb.org#frame-title][source]])
#+begin_src emacs-lisp
  (defun my-emacs-version ()
    "Returns a shortened Emacs name and version string."
    (let ((ls (split-string (emacs-version) " ")))
      (substring
       (format "%s" `(,(car ls) ,(cadr ls) ,(caddr ls)))
       1
       -1)))

  (defun my-conda-env-current-name ()
    "Returns the name of the current conda environment."
    (if (bound-and-true-p conda-env-current-name)
        (concat " - Conda: " conda-env-current-name)
      ""))

  (defun my-git-branch-name ()
    "Returns the name of the current git branch."
    (if vc-mode
        (concat " -" (substring-no-properties vc-mode))
      ""))

  (defun my-project-name ()
    "Returns the name of the current project."
    (if (not (featurep 'project))
        ""
      (let ((project (project-current)))
        (if (null project)
            ""
          (format " - Project: %s"
                  (my-project-name-function project))))))

  ;; Emacs 28 has no function 'project-name. Emacs 29 does.
  (defun my-project-name-function (project)
    "A human-readable name for the project."
    (if (fboundp 'project-name)
        (project-name project)
      (file-name-nondirectory
       (directory-file-name
        (project-root project)))))

  (setq frame-title-format
        '(""
          (:eval (replace-regexp-in-string "^ +" "" (my-emacs-version)))
          ;; (:eval (my-conda-env-current-name))
          (:eval (my-project-name))))
#+end_src

** Mode line

#+begin_src emacs-lisp
     (require 'uniquify)
     (setq uniquify-buffer-name-style 'forward)
     ;; Display the column number in the mode line
     (setq column-number-mode t)
#+end_src

#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src

** Minibuffer

#+begin_src emacs-lisp :tangle no
  (setq max-mini-window-height 6)
#+end_src

** Visual bell

Use visual bell.
#+begin_src emacs-lisp
  (setq visual-bell t)
#+end_src

Don't ring the bell for these common events.
#+begin_src emacs-lisp
  (setq ring-bell-function
        (lambda ()
          (unless
              (memq this-command
                    '(abort-recursive-edit
                      isearch-abort
                      isearch-printing-char
                      keyboard-quit
                      nil))
            (ding))))
#+end_src

* Fonts

#+begin_src emacs-lisp
(message "... starting fonts")
#+end_src

** Set the default font

#+begin_src emacs-lisp
    (defun my-font-in-family-p (font-family)
      "True iff the current frame's font is in font-family."
      (let ((font-name (cdr (assoc 'font default-frame-alist))))
        (string-prefix-p (downcase font-family) (downcase font-name))))
#+end_src

  The default font can also be set in the site-specific preload file.
#+begin_src emacs-lisp
    (unless (boundp 'my-default-font)
      (defvar my-default-font "Fira Code-11"))
    (add-to-list 'default-frame-alist `(font . ,my-default-font))
    (set-face-font 'default my-default-font)
#+end_src

** Use ligatures if available

#+begin_src emacs-lisp :tangle no
    (use-package ligature
      :if (or (my-font-in-family-p "Fira Code")
              (my-font-in-family-p "JuliaMono"))
      :ensure t
      :config
      ;; JuliaMono (https://juliamono.netlify.app/) supports the following small set of ligatures
      (if (my-font-in-family-p "JuliaMono")
          (let ((ligs '("->" "=>" "|>" "<|" "::" "<--" "-->" "<-->")))
            (ligature-set-ligatures 'prog-mode ligs)
            (ligature-set-ligatures 'org-mode ligs)))
      (if (my-font-in-family-p "Fira Code")
          (progn
            (require 'fira-code-mode)
            (ligature-set-ligatures 'prog-mode fira-code-mode--ligatures)
            (ligature-set-ligatures 'org-mode fira-code-mode--ligatures)))

      ;; Enables ligature checks globally in all buffers. You can also do it
      ;; per mode with `ligature-mode'.
      (global-ligature-mode t))
#+end_src

** Insert Greek letters, etc

[[help:prettify-symbols-mode][prettify-symbols-mode]] can render Greek letters, etc. Doing [[http://endlessparentheses.com/new-in-emacs-25-1-have-prettify-symbols-mode-reveal-the-symbol-at-point.html][this]]
allows you to see the original text. See also [[http://endlessparentheses.com/using-prettify-symbols-in-clojure-and-elisp-without-breaking-indentation.html][here]] and [[http://endlessparentheses.com/improving-latex-equations-with-font-lock.html][here]].
#+begin_src emacs-lisp :tangle no
  (setq prettify-symbols-unprettify-at-point 'right-edge)
#+end_src

* Themes

#+begin_src emacs-lisp
(message "... starting themes")
#+end_src

#+begin_src emacs-lisp
  (use-package vscode-dark-plus-theme
    :ensure t
    :config
    (load-theme 'vscode-dark-plus t)
    (setq face-remapping-alist
          `((show-paren-match
             . (:weight bold
                :foreground "#ecbc9c"))
            (show-paren-mismatch
             . (:strike-through t
                :foreground "#cc6666"))
            (sp-show-pair-match-face
             . (:weight bold
                :foreground "#ecbc9c"))
            (sp-show-pair-mismatch-face
             . (:strike-through t
                :foreground "#cc6666"))
            (comint-highlight-input
             . (:foreground "cornflower blue"
                :weight normal))
            (font-lock-function-name-face
             . (:foreground "#4ec9b0"
                :weight normal))
            (font-lock-keyword-face
             . (:foreground "cornflower blue"
                :weight normal))
            (font-lock-variable-name-face
             . (:foreground "#f0c674"))
            (lsp-face-highlight-read
             . (:underline t
                :background nil
                :foreground nil))
            (lsp-face-highlight-textual
             . (:underline t
                :background nil
                :foreground nil))
            (lsp-face-highlight-write
             . (:underline t
                :background nil
                :foreground nil))
            (lsp-ui-peek-highlight
             . (:inherit nil
                :background nil
                :foreground nil
                :weight semi-bold
                :box (:line-width -1)))
            (org-block
             . (:extend t
                :background "gray12"
                :foreground "#e8e8e8"))
            (org-block-begin-line
             . (:extend t
                :background "gray12"
                :foreground "gray40"))
            (org-tree-slide-heading-level-1
             . (:height 1.8
                :weight bold))
            (org-tree-slide-heading-level-2
             . (:height 1.5
                :weight bold))
            (org-tree-slide-heading-level-3
             . (:height 1.5
                :weight bold))
            (org-tree-slide-heading-level-4
             . (:height 1.5
                :weight bold)))))
#+end_src

* Editing

#+begin_src emacs-lisp
(message "... starting editing")
#+end_src

** Search

#+begin_src emacs-lisp
  (global-set-key (kbd "C-s") 'isearch-forward-regexp)
  (global-set-key (kbd "C-r") 'isearch-backward-regexp)
  (global-set-key (kbd "C-M-s") 'isearch-forward)
  (global-set-key (kbd "C-M-r") 'isearch-backward)
  (global-set-key (kbd "C-c r") 'rgrep)
#+end_src

** Line wrapping

#+begin_src emacs-lisp
  (global-set-key (kbd "C-c q") 'auto-fill-mode)
#+end_src

** Join, open, or transpose lines

#+begin_src emacs-lisp
  (global-set-key (kbd "C-;") 'my-insert-semicolon)
  (global-set-key (kbd "M-j") 'my-join-lines)
  (global-set-key (kbd "C-o") 'open-next-line)
  (global-set-key (kbd "M-o") 'open-previous-line)
  (global-set-key (kbd "C-t") 'transpose-next-line)
  (global-set-key (kbd "M-t") 'transpose-previous-line)
#+end_src

** Camel case

#+begin_src emacs-lisp
  (global-set-key (kbd "M-c") 'toggle-camelcase-underscores)
#+end_src

** Cursor movement

Documentation is [[https://github.com/alezost/mwim.el][here]].
#+begin_src emacs-lisp
  (use-package mwim
    :ensure t
    :bind
    (("C-a" . mwim-beginning-of-code-or-line)
     ("<home>" . mwim-beginning-of-code-or-line)
     ("C-e" . mwim-end-of-code-or-line)
     ("<end>" . mwim-end-of-code-or-line))
    :pin melpa)
#+end_src

#+begin_src emacs-lisp
  (global-set-key (kbd "M-<") 'scroll-row-up)
  (global-set-key (kbd "M->") 'scroll-row-down)
  (global-set-key (kbd "C-<") 'xah-backward-block)
  (global-set-key (kbd "C->") 'xah-forward-block)
  (global-set-key (kbd "M-<up>") 'scroll-row-up)
  (global-set-key (kbd "M-<down>") 'scroll-row-down)
#+end_src

Move point to mark efficiently ([[http://endlessparentheses.com/faster-pop-to-mark-command.html][Faster pop-to-mark command]]). See also
[[https://www.masteringemacs.org/article/fixing-mark-commands-transient-mark-mode][Fixing the mark commands in transient-mark-mode]].
#+begin_src emacs-lisp
  (advice-add 'pop-to-mark-command :around #'modi/multi-pop-to-mark)
#+end_src

** Mouse

Make right-click bring up [[info:Emacs#imenu][Imenu]].
#+begin_src emacs-lisp
  (use-package imenu
    :bind
    (("<mouse-3>" . imenu)))
#+end_src

** Bookmarks

The [[help:visible-mode][visible-mode]] bookmarks package, described [[https://pragmaticemacs.wordpress.com/2016/07/22/use-visible-bookmarks-to-quickly-jump-around-a-file/][here]].
#+begin_src emacs-lisp
  (use-package bm
    :ensure t
    :config
    (add-to-list 'display-buffer-alist
                 '("\\*bm-bookmarks\\*"
                   (display-buffer-at-bottom)
                   (window-height . fit-window-to-buffer)))
    (setq bm-marker 'bm-marker-right)
    (setq bm-in-lifo-order t)
    (setq bm-highlight-style 'bm-highlight-only-fringe)
    :bind (("<f2>" . bm-toggle)
           ("C-<f2>" . bm-next)
           ("S-<f2>" . bm-previous)
           ("C-S-<f2>" . bm-show-all)
           ("<left-fringe> <mouse-5>" . bm-next-mouse)
           ("<left-fringe> <mouse-4>" . bm-previous-mouse)
           ("<left-fringe> <mouse-1>" . bm-toggle-mouse)))
#+end_src

#+begin_src emacs-lisp
  (use-package bookmark
    :custom
    (bookmark-save-flag 1)
    :config
    (bookmark-bmenu-list))
#+end_src

** Parentheses

#+begin_src emacs-lisp :tangle no
  (electric-pair-mode 1)
#+end_src

** Structured editing (disabled)

[[https://github.com/AmaiKinono/puni][Puni]] is a minor mode for structured editing.

| Command                   | Default keybinding |
|---------------------------+--------------------|
| puni-forward-delete-char  | C-d                |
| puni-backward-delete-char | DEL                |
| puni-forward-kill-word    | M-d                |
| puni-backward-kill-word   | M-DEL              |
| puni-kill-line            | C-k                |
| puni-backward-kill-line   | C-S-k              |

Use puni-mode only for certain major modes.
#+begin_src emacs-lisp :tangle no
  (use-package puni
    :ensure t
    :defer t
    :hook ((prog-mode
            sgml-mode
            nxml-mode
            tex-mode
            eval-expression-minibuffer-setup
            ) . puni-mode))
#+end_src

** Mark ring

Move through the mark ring with =C-u C-SPC C-SPC= etc.
#+begin_src emacs-lisp
  (setq set-mark-command-repeat-pop t)
#+end_src

Empty the mark ring if it gets too messy.
#+begin_src emacs-lisp
  (defun empty-mark-ring (arg)
      "Empty the mark ring, leaving only the current position of point.
  If the prefix argument is non-nil, empty the global mark ring,
  leaving the only the position of point on the global mark ring."
      (interactive "P")
      (if (null arg)
          (progn
            (setq-local mark-ring (list (point-marker)))
            (message "Emptied mark ring for buffer %s" (buffer-name)))
        (setq global-mark-ring (list (point-marker)))
        (message "Emptied global mark ring.")))
  (global-set-key (kbd "M-SPC") 'empty-mark-ring)
#+end_src

** Spelling

Use =hunspell= for spell checking. See [[https://lucidmanager.org/productivity/emacs-windows/][here]]. Dictionary downloads start
[[http://app.aspell.net/create][here]].
#+begin_src emacs-lisp
  (use-package ispell
    :ensure nil
    :bind ("M-#" . dictionary-lookup-definition))
#+end_src

Tweaks from Mastering Emacs, [[https://www.masteringemacs.org/article/wordsmithing-in-emacs][Wordsmithing in Emacs]].
#+begin_src emacs-lisp :tangle no
  (use-package ispell
    :ensure nil
    :bind ("M-#" . dictionary-lookup-definition)
    :init
    (setq switch-to-buffer-obey-display-actions t)
    (add-to-list 'display-buffer-alist
                 '("^\\*Dictionary\\*" display-buffer-in-side-window
                   (side . bottom)
                   (window-height . 30))))
#+end_src

Find the spelling program, if installed.
#+begin_src emacs-lisp :tangle no
  (let ((aspell-exe (if (eq system-type 'windows-nt)
                        (executable-find "hunspell.exe")
                      (executable-find "aspell"))))
    (if aspell-exe
        (setq-default ispell-program-name aspell-exe)
      (user-error "Could not find an aspell executable on exec-path")))
#+end_src

Correct typos automatically. See [[https://www.masteringemacs.org/article/correcting-typos-misspellings-abbrev][Correcting Typos and Misspellings with Abbrev]].
#+begin_src emacs-lisp
  (setq-default abbrev-mode t)
#+end_src

** Regions

Kill or yank entire lines. Github repo [[https://github.com/purcell/whole-line-or-region][here]].
#+begin_src emacs-lisp
  (use-package whole-line-or-region
    :ensure t
    :hook (emacs-startup . whole-line-or-region-global-mode))
#+end_src

Expand or contract the region by sexp ([[https://github.com/magnars/expand-region.el][expand-region.el]])
#+begin_src emacs-lisp
  (use-package expand-region
    :ensure t
    :config
    :bind (("C-=" . er/expand-region)
           ("M-=" . er/contract-region)))
#+end_src

** Which-key package

Configuration from [[https://github.com/daviwil/emacs-from-scratch/blob/master/Emacs.org][Emacs from scratch]]. Source code and README is [[https://github.com/justbur/emacs-which-key][here]].
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :defer 0
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 1))
#+end_src

* Window management

#+begin_src emacs-lisp
(message "... starting window management")
#+end_src

** Save the cursor position

#+begin_src emacs-lisp
    (require 'saveplace)
    (setq-default save-place t)
#+end_src

** Desktop mode

Note: Doesn't work with emacsclient. See StackExchange [[https://emacs.stackexchange.com/questions/8147/using-desktop-mode-with-emacs-daemon][Using desktop-mode with emacsclient]]
and the last paragraph of [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Saving-Emacs-Sessions.html#Saving-Emacs-Sessions][Saving Emacs Sessions]] in the Emacs manual.

Restore emacs' windows and buffers ([[https://bmag.github.io/2015/12/26/desktop.html][Desktop-Save Mode]] and [[https://www.emacswiki.org/emacs/Desktop][Emacs wiki]]).
#+begin_src emacs-lisp
  (if (daemonp)
      (add-hook 'server-after-make-frame-hook #'desktop-read)
    (add-hook 'window-setup-hook #'desktop-read))
  (setq desktop-save t)  ;; always save
  (desktop-save-mode)
#+end_src

The option 'desktop-load-locked-desktop' can now be set to the value
'check-pid', which means to allow loading a locked ".emacs.desktop"
file if the Emacs process which locked it is no longer running on the
local machine.  This allows avoiding questions about locked desktop
files when the Emacs session which locked it crashes, or was otherwise
interrupted and didn't exit gracefully.
#+begin_src emacs-lisp
  (when (>= emacs-major-version 29)
    (setq desktop-load-locked-desktop 'check-pid))
#+end_src

Variable [[help:desktop-buffer-mode-handlers][desktop-buffer-mode-handlers]]. Default is [[help:desktop-restore-file-buffer][desktop-restore-file-buffer]].

#+begin_src emacs-lisp
  (defun my-desktop-after-read-hook ()
    (message "--- Running `desktop-after-read-hook'")
    (list-buffers))
#+end_src

#+begin_src emacs-lisp
(message "--- settings-minimal: entering desktop config")
#+end_src

#+begin_src emacs-lisp :tangle no
  (use-package desktop
    :preface
    (defun my-restore-desktop (frame)
      "Restores desktop and cancels hook after first frame opens.
    So the daemon can run at startup and it'll still work."
      (with-selected-frame frame
        (desktop-save-mode 1)
        (desktop-read)
        ;; TODO Read the docs for `after-make-frame-functions'
        (remove-hook 'after-make-frame-functions 'my-restore-desktop)))
    :defer t
    :config
    ;; (add-to-list 'desktop-buffer-mode-handlers ...)
    ;; (add-to-list 'desktop-files-not-to-save ...)
    ;; (add-to-list 'desktop-modes-not-to-save ...)
    ;; (add-to-list 'desktop-globals-to-save ...)
    ;; (add-to-list 'desktop-clear-preserve-buffers ...)
    ;; (add-to-list 'desktop-globals-to-clear ...)
    ;; (add-to-list 'desktop-locals-to-save ...)
    ;; (setq desktop-restore-forces-onscreen nil)
    (if (daemonp)
        (add-hook 'server-after-make-frame-hook #'desktop-read)
      (add-hook 'window-setup-hook #'desktop-read))
    (setq desktop-save t)  ;; always save
    (desktop-save-mode 1)
    (add-hook 'after-make-frame-functions 'my-restore-desktop)
    :hook
    ((desktop-after-read . #'my-desktop-after-read-hook)))
#+end_src

** Window movement

#+begin_src emacs-lisp
  ;; (global-set-key (kbd "C-x p") 'my-rearrange-windows)
#+end_src

** Window and frame selection

See [[https://www.masteringemacs.org/article/demystifying-emacs-window-manager][Demystifying emacs' window manager]].
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-o") 'other-frame)
  (unless (< emacs-major-version 27)
    (setq switch-to-buffer-obey-display-actions t))
#+end_src

** Popup windows

#+begin_src emacs-lisp
(message "--- settings-minimal: entering popper config")
#+end_src

Manage popup windows ([[https://github.com/karthink/popper][popper.el]])
#+begin_src emacs-lisp
  (use-package popper
    :ensure t
    :demand t
    :commands popper-popup-p
    :bind (("C-`"   . popper-toggle-latest)
           ("M-`"   . popper-cycle)
           ("C-M-`" . popper-toggle-type))
    :config
    ;; (require 'popper)
    (setq popper-reference-buffers
          '("\\*Messages\\*"
            "Output\\*$"
            "\\*Async Shell Command\\*"
            "\\*Shell Command Output\\*"
            "\\*grep\\*"
            "\\*Backtrace\\*"
            "\\*Completions\\*"
            "\\*Flycheck errors\\*"
            "^\\*Shortdoc"
            "\\*Apropos\\*"
            "^\\*eldoc"
            "\\*xref\\*"
            "\\*wclock\\*"
            "\\*shell\\*"
            "\\*PowerShell\\*"
            "\\*Shell Errors\\*"
            "\\*Tidy Error Buffer\\*"
            "\\*Pyinspect:"
            "\\*Find\\*"
            ("\\*Quail Completions\\*" . hide)
            ("\\*Compile-Log\\*" . hide)
            ("\\*Warnings\\*" . hide)
            compilation-mode
            "^\\*eshell.*\\*$"
            eshell-mode
            "^\\*shell.*\\*$"
            shell-mode
            "^\\*term.*\\*$"
            term-mode
            "^\\*vterm.*\\*$"
            vterm-mode
            help-mode
            ;; todo-mode
            ;; todo-archive-mode
            ;; todo-filtered-items-mode
            compilation-mode))
    (when (eq system-type 'windows-nt)
      (setq popper-window-height 32))
    (setq popper-display-control t)
    (setq switch-to-buffer-obey-display-actions t)
    (popper-mode +1)
    (popper-echo-mode +1)
    )
#+end_src

#+begin_src emacs-lisp :tangle no
  (defun my-respect-shackle-rules (buffer)
    "If BUFFER is managed by `popper', return `t'."
    (message "--- checking buffer %s" buffer)
    (let ((managed  (not (null (popper-popup-p buffer)))))
      (message "--- managed is '%s'" managed)
      managed))
#+end_src

#+begin_src emacs-lisp
  (defun my-respect-shackle-rules (buffer)
    "If BUFFER is managed by `popper', return `t'."
    (not (null (popper-popup-p buffer))))
#+end_src

#+begin_src emacs-lisp
  (defun my-list-popup-buffers ()
    ""
    (let* ((buffers (buffer-list))
           (popup? (mapcar #'popper-popup-p buffers)))
      (mapcar* #'cons popup? buffers)))
#+end_src

#+begin_src emacs-lisp
  (defun my-custom-shackle-action (buffer-or-name alist plist)
    ""
    (message "--- running my-custom-shackle-action")
    (message "--- buffer-or-name is %s" buffer-or-name)
    (message "--- alist is %s" alist)
    (message "--- plist is %s" plist))
#+end_src

Set rules for popup windows ([[https://depp.brause.cc/shackle/][shackle.el]]).
#+begin_src emacs-lisp :tangle no
  (use-package shackle
    :ensure t
    :demand t
    :config
    (setq shackle-rules '(("*pytest*"
                           :custom my-pytest-popper-display-frame)
                          ((:custom my-respect-shackle-rules)
                           :popup t :align 'below :size 0.35 :select t)))
    (setq shackle-default-rule '(:select t))
    (shackle-mode 1))
#+end_src

* Todo lists

#+begin_src emacs-lisp
(message "--- settings-minimal: entering todo lists config")
#+end_src

#+begin_src emacs-lisp
  (use-package todo-mode
    :ensure nil
    :init
    (add-to-list 'display-buffer-alist
                 '(my-todo-mode-p
                   display-buffer-at-bottom
                   (window-height . fit-window-to-buffer)))
    :bind
    (("C-c t" . todo-show)
     ("C-c j" . todo-jump-to-category)))
#+end_src

#+begin_src emacs-lisp
  (defun my-todo-mode-p (&optional buffer)
    "Returns the major mode of BUFFER if it is one of the `todo`
  modes; otherwise returns nil."
    (let ((buf (if buffer buffer (current-buffer))))
      (with-current-buffer buf
        (when (memq major-mode '(todo-mode
                                 todo-archive-mode-map
                                 todo-filtered-items-mode))
          major-mode))))
#+end_src

* Debugging

Show a window with certain buffer-local variables and other
information about the current buffer.
#+begin_src emacs-lisp
  (use-package my-local-vars
    :load-path "lisp"
    :after origami
    :bind (("<f7>" . my-local-vars-show)))
#+end_src

* Encryption

Set up encrypted password storage. See the section "Storing
Credentials with the Auth Source Package" in the article [[https://www.masteringemacs.org/article/keeping-secrets-in-emacs-gnupg-auth-sources][Keeping
Secrets in Emacs]]. See also [[info:auth#Top][auth-sources]].
#+begin_src emacs-lisp
  (setq auth-sources
        '((:source "~/.emacs.d/secrets/.authinfo.gpg")))
#+end_src

* Notes

[[https://lucidmanager.org/productivity/more-productive-with-emacs/][More Productive with Emacs]] is a series of articles on Emacs. Here's the list:

    Getting Started with Emacs
    Configure Emacs
    Emacs Completion System
    Ricing Org mode
    Distraction-Free Writing
    Taking Notes with Org-Roam
    Manage your literature with Emacs BibTeX Mode
    Bibliographic notes with Denote and Citar
    Writing Articles and Books with Org Mode
    Create Websites
    Getting Things Done
    Manage files with dired
    Manage images with image-dired
    Read RSS feeds with Elfeed
    Play Music with the Emacs Multimedia System
    Using Emacs on a Chromebook

    [[https://xenodium.com/modern-elisp-libraries/][Modern elisp libraries]]: reference to elisp utilities/libraries.
