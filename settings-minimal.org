#+TITLE: Minimal Emacs Configuration
#+STARTUP: overview indent

* Character encodings
   
   Character encodings default to utf-8.
   #+BEGIN_SRC emacs-lisp
     (prefer-coding-system 'utf-8)
     (set-language-environment 'utf-8)
     (set-default-coding-systems 'utf-8)
     (set-terminal-coding-system 'utf-8)
     (set-selection-coding-system 'utf-8)
   #+END_SRC
   
* Tabs
   
   Always insert spaces, never tab characters.
   #+BEGIN_SRC emacs-lisp
     (setq-default indent-tabs-mode nil)
   #+END_SRC

* Clipboard
   
   Use the system clipboard.
   #+BEGIN_SRC emacs-lisp
     (setq select-enable-clipboard t
           select-enable-primary t
           save-interprogram-paste-before-kill t
           mouse-yank-at-point t)
   #+END_SRC
   
* File locations
   
   Make emacs open files in a reasonable directory by default.
   #+BEGIN_SRC emacs-lisp
     (setq default-directory (getenv "HOME"))
   #+END_SRC
   
   [[http://stackoverflow.com/questions/151945/how-do-i-control-how-emacs-makes-backup-files][Backup file configuration]].
   #+BEGIN_SRC emacs-lisp
     (setq delete-old-versions t
           kept-new-versions 2
           kept-old-versions 2
           version-control t)
   #+END_SRC
   
   File locations for custom settings.
   #+BEGIN_SRC emacs-lisp
     (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
     (unless (file-exists-p custom-file)
       (custom-save-all))                   ; Create new, empty custom file
     (load custom-file)
     (require 'saveplace)
     (setq save-place-file (concat user-emacs-directory "places")
           backup-directory-alist `(("." . ,(concat user-emacs-directory
                                                    "backups"))))
   #+END_SRC

* GUI elements

   Keep menu bar, drop toolbar and scroll bars.
   #+BEGIN_SRC emacs-lisp
     (setq inhibit-startup-message t)
     ;;  (menu-bar-mode -1)
     (when (fboundp 'tool-bar-mode)
       (tool-bar-mode -1))
     (when (fboundp 'scroll-bar-mode)
       (scroll-bar-mode -1))
     (when (fboundp 'horizontal-scroll-bar-mode)
       (horizontal-scroll-bar-mode -1))
     (setq visible-bell t)
   #+END_SRC

   Show line numbers on the left.
   #+BEGIN_SRC emacs-lisp
     (global-linum-mode t)
   #+END_SRC

   #+begin_src emacs-lisp
     ;; (require 'paren)
     ;; (setq show-paren-style 'parenthesis)
     ;; (show-paren-mode 1)
   #+end_src

   Display buffer name in frame titles. ([[https://github.com/malb/emacs.d/blob/master/malb.org#frame-title][source]])
   #+begin_src emacs-lisp

       (defun my-emacs-version ()
         "Returns a shortened Emacs name and version string."
         (let ((ls (split-string (emacs-version) " ")))
           (substring
            (format "%s" `(,(car ls) ,(cadr ls) ,(caddr ls)))
            1
            -1)))

       (defun my-conda-env-current-name ()
         "Returns the name of the current conda environment."
         (if (bound-and-true-p conda-env-current-name)
             (concat " - Conda: " conda-env-current-name)
           ""))

       (defun my-git-branch-name ()
         "Returns the name of the current git branch."
         (if vc-mode
             (concat " -" (substring-no-properties vc-mode))
           ""))

       (setq frame-title-format
             '(""
               (:eval (replace-regexp-in-string "^ +" "" (my-emacs-version)))
               (:eval (my-conda-env-current-name))
               (:eval (my-git-branch-name))))
   #+end_src

* Mode line
   
   #+BEGIN_SRC emacs-lisp
     (require 'uniquify)
     (setq uniquify-buffer-name-style 'forward)
     ;; Display the column number in the mode line
     (setq column-number-mode t)
   #+END_SRC
   
* IDO mode

   #+BEGIN_SRC emacs-lisp
     (require 'ido)
     (ido-mode t)
     (setq ido-enable-flex-matching t
           ido-auto-merge-work-directories-length -1
           ;; Control the window in which Emacs visits a new file
           ido-default-file-method 'selected-window
           ;; Don't pop up window of completions
           ido-cannot-complete-command 'ido-next-match)
   #+END_SRC

* Help and Info files

  See [[See https://www.gnu.org/software/emacs/manual/html_node/efaq/Installing-Texinfo-documentation.html][Installing TeXinfo documents]].
  #+BEGIN_SRC emacs-lisp
    ;; When opening a help window, always select the new help window
    (setq help-window-select t)
    (require 'info)
    (info-initialize)                      ; populate Info-directory-list
    (require 'apropos)
    (setq apropos-do-all t)                ; apropos searches more extensively
  #+END_SRC

* Grepping

   Put the cursor in the results window after a grep.
   #+BEGIN_SRC emacs-lisp
     (defun my-other-other-window (&rest r)
       (message "Executing my-other-window after rgrep...")
       (other-window 1))
     (advice-add 'rgrep :after 'my-other-other-window)
   #+END_SRC

* Key bindings
** Prerequisites

  #+BEGIN_SRC emacs-lisp
    (require 'my-functions)
  #+END_SRC

** Completions

  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "M-/") 'hippie-expand)
  #+END_SRC

** Switch buffers

  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-x C-b") 'ibuffer)
  #+END_SRC
  
** Search

  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-s") 'isearch-forward-regexp)
    (global-set-key (kbd "C-r") 'isearch-backward-regexp)
    (global-set-key (kbd "C-M-s") 'isearch-forward)
    (global-set-key (kbd "C-M-r") 'isearch-backward)
    (global-set-key (kbd "C-c r") 'rgrep)
  #+END_SRC
  
** Line wrapping

  #+BEGIN_SRC emacs-lisp
        (global-set-key (kbd "C-c q") 'auto-fill-mode)
  #+END_SRC

** Join, open, or transpose lines

  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-;") 'my-insert-semicolon)
    (global-set-key (kbd "M-j") 'my-join-lines)
    (global-set-key (kbd "C-o") 'open-next-line)
    (global-set-key (kbd "M-o") 'open-previous-line)
    (global-set-key (kbd "C-t") 'transpose-next-line)
    (global-set-key (kbd "M-t") 'transpose-previous-line)
  #+END_SRC
  
** Cursor movement

  #+BEGIN_SRC emacs-lisp
    (use-package mwim
      :ensure t
      :bind
      (("C-a" . mwim-beginning-of-line-or-code)
       ("C-e" . mwim-end-of-line-or-code))
      :pin melpa)
  #+END_SRC
  
  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "<home>") 'mwim-beginning-of-line-or-code)
    (global-set-key (kbd "<end>") 'mwim-end-of-line-or-code)
    (global-set-key (kbd "M-<") 'scroll-row-up)
    (global-set-key (kbd "M->") 'scroll-row-down)
    (global-set-key (kbd "C-<") 'xah-backward-block)
    (global-set-key (kbd "C->") 'xah-forward-block)
    (global-set-key (kbd "M-<up>") 'scroll-row-up)
    (global-set-key (kbd "M-<down>") 'scroll-row-down)
  #+END_SRC

*** Notes

    smarter-move-beginning-of-line is from [[https://emacsredux.com/blog/2013/05/22/smarter-navigation-to-the-beginning-of-a-line/][here]].
  
** Window movement

  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-x p") 'my-rearrange-windows)
  #+END_SRC
  
** Window and frame selection

  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-x C-o") 'other-frame)
  #+END_SRC
  
** Camel case

  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "M-c") 'toggle-camelcase-underscores)
  #+END_SRC
  
** Narrow or widen to the region

  #+BEGIN_SRC emacs-lisp
    (define-key ctl-x-map "n" #'narrow-or-widen-dwim)
  #+END_SRC

** Which Key package

  Configuration from [[https://github.com/daviwil/emacs-from-scratch/blob/master/Emacs.org][Emacs from scratch]].
  #+BEGIN_SRC emacs-lisp

    (use-package which-key
      :defer 0
      :diminish which-key-mode
      :config
      (which-key-mode)
      (setq which-key-idle-delay 1))
    
  #+END_SRC

** Unfill package

#+begin_src emacs-lisp
    (use-package unfill
      :ensure t
      :bind (("M-q" . unfill-toggle)))
#+end_src

* Environment

#+begin_src emacs-lisp

        (defun print-path-list (paths)
          "Print the paths in a list of strings like exec-path."
          (dolist (path paths)
            (prin1 path)
            (princ "\n")))

        (defun print-path-string (path-str)
          "Print the paths in a string like $PATH."
          (let* ((separator (if (memq window-system '(mac ns x)) ":" ";"))
                 (paths (split-string path-str separator)))
            (print-path-list paths)))

        (defun print-paths (paths)
          "Print a set of paths, either a string or a list of strings."
          (if (stringp paths)
              (print-path-string paths)
            (if (listp paths)
                (print-path-list paths)
              (princ "Argument `paths` is not a string or list of strings"))))

#+end_src

* Regions
  
  Kill or yank entire lines
  #+BEGIN_SRC emacs-lisp
    (use-package whole-line-or-region
      :ensure t
      :bind (("C-w" . whole-line-or-region-kill-region)
             ("M-w" . whole-line-or-region-copy-region-as-kill)))
  #+END_SRC

  Expand or contract the region by sexp
  #+BEGIN_SRC emacs-lisp
    (use-package expand-region
      :ensure t
      :config
      :bind (("C-=" . er/expand-region)))
  #+END_SRC

