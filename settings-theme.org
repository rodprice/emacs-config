#+TITLE: Emacs Theme and Fonts
#+STARTUP: overview indent

  
* Geometry

  #+BEGIN_SRC emacs-lisp
    (require 'saveplace)
    (setq-default save-place t)
  #+END_SRC

  Save emacs frames on exit, and restore them on startup
  #+BEGIN_SRC emacs-lisp
    ;; These are the same values that a bare-naked emacs uses on initial startup
    (defvar my-initial-geometry '(nil 80 38 100 100)
      "The initial frame geometry to use when no geometry file is present.")

    (defvar my-geometry-file
      (expand-file-name ".geometry" user-emacs-directory)
      "The file where frame geometry settings are saved.")

    (defun my-load-frame-geometry ()
      "Load saved frame geometry settings."
      (if (file-readable-p my-geometry-file)
          (with-temp-buffer
            (insert-file-contents my-geometry-file)
            (read (buffer-string)))
        my-initial-geometry))

    (defun my-get-geometry ()
      "Get the current geometry of the active frame."
      (mapcar
       (apply-partially 'frame-parameter nil)
       (list 'fullscreen 'width 'height 'top 'left)))

    (defun my-save-frame-geometry ()
      "Save current frame geometry settings."
      (with-temp-file my-geometry-file
        (print (my-get-geometry) (current-buffer))))

    (defun my-set-geometry ()
      "Set the default frame geometry using the values loaded from my-geometry-file."
      (let ((geom (my-load-frame-geometry)))
        (setq default-frame-alist
              (append
               default-frame-alist
               `((fullscreen . ,(nth 0 geom))
                 (width . ,(nth 1 geom))
                 (height . ,(nth 2 geom))
                 (top . ,(nth 3 geom))
                 (left . ,(nth 4 geom)))))))

    ;; Returns (top left bottom right) measured in pixels
    (defun my-get-geometry-pixels ()
      "Get the current geometry, measured in pixels, of the active frame."
      (let ((width (frame-pixel-width))
            (height (frame-pixel-height))
            (top (eval (frame-parameter nil 'top)))
            (left (eval (frame-parameter nil 'left))))
        (list top left (+ top width) (+ left height))))

    (defun my-get-margins-pixels ()
      "Return the margins remaining on each side of the frame, measured in pixels."
      (let ((frame-size (my-get-geometry-pixels))
            (display-size (cdr (assq 'workarea (frame-monitor-attributes)))))
        (list
         (- (nth 0 frame-size) (nth 0 display-size))      ; left side of the frame
         (- (nth 1 frame-size) (nth 1 display-size))      ; top side of the frame
         (- (nth 2 display-size) (nth 2 frame-size))      ; right side of the frame
         (- (nth 3 display-size) (nth 3 frame-size)))))   ; bottom side of the frame

    (defun my-geometry-startup-after-init ()
      "Called after loading the init file."
      (if (display-graphic-p)
          (progn
            (my-set-geometry)
            (add-hook 'kill-emacs-hook 'my-save-frame-geometry))))
            ;; (add-to-list 'default-frame-alist '(internal-border-width . 0))
            ;; (set-fringe-mode '(8 . 0)))
        ;; Menu bar always off in text mode
        ;; (menu-bar-mode -1))))

    (add-hook 'after-init-hook 'my-geometry-startup-after-init)
  #+END_SRC
  
* Theme

  The default font is set in the site-specific preload file.
  #+BEGIN_SRC emacs-lisp
    (unless (boundp 'my-default-font)
      (defvar my-default-font "Fira Code-14"))
  #+END_SRC
    
  Specify the default font.
  #+BEGIN_SRC emacs-lisp
    (add-to-list 'default-frame-alist `(font . ,my-default-font))
    (set-face-font 'default my-default-font)
  #+END_SRC
  
  Truncate long lines everywhere.
  #+BEGIN_SRC emacs-lisp
    (global-visual-line-mode 0)
    (setq-default truncate-lines t)
  #+END_SRC
    
  Highlight current line.
  #+BEGIN_SRC emacs-lisp
    (global-hl-line-mode t)
  #+END_SRC

  The following are face definitions from the zenburn theme.  These
  are not defined in the base16 theme above, with the exception of
  the builtin and constant faces.

      `(web-mode-builtin-face ((t (:inherit ,font-lock-builtin-face))))
      `(web-mode-comment-face ((t (:inherit ,font-lock-comment-face))))
      `(web-mode-constant-face ((t (:inherit ,font-lock-constant-face))))
      `(web-mode-css-at-rule-face ((t (:foreground ,zenburn-orange ))))
      `(web-mode-css-prop-face ((t (:foreground ,zenburn-orange))))
      `(web-mode-css-pseudo-class-face ((t (:foreground ,zenburn-green+3 :weight bold))))
      `(web-mode-css-rule-face ((t (:foreground ,zenburn-blue))))
      `(web-mode-doctype-face ((t (:inherit ,font-lock-comment-face))))
      `(web-mode-folded-face ((t (:underline t))))
      `(web-mode-function-name-face ((t (:foreground ,zenburn-blue))))
      `(web-mode-html-attr-name-face ((t (:foreground ,zenburn-orange))))
      `(web-mode-html-attr-value-face ((t (:inherit ,font-lock-string-face))))
      `(web-mode-html-tag-face ((t (:foreground ,zenburn-cyan))))
      `(web-mode-keyword-face ((t (:inherit ,font-lock-keyword-face))))
      `(web-mode-preprocessor-face ((t (:inherit ,font-lock-preprocessor-face))))
      `(web-mode-string-face ((t (:inherit ,font-lock-string-face))))
      `(web-mode-type-face ((t (:inherit ,font-lock-type-face))))
      `(web-mode-variable-name-face ((t (:inherit ,font-lock-variable-name-face))))
      `(web-mode-server-background-face ((t (:background ,zenburn-bg))))
      `(web-mode-server-comment-face ((t (:inherit web-mode-comment-face))))
      `(web-mode-server-string-face ((t (:inherit web-mode-string-face))))
      `(web-mode-symbol-face ((t (:inherit font-lock-constant-face))))
      `(web-mode-warning-face ((t (:inherit font-lock-warning-face))))
      `(web-mode-whitespaces-face ((t (:background ,zenburn-red))))

  Load hc-zenburn theme first, then load the base16 theme we will use
  throughout, except in web-mode.  This is a nasty hack used to make
  web-mode syntax highlight HTML, since otherwise the faces in the
  listing above are not defined.  I really should define these
  directly, but I kind of like the hc-zenburn highighting for HTML.

  #+BEGIN_SRC emacs-lisp
    (use-package hc-zenburn-theme
      :ensure t
      :config
      (load-theme 'hc-zenburn t))
  #+END_SRC
    
  #+BEGIN_SRC emacs-lisp
    (use-package base16-theme
      :ensure t
      :config
      (load-theme 'base16-tomorrow-night t)
      (let ((base00 (plist-get base16-tomorrow-night-theme-colors :base00))
            (base01 (plist-get base16-tomorrow-night-theme-colors :base01))
            (base02 (plist-get base16-tomorrow-night-theme-colors :base02))
            (base03 (plist-get base16-tomorrow-night-theme-colors :base03))
            (base04 (plist-get base16-tomorrow-night-theme-colors :base04))
            (base05 (plist-get base16-tomorrow-night-theme-colors :base05))
            (base06 (plist-get base16-tomorrow-night-theme-colors :base06))
            (base07 (plist-get base16-tomorrow-night-theme-colors :base07))
            (base08 (plist-get base16-tomorrow-night-theme-colors :base08))
            (base09 (plist-get base16-tomorrow-night-theme-colors :base09))
            (base0A (plist-get base16-tomorrow-night-theme-colors :base0A))
            (base0B (plist-get base16-tomorrow-night-theme-colors :base0B))
            (base0C (plist-get base16-tomorrow-night-theme-colors :base0C))
            (base0D (plist-get base16-tomorrow-night-theme-colors :base0D))
            (base0E (plist-get base16-tomorrow-night-theme-colors :base0E))
            (base0F (plist-get base16-tomorrow-night-theme-colors :base0F)))
        (setq face-remapping-alist
              `((show-paren-match
                 . (:foreground ,base0D
                    :background ,base01))
                (show-paren-mismatch
                 . (:strike-through t
                    :foreground ,base09
                    :background ,base01))
                (sp-show-pair-match-face
                 . (:foreground ,base0D
                    :background ,base01))
                (sp-show-pair-mismatch-face
                 . (:strike-through t
                    :foreground ,base09
                    :background ,base01))
                (font-lock-keyword-face
                 . (:foreground ,base0E))
                (font-lock-builtin-face
                 . (:foreground ,base0C))
                (font-lock-function-name-face
                 . (:foreground "cornflower blue"))
                (font-lock-doc-face
                 . (:foreground ,base0C))
                (font-lock-string-face
                 . (:foreground "slate gray"))
                (font-lock-comment-face
                 . (:foreground "light slate gray"))
                (font-lock-comment-delimiter-face
                 . (:foreground "light slate gray"))
                (py-builtins-face
                 . (:foreground "#ECBC9C"))
                (org-block
                 . (:foreground "#ECBC9C"))
                (fringe
                 . (:background unspecified))
                (avy-lead-face
                 . (:foreground "#FFD700"
                    :background unspecified
                    :weight bold))
                (avy-lead-face-0
                 . (:foreground "#FFD700"
                    :background unspecified
                    :weight bold))
                (avy-lead-face-2
                 . (:foreground "#FFD700"
                    :background unspecified
                    :weight bold))
                ))))
  #+END_SRC

* Fira Code mode

   See instructions [[https://github.com/tonsky/FiraCode/wiki/Emacs-instructions][here]]. The Fira Code Symbol font must be installed
   as well as the Fira Code font. The Fira Code Symbol font can be
   installed from AUR [[https://aur.archlinux.org/packages/otf-fira-code-symbol/][here]]. The Fira Code font itself is in the pacman
   community library.

   #+BEGIN_SRC emacs-lisp
   
(defun fira-code-mode--make-alist (list)
  "Generate prettify-symbols alist from LIST."
  (let ((idx -1))
    (mapcar
     (lambda (s)
       (setq idx (1+ idx))
       (let* ((code (+ #Xe100 idx))
          (width (string-width s))
          (prefix ())
          (suffix '(?\s (Br . Br)))
          (n 1))
     (while (< n width)
       (setq prefix (append prefix '(?\s (Br . Bl))))
       (setq n (1+ n)))
     (cons s (append prefix suffix (list (decode-char 'ucs code))))))
     list)))

(defconst fira-code-mode--ligatures
  '("www" "**" "***" "**/" "*>" "*/" "\\\\" "\\\\\\"
    "{-" "[]" "::" ":::" ":=" "!!" "!=" "!==" "-}"
    "--" "---" "-->" "->" "->>" "-<" "-<<" "-~"
    "#{" "#[" "##" "###" "####" "#(" "#?" "#_" "#_("
    ".-" ".=" ".." "..<" "..." "?=" "??" ";;" "/*"
    "/**" "/=" "/==" "/>" "//" "///" "&&" "||" "||="
    "|=" "|>" "^=" "$>" "++" "+++" "+>" "=:=" "=="
    "===" "==>" "=>" "=>>" "<=" "=<<" "=/=" ">-" ">="
    ">=>" ">>" ">>-" ">>=" ">>>" "<*" "<*>" "<|" "<|>"
    "<$" "<$>" "<!--" "<-" "<--" "<->" "<+" "<+>" "<="
    "<==" "<=>" "<=<" "<>" "<<" "<<-" "<<=" "<<<" "<~"
    "<~~" "</" "</>" "~@" "~-" "~=" "~>" "~~" "~~>" "%%"
    "x" ":" "+" "+" "*"))

(defvar fira-code-mode--old-prettify-alist)

(defun fira-code-mode--enable ()
  "Enable Fira Code ligatures in current buffer."
  (setq-local fira-code-mode--old-prettify-alist prettify-symbols-alist)
  (setq-local prettify-symbols-alist (append (fira-code-mode--make-alist fira-code-mode--ligatures) fira-code-mode--old-prettify-alist))
  (prettify-symbols-mode t))

(defun fira-code-mode--disable ()
  "Disable Fira Code ligatures in current buffer."
  (setq-local prettify-symbols-alist fira-code-mode--old-prettify-alist)
  (prettify-symbols-mode -1))

(define-minor-mode fira-code-mode
  "Fira Code ligatures minor mode"
  :lighter " Fira Code"
  (setq-local prettify-symbols-unprettify-at-point 'right-edge)
  (if fira-code-mode
      (fira-code-mode--enable)
    (fira-code-mode--disable)))

(defun fira-code-mode--setup ()
  "Setup Fira Code Symbols"
  (set-fontset-font t '(#Xe100 . #Xe16f) "Fira Code Symbol"))

(provide 'fira-code-mode)
   #+END_SRC
   
