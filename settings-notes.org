#+TITLE: Notes for non-emacs software
#+STARTUP: overview indent

* Anaconda3

** Notes

** Install

Following instructions [[https://dellwindowsreinstallationguide.com/installing-mambaforge-or-anaconda-on-linux/][here]] for =mamba-forge=.

** Uninstall

Following instructions [[https://dellwindowsreinstallationguide.com/windows-uninstall-anaconda/][here]]. First, I copied =envs/kalman= to a backup
directory =Anaconda3.old=.

  - Run Anaconda3 uninstaller.

    One or two files named =NUL= can't be uninstalled because of some
    obscure Windows [[https://learn.microsoft.com/en-US/troubleshoot/windows-server/backup-and-storage/cannot-delete-file-folder-on-ntfs-file-system][rule]]. It can be done from Windows' =cmd.exe=. The
    magic [[https://superuser.com/questions/282194/how-do-i-remove-a-file-named-nul-on-windows][incantation]] is =del \\?\C:\My\Path\NUL=.

  - Move configuration files to =Apps\zz-dot-files-backup\=.
    Directories searched include the following:
    - =C:\Users\rdprice=
    - =C:\Users\rdprice\AppData=
    - =C:\Users\rdprice\AppData\Local=
    - =C:\Users\rdprice\AppData\Roaming=
    - =C:\Users\rdprice\msys64\home\rdprice=
    - =Z:\=
    - =%AppData%= -> =Z:\AppData=
    - =%ProgramData%= -> =C:\ProgramData=

  - Delete Start Menu entries in the following directories:
    - =Z:\AppData\Microsoft\Windows\Start Menu\Programs=

  - Make sure there are no remaining entries in =%Path%=.

* CMake

** Notes

** Install

* Emacs

** Notes

** Install

* Git

** Notes

** Install

* GnuPG

** Notes

[[https://www.masteringemacs.org/article/keeping-secrets-in-emacs-gnupg-auth-sources][Keeping Secrets in Emacs]] gives a recipe for setting up [[info:auth#Top][auth-sources]].
They note that Emacs 29 has a bug related to =gpg= v.2.4.1+. I found out
the hard way. Trying to edit a gpg-encrypted file -- in this case,
=.authinfo.gpg= -- leads to Emacs hanging when you try to save the file.

To reproduce the problem, open =.authinfo.gpg= in Emacs, and edit the
file. Execute =M-x toggle-debug-on-quit=, then try to save the file.
Emacs will hang. Type =C-g= to get out, which will open a new window
with a backtrace. You will see that Emacs is stuck in
=epg-wait-for-status= waiting for =gpg= to return "BEGIN_DECRYPTION".

There's a quick fix: execute =(fset 'epg-wait-for-status 'ignore)=. When
first suggested, the Internet [[https://www.reddit.com/r/emacs/comments/18d6fmt/how_to_lock_yourself_out_of_a_gpg_encrypted_file/][reacted]] in horror. The problem is that
if you're using symmetric encryption, the file you're editing will be
garbled.

Another fix was suggested by [[https://dev.gnupg.org/p/gniibe/][gniibe]], involving a [[https://dev.gnupg.org/T6481][patch]] to =epg.el=. It
appears to do the same thing; that is, it stops Emacs from waiting for
"BEGIN_DECRYPTION". I applied it anyway, by hand, leaving comments in
the file to mark where I changed it. It didn't "take" right away; I
had to run =M-x emacs-lisp-byte-compile= first.

*** Patch

#+begin_src emacs-lisp :tangle no
  diff --git a/lisp/epg.el b/lisp/epg.el
  index 9da5a36ba3d..aeefad83f6c 100644
  --- a/lisp/epg.el
  +++ b/lisp/epg.el
  @@ -1443,10 +1443,7 @@ If you are unsure, use synchronous version of this function
       (error "Not a file"))
     (setf (epg-context-operation context) 'decrypt)
     (setf (epg-context-result context) nil)
  -  (epg--start context (list "--decrypt" "--" (epg-data-file cipher)))
  -  ;; `gpgsm' does not read passphrase from stdin, so waiting is not needed.
  -  (unless (eq (epg-context-protocol context) 'CMS)
  -    (epg-wait-for-status context '("BEGIN_DECRYPTION"))))
  +  (epg--start context (list "--decrypt" "--" (epg-data-file cipher))))

   (defun epg--check-error-for-decrypt (context)
     (let ((errors (epg-context-result-for context 'error)))
  @@ -1642,9 +1639,6 @@ If you are unsure, use synchronous version of this function
                        (epg-context-sig-notations context))
                       (if (epg-data-file plain)
                           (list "--" (epg-data-file plain)))))
  -  ;; `gpgsm' does not read passphrase from stdin, so waiting is not needed.
  -  (unless (eq (epg-context-protocol context) 'CMS)
  -    (epg-wait-for-status context '("BEGIN_SIGNING")))
     (when (epg-data-string plain)
       (if (eq (process-status (epg-context-process context)) 'run)
          (process-send-string (epg-context-process context)
  @@ -1751,10 +1745,6 @@ If you are unsure, use synchronous version of this function
                               recipients))
                       (if (epg-data-file plain)
                           (list "--" (epg-data-file plain)))))
  -  ;; `gpgsm' does not read passphrase from stdin, so waiting is not needed.
  -  (unless (eq (epg-context-protocol context) 'CMS)
  -    (epg-wait-for-status context
  -                         (if sign '("BEGIN_SIGNING") '("BEGIN_ENCRYPTION"))))
     (when (epg-data-string plain)
       (if (eq (process-status (epg-context-process context)) 'run)
          (process-send-string (epg-context-process context)
#+end_src

** Install

The interface to =gpg= is [[info:epa#Top][EasyPG Assistant]].

* Gpg4win

** Notes

See [[https://www.masteringemacs.org/article/keeping-secrets-in-emacs-gnupg-auth-sources][Keeping Secrets in Emacs]]. I've installed [[https://www.gpg4win.org/][Gpg4win]], but Emacs is
using the =gpg.exe= provided by MSYS2.

** Install

* Julia

** Notes

** Install

* Mamba forge

** Notes

** Install

Find the =mamba-forge= installer [[https://github.com/conda-forge/miniforge#mambaforge][here]]. I used the one with PyPy:
=Mambaforge-pypy3-Windows-x86_64.exe=. The installation directory
is =C:\Users\rdprice\Apps\mambaforge-pypy3=.

* Microsoft VS Code

** Notes

** Install

* MSYS2

** Notes

From the [[https://www.msys2.org/][web site]], "MSYS2 is a collection of tools and libraries
providing you with an easy-to-use environment for building, installing
and running native Windows software."

The MSYS2 version of =git= does not deal well with Windows file names
and paths, so I use the [[https://git-scm.com/downloads][Git for Windows]] version, which has a fork of
=git= that works on Windows. However, Git for Windows and MSYS2 contain
many of the same executables, including =bash=, which can cause all
kinds of havoc if paths aren't handled carefully.

** Install

Following the installation [[https://www.msys2.org/#installation][instructions]], download the latest installer.
At the time of writing, this was =msys2-x86_64-20230526.exe=. Double-
click on the installer and follow the instructions. I changed the
installation directory to =%USER_PROFILE%\Apps\msys64=, and installed
with user permissions. I use the =mingw64= code rather than the
recommended =ucrt64= code:

#+begin_src shell :tangle no
  $ echo $MSYSTEM
  MINGW64
  $ echo $MSYSTEM_PREFIX
  /mingw64
#+end_src

** Pacman

The ArchWiki docs for =pacman= are [[https://wiki.archlinux.org/title/Pacman][here]]. MSYS2-specific docs are [[https://www.msys2.org/docs/package-management/][here]].

* Pandoc

** Notes

** Install

* shellcheck

** Notes

** Install

* texlab

** Notes

** Install
