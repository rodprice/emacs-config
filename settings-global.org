#+TITLE: Settings that apply everywhere
#+STARTUP: overview indent

* Comint mode

  #+BEGIN_SRC emacs-lisp
    (add-hook 'comint-mode-hook
              (lambda ()
                (define-key comint-mode-map
                  (kbd "C-d") 'my-comint-delchar-or-eof-or-kill-buffer)
                (define-key comint-mode-map
                  (kbd "C-<up>") 'comint-previous-matching-input-from-input)
                (define-key comint-mode-map
                  (kbd "C-p") 'comint-previous-matching-input-from-input)
                (define-key comint-mode-map
                  (kbd "C-<down>") 'comint-next-matching-input-from-input)
                (define-key comint-mode-map
                  (kbd "C-n") 'comint-next-matching-input-from-input)))
  #+END_SRC
  
* Terminal modes

** Set exec-path

#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :if (memq window-system '(mac ns))
    :config
    (dolist (var '("SSH_AUTH_SOCK"
                   "SSH_AGENT_PID"
                   "GPG_AGENT_INFO"
                   "LANG"
                   "LC_CTYPE"
                   "NIX_SSL_CERT_FILE"
                   "NIX_PATH"))
      (add-to-list 'exec-path-from-shell-variables var))
    (exec-path-from-shell-initialize)
    )
#+end_src

** Shell mode

TBD. I usually use vterm now.

** Eshell mode

Configuration from [[https://github.com/daviwil/emacs-from-scratch/blob/master/Emacs.org][Emacs from scratch]]
#+BEGIN_SRC emacs-lisp

  (defun efs/configure-eshell ()
    ;; Save command history when commands are entered
    (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

    ;; Truncate buffer for performance
    (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

    (setq eshell-history-size         10000
          eshell-buffer-maximum-lines 10000
          eshell-hist-ignoredups t
          eshell-scroll-to-bottom-on-input t))

  (use-package eshell-git-prompt
    :ensure t
    :after eshell)

  (use-package eshell
    :hook (eshell-first-time-mode . efs/configure-eshell)
    :config
    (with-eval-after-load 'esh-opt
      (setq eshell-destroy-buffer-when-process-dies t)
      (setq eshell-visual-commands '("htop" "zsh" "vim")))
    (eshell-git-prompt-use-theme 'powerline))

#+END_SRC
  
** Vterm mode

Install vterm for Emacs
#+BEGIN_SRC emacs-lisp
  (use-package vterm
    :ensure t
    :commands vterm
    :config
    (setq vterm-max-scrollback 10000))
#+END_SRC
  
* Snippets

  First set up yasnippet.
  #+BEGIN_SRC emacs-lisp
    (use-package yasnippet
      :ensure t
      :config
      (yas-global-mode 1)
      (setq warning-suppress-types '((yasnippet backquote-change)))
      (define-key yas-minor-mode-map (kbd "<C-return>") 'yas-ido-expand))
  #+END_SRC

  Downloads the official snippet collection.
  #+BEGIN_SRC emacs-lisp
    (use-package yasnippet-snippets
      :ensure t)
  #+END_SRC

  Then set up autocomplete to use tabs
  #+BEGIN_SRC emacs-lisp
    ;; (use-package auto-complete
    ;;   :disable
    ;;   :config
    ;;   (progn
    ;;     (require 'auto-complete-config)
    ;;     (add-to-list 'ac-dictionary-directories "~/.emacs.d/ac-dict")
    ;;     (ac-config-default)
    ;;     (setq ac-auto-start nil)
    ;;     (ac-set-trigger-key "TAB")
    ;;     (ac-set-trigger-key "<tab>"))
    ;; )
  #+END_SRC

  According to [[https://truongtx.me/2013/01/06/config-yasnippet-and-autocomplete-on-emacs][the Truong blog]], when you press tab, this should let
  yasnippet run first.  If yasnippet cannot find an expansion, auto-
  complete will show completions.
  
* Ivy and counsel (disabled)

Configuration from [[https://github.com/daviwil/emacs-from-scratch/blob/master/Emacs.org][Emacs from scratch]].
#+BEGIN_SRC emacs-lisp

  (use-package ivy
    :disabled
    :ensure t
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))

  (use-package ivy-rich
    :disabled
    :ensure t
    :after ivy
    :init
    (ivy-rich-mode 1))

  (use-package counsel
    :disabled
    :ensure t
    :bind (("C-M-j" . 'counsel-switch-buffer)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history))
    :custom
    (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
    :config
    (counsel-mode 1))

#+END_SRC

Improved candidate sorting
#+BEGIN_SRC emacs-lisp

  (use-package ivy-prescient
    :disabled
    :ensure t
    :after counsel
    :custom
    (ivy-prescient-enable-filtering nil)
    :config
    ;; Uncomment the following line to have sorting remembered across sessions!
    ;(prescient-persist-mode 1)
    (ivy-prescient-mode 1))

#+END_SRC

Additional information in help buffers
#+BEGIN_SRC emacs-lisp
  (use-package helpful
    :disabled
    :ensure t
    :commands (helpful-callable helpful-variable helpful-command helpful-key)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+END_SRC

* Parenthesis matching

  Match parenthesis visually by color
  #+BEGIN_SRC emacs-lisp  
    (use-package rainbow-delimiters
      :ensure t
      :hook (prog-mode . rainbow-delimiters-mode))
  #+END_SRC

  #+BEGIN_SRC emacs-lisp
    (use-package smartparens
      :disabled
      :ensure t
      :init
        (progn
          (use-package smartparens-config)
          (use-package smartparens-html)
          (use-package smartparens-python)
          (use-package smartparens-javascript)
          (use-package smartparens-latex)
          (smartparens-global-mode 1)
          (show-smartparens-global-mode 1)
          (setq sp-show-pair-delay 0))
      :config
        (progn
          (sp-local-pair 'emacs-lisp-mode "`" nil :when '(sp-in-string-p)))
      :bind
        (("C-M-k" . sp-kill-sexp-with-a-twist-of-lime)
         ("C-M-f" . sp-forward-sexp)
         ("C-M-b" . sp-backward-sexp)
         ("C-M-n" . sp-up-sexp)
         ("C-M-d" . sp-down-sexp)
         ("C-M-u" . sp-backward-up-sexp)
         ("C-M-p" . sp-backward-down-sexp)
         ("C-M-w" . sp-copy-sexp)
         ;; ("M-s" . sp-splice-sexp)
         ("M-r" . sp-splice-sexp-killing-around)
         ("C-)" . sp-forward-slurp-sexp)
         ("C-}" . sp-forward-barf-sexp)
         ("C-(" . sp-backward-slurp-sexp)
         ("C-{" . sp-backward-barf-sexp)
         ("M-S" . sp-split-sexp)
         ("M-J" . sp-join-sexp)
         ("C-M-t" . sp-transpose-sexp)))
  #+END_SRC

* Folding

  Folding
  #+BEGIN_SRC emacs-lisp
    (use-package bicycle
      :after outline
      :bind (:map outline-minor-mode-map
                  ([C-tab] . bicycle-cycle)
                  ([S-tab] . bicycle-cycle-global)))

    (use-package prog-mode
      :config
      (add-hook 'prog-mode-hook 'outline-minor-mode)
      (add-hook 'prog-mode-hook 'hs-minor-mode))
  #+END_SRC

* Search
** Cursor movement

   Move around on the screen using search.  I've modified the
   following faces in Themes: avy-lead-face, avy-lead-face-0,
   avy-lead-face-2 to remove the distracting red and blue
   background colors.

   #+BEGIN_SRC emacs-lisp
   (use-package avy
     :ensure t
     :config
       (setq avy-background t)
       (setq avy-all-windows 'all-frames)
       (setq avy-timeout-seconds 0.5)
     :bind ("M-s" . avy-goto-char-timer))
   #+END_SRC

** Grepping

   Put the cursor in the results window after a grep.
   #+BEGIN_SRC emacs-lisp
     (defun my-other-other-window (&rest r)
       (message "Executing my-other-window after rgrep...")
       (other-window 1))
     (advice-add 'rgrep :after 'my-other-other-window)
   #+END_SRC
  
* Version control

  Git interface
  #+BEGIN_SRC emacs-lisp
    (use-package magit
      :ensure t
      :commands magit-status
      :bind (("C-c m" . magit-status)
             ("C-x C-m" . magit-dispatch-popup))
      :custom
      (magit-display-buffer-function
       #'magit-display-buffer-same-window-except-diff-v1))
  #+END_SRC

  Access to Github. See [[https://magit.vc/manual/ghub/index.html][Ghub User and Developer Manual]].
  #+BEGIN_SRC emacs-lisp
    (use-package forge
      :ensure t
      :after magit
      :config
      (setq auth-sources '("~/.emacs.d/.authinfo")))
  #+END_SRC
* Virtual environments

#+BEGIN_SRC emacs-lisp
  (use-package conda
    :ensure t
    :config
    (progn
      (conda-env-initialize-interactive-shells)
      (conda-env-initialize-eshell)
      (conda-env-autoactivate-mode 0)
      (custom-set-variables '(conda-anaconda-home "~/opt/anaconda3/"))
      (add-hook 'find-file-hook
                (lambda ()
                  (when (bound-and-true-p conda-project-env-path)
                    (conda-env-activate-for-buffer))))))
#+END_SRC

* Language server

Install language server before executing the following.
lsp-ui-sideline to adjust lsp-ui behavior
lsp-focus-frame to put cursor in documentation popup
#+BEGIN_SRC emacs-lisp
  (defun my-lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments
          '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))

  (use-package lsp-mode
    :ensure t
    :commands (lsp lsp-deferred)
    :hook (lsp-mode . my-lsp-mode-setup)
    :init
    (setq lsp-keymap-prefix "C-c l")
    :config
    (lsp-enable-which-key-integration t))

  (use-package lsp-ui
    :ensure t
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom))
#+END_SRC

  (use-package lsp-treemacs
      :after lsp)

  (use-package lsp-ivy)

  (use-package which-key)

(use-package typescript-mode
    :mode "\\.ts\\'"
    :hook (typescript-mode . lsp-deferred)
    :config
    (setq typescript-indent-level 2))

Completion (emacs completion-at-point with ivy, perhaps)
Gives automatic completion menu
Signature help (eldoc?, ivy?)

(use-package company
      :after lsp-mode
      :hook (lsp-mode . company-mode)
      :bind (:map company-active-map
                  ("<tab>" . company-complete-selection))
            (:map lsp-mode-map
                  ("<tab>" . company-indent-or-complete-common))
      :custom
      (company-minimum-prefix-length 1)
      (company-idle-delay 0.0))

    (use-package company-box
      :hook (company-mode . company-box-mode))


Disable line numbers for some modes
            (dolist (mode '(org-mode-hook
                            term-mode-hook
                            shell-mode-hook
                            treemacs-mode-hook
                            eshell-mode-hook))
              (add-hook mode (lambda () (display-line-numbers-mode 0))))

