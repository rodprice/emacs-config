#+TITLE: Emacs configuration for programming
#+STARTUP: overview indent

* Preliminaries

All functions below use lexical binding.
#+begin_src emacs-lisp
;; -*- coding: utf-8; lexical-binding: t -*-
(message "... starting settings-programming")
#+end_src

This configuration requires packages

  - magit
  - toml

External programs that should be on =exec-path= are


The file =settings-minimal.org= should be loaded before loading this
file.

* Tree sitter

Tree sitter is a library that transforms source code into a concrete
syntax tree, first included in Emacs version 29. See [[https://www.masteringemacs.org/article/how-to-get-started-tree-sitter][here]] for a nice
introduction. Also read [[https://archive.casouri.cc/note/2023/tree-sitter-in-emacs-29/index.html][Tree-sitter in Emacs 29 and Beyond]] and the
[[https://archive.casouri.cc/note/2023/tree-sitter-starter-guide/index.html][Tree-sitter Starter Guide]] from the developers.

Tree sitter requires a grammar for each language it can
process, which must be compiled from source into a library (i.e. .so)
file. These are not included in Emacs, but must be obtained elsewhere.
Here is a list current as of 5 Dec 2023:
#+begin_src emacs-lisp :tangle no
  (unless (< emacs-major-version 29)
    (setq treesit-language-source-alist
          '((bash "https://github.com/tree-sitter/tree-sitter-bash")
            (cmake "https://github.com/uyha/tree-sitter-cmake")
            (cpp "https://github.com/tree-sitter/tree-sitter-cpp")
            (css "https://github.com/tree-sitter/tree-sitter-css")
            (elisp "https://github.com/Wilfred/tree-sitter-elisp")
            (embedded-template "https://github.com/tree-sitter/tree-sitter-embedded-template")
            (go "https://github.com/tree-sitter/tree-sitter-go")
            (haskell "https://github.com/tree-sitter/tree-sitter-haskell")
            (html "https://github.com/tree-sitter/tree-sitter-html")
            (java "https://github.com/tree-sitter/tree-sitter-java")
            (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")
            (jsdoc "https://github.com/tree-sitter/tree-sitter-jsdoc")
            (json "https://github.com/tree-sitter/tree-sitter-json")
            (julia "https://github.com/tree-sitter/tree-sitter-julia")
            (make "https://github.com/alemuller/tree-sitter-make")
            (markdown "https://github.com/ikatyang/tree-sitter-markdown")
            (python "https://github.com/tree-sitter/tree-sitter-python")
            (regex "https://github.com/tree-sitter/tree-sitter-regex")
            (toml "https://github.com/tree-sitter/tree-sitter-toml")
            (tsq "https://github.com/tree-sitter/tree-sitter-tsq")
            (tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")
            (typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src")
            (yaml "https://github.com/ikatyang/tree-sitter-yaml"))))
#+end_src

These can be compiled by hand with =M-x treesit-install-language-grammar=
or installed all at once with
#+begin_src emacs-lisp :tangle no
  ;; Doesn't appear to do anything...
  (unless (< emacs-major-version 29)
    (mapc #'treesit-install-language-grammar
          (mapcar #'car treesit-language-source-alist)))
#+end_src

The following variable shadows the generic mode listed with the Tree
sitter-enabled version.
#+begin_src emacs-lisp :tangle no
  (unless (< emacs-major-version 29)
    (setq major-mode-remap-alist
          '((yaml-mode . yaml-ts-mode)
            (bash-mode . bash-ts-mode)
            (js2-mode . js-ts-mode)
            (typescript-mode . typescript-ts-mode)
            (json-mode . json-ts-mode)
            (css-mode . css-ts-mode)
            (python-mode . python-ts-mode))))
#+end_src

** Emacs 29 release note

New major modes based on the tree-sitter library.
These new major modes are available if Emacs was built with the
tree-sitter library.  They provide support for font-locking,
indentation, and navigation by defuns based on parsing the buffer text
by a tree-sitter parser.  Some major modes also offer support for
Imenu and 'which-func'.

The new modes based on tree-sitter are for now entirely optional, and
you must turn them on manually, or load them in your init file, or
customize 'auto-mode-alist' to turn them on automatically for certain
files.  You can also customize 'major-mode-remap-alist' to
automatically turn on some tree-sitter based modes for the same files
for which a "built-in" mode would be turned on.  For example:

    (add-to-list 'major-mode-remap-alist '(ruby-mode . ruby-ts-mode))

If you try these modes and don't like them, you can go back to the
"built-in" modes by restarting Emacs.  (If you use desktop.el to save
and restore Emacs sessions, make sure no buffer under these modes is
recorded in the desktop file, before restarting.)  But please tell us
why you didn't like the tree-sitter based modes, so that we could try
improving them.

Each major mode based on tree-sitter needs a language grammar library,
usually named "libtree-sitter-LANG.so" ("libtree-sitter-LANG.dll" on
MS-Windows), where LANG is the corresponding language name.  Emacs
looks for these libraries in the following places:

 . in the directories mentioned in the list 'treesit-extra-load-path'
 . in the "tree-sitter" subdirectory of your 'user-emacs-directory'
   (by default, "~/.emacs.d/tree-sitter")
 . in the standard system directories where other shared libraries are
   usually installed

We recommend to install these libraries in one of the standard system
locations (the last place in the above list).

If a language grammar library required by a mode is not found in any
of the above places, the mode will display a warning when you try to
turn it on.

* Version control

** VC package

#+begin_src emacs-lisp
  (use-package vc
    :ensure nil
    :config
    (add-to-list 'display-buffer-alist
                 '("\\*vc-dir\\*"
                   (display-buffer-at-bottom)
                   (window-height . fit-window-to-buffer))))
#+end_src

** Magit package

Note: An example =magit= configuration can be found [[https://gist.github.com/soonhokong/235ae79cb0639b15f8b1][here]].
Note: Magit uses a package =with-editor.el= to find an editor when
committing from Emacs. [[https://magit.vc/manual/with-editor/Using-the-With_002dEditor-package.html][Here]] is some documentation.

In spite of all the rave reviews, I'm not sure this package is worth
having. [[https://www.masteringemacs.org/article/introduction-magit-emacs-mode-git][This]] is a nice introductory article.
#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :init
    (setq magit-git-executable my-git-executable)
    :config
    (remove-hook 'server-switch-hook 'magit-commit-diff)
    (remove-hook 'with-editor-filter-visit-hook 'magit-commit-diff))
#+end_src

** Status display

Note: The author of =git-gutter= insists on hard-coding the value of the
=git= executable, so using this with Git for Windows and MSYS2 won't
work without extensive changes to =git-gutter.el=.

#+begin_src emacs-lisp :tangle no
  (when (eq system-type 'windows-nt)
    (use-package git-gutter
      :ensure nil
      :load-path "lisp"
      :hook (prog-mode . git-gutter-mode)
      :custom
      (git-gutter:update-interval 0.02)
      (git-gutter:git-program my-git-executable)))
#+end_src

Make the gutter show added/deleted/modified code blocks ([[https://ianyepan.github.io/posts/emacs-git-gutter/][Ian Y.E. Pan]] blog).
#+begin_src emacs-lisp :tangle no
  (unless (eq system-type 'windows-nt)
    (use-package git-gutter
      :ensure nil
      :load-path "lisp"
      :hook (prog-mode . git-gutter-mode)
      :custom
      (git-gutter:update-interval 0.02)))
#+end_src

#+begin_src emacs-lisp :tangle no
  (use-package git-gutter-fringe
    :ensure t
    :config
    (define-fringe-bitmap 'git-gutter-fr:added [224] nil nil '(center repeated))
    (define-fringe-bitmap 'git-gutter-fr:modified [224] nil nil '(center repeated))
    (define-fringe-bitmap 'git-gutter-fr:deleted [128 192 224 240] nil nil 'bottom))
#+end_src

* Code formatting

The package [[https://github.com/radian-software/apheleia][apheleia]] handles code formatters like [[https://github.com/psf/black][Black]] for Python or
[[https://clang.llvm.org/docs/ClangFormat.html][clang-format]] for C/C++ in a language-independent way. See an example
configuration [[https://gitlab.com/gSwag/emacs-configuration/-/blob/master/.emacs-config.org][here]]. There's a convenient web app to set =clang-format=
options [[https://clang.llvm.org/docs/ClangFormat.html][here]].

* Project

Note: [[https://github.com/karthink/project-x][project-x.el]] has some possibly useful extensions. There's also
[[https://github.com/redguardtoo/find-file-in-project][find-file-in-project.el]].

#+begin_src emacs-lisp
  (use-package project
    :ensure nil
    )
#+end_src

Here is a simple [[https://blog.sumtypeofway.com/posts/emacs-config.html][configuration]] for Emacs' new built-in =project.el=.
#+begin_src emacs-lisp :tangle no
    (use-package project
      :pin gnu
      ;; :bind (("C-c k" . #'project-kill-buffers)
      ;;        ("C-c m" . #'project-compile)
      ;;        ("C-x f" . #'find-file)
      ;;        ("C-c f" . #'project-find-file)
      ;;        ("C-c F" . #'project-switch-project))
      :custom
      ;; Customize the options shown upon switching projects.
      (project-switch-commands
       '((project-find-file "Find file")
         (magit-project-status "Magit" ?g)
         (deadgrep "Grep" ?h)))
      (compilation-always-kill t)
      (project-vc-merge-submodules nil))
  ;;    (project-current-directory-override nil)
  ;;    (project-vc-include-untracked nil))
  ;;    (project-directory-exclusion-list '())
#+end_src

A =consult= package, [[https://github.com/Qkessler/consult-project-extra][consult-project-extra.el]] for project.el.
#+begin_src emacs-lisp :tangle no
  (use-package consult-project-extra
    :ensure t)
#+end_src

Switching projects by visiting a file, from [[https://macowners.club/posts/custom-functions-5-navigation/][here]].
#+begin_src emacs-lisp
  (defun timu-nav-project-switch-project (dir)
    "\"Switch\" to another project by running an Emacs command.
  Directly use `project-find-file' instead of getting prompted.

  When called in a program, it will use the project corresponding
  to directory DIR."
    (interactive (list (project-prompt-project-dir)))
      (let ((project-current-directory-override dir))
      (project-find-file)))
#+end_src

Save project buffers only before compilation, from [[https://andreyorst.gitlab.io/posts/2022-07-16-project-el-enhancements/][here]].
#+begin_src emacs-lisp
  (defun project-save-some-buffers (&optional arg)
    "Save some modified file-visiting buffers in the current project.

  Optional argument ARG (interactively, prefix argument) non-nil
  means save all with no questions."
    (interactive "P")
    (let* ((project-buffers (project-buffers (project-current)))
           (pred (lambda () (memq (current-buffer) project-buffers))))
      (funcall-interactively #'save-some-buffers arg pred)))
#+end_src

#+begin_src emacs-lisp :tangle no
  (define-advice project-compile (:around (fn) save-project-buffers)
    "Only ask to save project-related buffers."
    (let* ((project-buffers (project-buffers (project-current)))
           (compilation-save-buffers-predicate
            (lambda () (memq (current-buffer) project-buffers))))
      (funcall fn)))
#+end_src

#+begin_src emacs-lisp :tangle no
  (define-advice recompile (:around (fn &optional edit-command) save-project-buffers)
    "Only ask to save project-related buffers if inside a project."
    (if (project-current)
        (let* ((project-buffers (project-buffers (project-current)))
               (compilation-save-buffers-predicate
                (lambda () (memq (current-buffer) project-buffers))))
          (funcall fn edit-command))
      (funcall fn edit-command)))
#+end_src

* Projectile (disabled)

Maintain projects in emacs. Color me skeptical. Documentation for
=projectile= is [[https://docs.projectile.mx/projectile/index.html][here]]. There's a =consult= package, [[https://gitlab.com/OlMon/consult-projectile][consult-projectile]].
David Wilson blabbers on about =projectile= in this [[https://www.youtube.com/watch?v=INTu30BHZGk&list=PLEoMzSkcN8oPH1au7H6B7bBJ4ZO7BXjSZ&index=4&t=130s][video]].
#+begin_src emacs-lisp :tangle no
  (use-package projectile
    :ensure t
    :diminish projectile-mode
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)  ;; conflicts with cape
    :init
    (when (file-directory-p "~/working")
      (setq projectile-project-search-path '("~/working")))
    (setq projectile-switch-project-action #'projectile-dired)
    :config (projectile-mode))
#+end_src

#+begin_src emacs-lisp :tangle no
  (projectile-global-mode t)
  (setq projectile-indexing-method 'git)
  (setq projectile-enable-caching t)
#+end_src

* Man pages

Probably should put this in the site/*-preload file.
#+begin_src emacs-lisp :tangle no
  (defvar my-man-paths
    (when (boundp 'my-msystem-dir)
      (mapcar
       #'my-prefix
       '("mingw64/local/man/"
         "mingw64/share/man/"
         "usr/local/man/"
         "usr/share/man/"
         "usr/man/"
         "share/man/"))))
#+end_src

Windows-only man pages from MSYS2
#+begin_src emacs-lisp :tangle no
  (when (boundp 'my-msys2-dir)
    (use-package woman
      :preface
      (defun my-prefix (path &optional prefix)
        "Make PATH an absolute path using PREFIX."
        (let ((prefix (or prefix my-msystem-dir)))
          (expand-file-name path prefix)))
      :custom
      (woman-manpath my-man-paths)))
#+end_src

* Linting

Documentation for flycheck [[https://www.flycheck.org][here]].
#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :demand
    :preface
    (defun mp-flycheck-prefer-eldoc ()
      (add-hook 'eldoc-documentation-functions #'mp-flycheck-eldoc nil t)
      (setq eldoc-documentation-strategy 'eldoc-documentation-compose-eagerly)
      (setq flycheck-display-errors-function nil)
      (setq flycheck-help-echo-function nil))
    :init
    (setq flycheck-highlighting-mode 'symbols
          flycheck-indication-mode 'left-fringe
          flycheck-standard-error-navigation t)
    :bind (("M-n" . flycheck-next-error)
           ("M-p" . flycheck-previous-error)
           ("M-l" . flycheck-list-errors))
    :hook ((flycheck-mode . mp-flycheck-prefer-eldoc)
           (after-init . global-flycheck-mode)))
#+end_src

Make flycheck play nice with eldoc. From
[[https://www.masteringemacs.org/article/seamlessly-merge-multiple-documentation-sources-eldoc][Seamlessly Merge Documentation Sources with Eldoc]].
#+begin_src emacs-lisp
  (defun mp-flycheck-eldoc (callback &rest _ignored)
     "Print flycheck messages at point by calling CALLBACK."
     (when-let ((flycheck-errors (and flycheck-mode (flycheck-overlay-errors-at (point)))))
       (mapc
        (lambda (err)
          (funcall callback
             (format "%s: %s"
                     (let ((level (flycheck-error-level err)))
                       (pcase level
                         ('info (propertize "I" 'face 'flycheck-error-list-info))
                         ('error (propertize "E" 'face 'flycheck-error-list-error))
                         ('warning (propertize "W" 'face 'flycheck-error-list-warning))
                         (_ level)))
                     (flycheck-error-message err))
             :thing (or (flycheck-error-id err)
                        (flycheck-error-group err))
             :face 'font-lock-doc-face))
        flycheck-errors)))
#+end_src

#+begin_src emacs-lisp
  (use-package eldoc
    :preface
     (add-to-list 'display-buffer-alist
                 '("^\\*eldoc for" display-buffer-at-bottom
                   (window-height . 4)))
     (setq eldoc-documentation-strategy 'eldoc-documentation-compose-eagerly)
    :config
     (eldoc-add-command-completions "paredit-")
     (eldoc-add-command-completions "combobulate-"))
#+end_src

* Code folding

** Origami mode

A code folding package, found [[https://github.com/gregsexton/origami.el][here]]. It's buggy, but I haven't found
anything better.
#+begin_src emacs-lisp
  (use-package origami
    :ensure t
    :bind (:map origami-mode-map
                ("C-<tab>" . origami-recursively-toggle-node)
                ("C-S-<tab>" . origami-toggle-all-nodes))
    :hook (origami-mode . my-add-origami-emacs-lisp-parser))
#+end_src

** Treesit-fold package (disabled)

A code folding package using Tree-sitter, found [[https://github.com/abougouffa/treesit-fold][here]]. The author says
that it's not production-quality, but it works for him.
#+begin_src emacs-lisp :tangle no
  (when (>= emacs-major-version 29)
    (use-package fringe-helper
      :ensure t)
    (use-package treesit-fold
      :load-path "lisp")
    (use-package treesit-fold-indicators
      :after treesit-fold
      :load-path "lisp"))
#+end_src

** Ts-fold package (disabled)

A code folding package using treesitter, found [[https://github.com/emacs-tree-sitter/ts-fold][here]]. It doesn't use
Emacs 29's built-in tree-sitter code, but instead uses a package
documented [[https://emacs-tree-sitter.github.io/][here]]. This [[https://github.com/emacs-tree-sitter/ts-fold/issues/61][issue]] explains why.
#+begin_src emacs-lisp :tangle no
  (unless (< emacs-major-version 29)
    (use-package tree-sitter
      :ensure t)
    (use-package tree-sitter-langs
      :ensure t)
    (use-package ts-fold
      :load-path "lisp"
      :ensure t
      :config
      (require 'ts-fold)
      (global-ts-fold-mode)))
#+end_src

** Hide-show package (disabled)

Code from [[https://karthinks.com/software/simple-folding-with-hideshow/][karthinks]] blog.
#+begin_src emacs-lisp :tangle no
  (use-package hideshow
    :ensure t
    :config
    (defun hs-cycle (&optional level)
      (interactive "p")
      (let (message-log-max
            (inhibit-message t))
        (if (= level 1)
            (pcase last-command
              ('hs-cycle
               (hs-hide-level 1)
               (setq this-command 'hs-cycle-children))
              ('hs-cycle-children
               ;; TODO: Fix this case. `hs-show-block' needs to be
               ;; called twice to open all folds of the parent
               ;; block.
               (save-excursion (hs-show-block))
               (hs-show-block)
               (setq this-command 'hs-cycle-subtree))
              ('hs-cycle-subtree
               (hs-hide-block))
              (_
               (if (not (hs-already-hidden-p))
                   (hs-hide-block)
                 (hs-hide-level 1)
                 (setq this-command 'hs-cycle-children))))
          (hs-hide-level level)
          (setq this-command 'hs-hide-level))))

    (defun hs-global-cycle ()
      (interactive)
      (pcase last-command
        ('hs-global-cycle
         (save-excursion (hs-show-all))
         (setq this-command 'hs-global-show))
        (_ (hs-hide-all))))

    :bind (:map prog-mode-map
                (("C-<tab>" . hs-cycle)
                 ("S-C-<tab>" . hs-global-cycle)))

    :hook (prog-mode . hs-minor-mode))
#+end_src

** Junkyard

C-<tab> and C-S-<tab> are stolen by other apps in some environments,
so I use the key binding C-+ and some prefix arguments instead.
#+begin_src emacs-lisp :tangle no
  (use-package origami
    :ensure t
    :bind (:map origami-mode-map
                ("C-+" . my-origami-toggle-nodes))
    :hook (origami-mode . my-add-origami-emacs-lisp-parser))
#+end_src

#+begin_src emacs-lisp
  (defun my-origami-toggle-nodes (arg)
    "Toggle the code fold around point."
    (interactive "P")
    (cond
     ((null arg)
      (call-interactively #'origami-recursively-toggle-node))
     ((equal arg '(4))
      (call-interactively #'origami-toggle-all-nodes))
     ((equal arg '(16))
      (call-interactively #'origami-show-only-node))
     (t
      (call-interactively #'origami-reset))))
#+end_src

* Eglot package

Note: Eglot's manual is [[https://joaotavora.github.io/eglot/][here]].

Use [[https://github.com/joaotavora/eglot][Eglot]] with Pyright, a language server for Python.
#+begin_src emacs-lisp :tangle no
  (use-package eglot
    :ensure t
    :after conda
    :defer t
    :preface
    (defun mp-eglot-eldoc ()
      (setq eldoc-documentation-strategy
            'eldoc-documentation-compose-eagerly))
    :custom
    (eglot-connect-timeout 120)   ; my work computer is slow, slow, slow
    (eglot-stay-out-of 'company)
    (eglot-report-progress t)
    :hook ((eglot-managed-mode . mp-eglot-eldoc)
           (python-mode . eglot-ensure)))
#+end_src

Instructions [[https://github.com/intramurz/flycheck-eglot][here]].
#+begin_src emacs-lisp :tangle no
  (use-package flycheck-eglot
    :ensure t
    :after (flycheck eglot)
    :config (global-flycheck-eglot-mode 1))
#+end_src

* LSP mode (disabled)

Note: Another [[https://gitlab.com/gSwag/emacs-configuration/-/blob/master/.emacs-config.org][configuration]] for LSP might work better than the one
below (maybe?). Hope springs eternal.

#+begin_src emacs-lisp :tangle no
  (defun my-workspace-folders (added removed)
    (message "--- Running my-workspace-folders")
    (message "--- argument 'added' is %s" added)
    (message "--- argument 'removed' is %s" removed))
#+end_src

Note: The configuration below is from [[https://ianyepan.github.io/posts/emacs-ide/][Building an Intelligent Emacs]]
and the [[https://github.com/minad/corfu/wiki#basic-example-configuration-with-orderless][Corfu wiki]]. Documentation is at the =lsp-mode= [[https://emacs-lsp.github.io/lsp-mode/][site]]. Main
features are found [[https://emacs-lsp.github.io/lsp-mode/page/main-features/][here]]. The =advice= below comes from the LSP [[https://emacs-lsp.github.io/lsp-mode/page/faq/][FAQ]].
#+begin_src emacs-lisp :tangle no
  (use-package lsp-mode
    :ensure t
    :commands lsp
    :init
    (defun my-lsp-mode-setup-completion ()
      (setf (alist-get 'styles (alist-get 'lsp-capf completion-category-defaults))
            '(orderless))) ;; Configure orderless
    ;; (advice-add 'lsp :before
    ;;             (lambda (&rest _args)
    ;;               (eval '(setf (lsp-session-server-id->folders (lsp-session)) (ht))))
    :config
    ;; Stop emacs from asking about this when in .dir-locals.el
    (put 'lsp-file-watch-ignored-directories
         'safe-local-variable
         #'my-list-of-strings-p)

    (setq lsp-completion-provider :none)
    (setq lsp-auto-guess-root t)
    (setq lsp-log-io nil)
    (setq lsp-restart 'auto-restart)
    (setq lsp-enable-symbol-highlighting nil)
    (setq lsp-enable-on-type-formatting nil)
    (setq lsp-signature-auto-activate nil)
    (setq lsp-signature-render-documentation nil)
    (setq lsp-eldoc-hook nil)
    (setq lsp-modeline-code-actions-enable nil)
    (setq lsp-modeline-diagnostics-enable nil)
    (setq lsp-headerline-breadcrumb-enable nil)
    (setq lsp-semantic-tokens-enable nil)
    (setq lsp-enable-folding nil)
    (setq lsp-enable-imenu nil)
    (setq lsp-enable-snippet nil)
    (setq read-process-output-max (* 1024 1024)) ;; 1MB
    (setq lsp-idle-delay 0.5)
    (setq lsp-log-io t)                   ;; DEBUG
    :hook
    (((c-mode          ; clangd
       c++-mode        ; clangd
       c-or-c++-mode   ; clangd
       java-mode       ; eclipse-jdtls
       js-mode         ; ts-ls (tsserver wrapper)
       js-jsx-mode     ; ts-ls (tsserver wrapper)
       typescript-mode ; ts-ls (tsserver wrapper)
       python-mode     ; pyright
       web-mode        ; ts-ls/HTML/CSS
       haskell-mode    ; haskell-language-server
       ) . lsp-deferred)
     (lsp-mode . lsp-enable-which-key-integration)
     (lsp-completion-mode . my-lsp-mode-setup-completion)
     (lsp-after-open . lsp-origami-try-enable)
     (lsp-workspace-folders-changed . my-workspace-folders)))
#+end_src

Consult interface for symbols and LSP diagnostics, found [[https://github.com/gagbo/consult-lsp][here]].
#+begin_src emacs-lisp :tangle no
  (use-package consult-lsp
    :ensure t)
#+end_src

Send LSP data to =origami.el= for code folding. Minimal documentation [[https://github.com/emacs-lsp/lsp-origami][here]].
#+begin_src emacs-lisp :tangle no
  (use-package lsp-origami
    :ensure t
    :after lsp-mode
    :config
    (setq lsp-enable-folding t)
    :hook (prog-mode . origami-mode))
#+end_src

#+begin_src emacs-lisp :tangle no
  (use-package lsp-ui
    :ensure t
    :after lsp-mode
    :commands lsp-ui-mode
    :config
    (setq lsp-ui-doc-enable nil)
    (setq lsp-ui-doc-header t)
    (setq lsp-ui-doc-include-signature t)
    (setq lsp-ui-doc-border (face-foreground 'default))
    (setq lsp-ui-sideline-show-code-actions t)
    (setq lsp-ui-sideline-delay 0.05)
    :bind (:map lsp-ui-mode-map
                ("C-c i" . lsp-ui-menu))
    :hook
    (lsp-mode . lsp-ui-menu))
#+end_src

* DAP mode (disabled)

Documentation for DAP is [[https://emacs-lsp.github.io/dap-mode/][here]]. Python configuration for DAP is [[https://emacs-lsp.github.io/dap-mode/page/configuration/#python][here]].
Overall configuration is [[https://emacs-lsp.github.io/dap-mode/page/configuration/][here]]. An interesting configuration with a
unique hydra, etc, is [[https://sqrtminusone.xyz/configs/emacs/#dap][here]].

A starting point for a configuration from [[https://blog.sumtypeofway.com/posts/emacs-config.html][here]].
#+begin_src emacs-lisp :tangle no
  (use-package dap-mode
    :ensure t
    :bind
    (:map dap-mode-map
     ("C-c b b" . dap-breakpoint-toggle)
     ("C-c b r" . dap-debug-restart)
     ("C-c b l" . dap-debug-last)
     ("C-c b d" . dap-debug))
    :custom
    (dap-print-io t)
    (lsp-enable-dap-auto-configure t)
    :init
    (defun pt/turn-on-debugger ()
      (interactive)
      (dap-mode)
      (dap-auto-configure-mode)
      (dap-ui-mode)
      (dap-ui-controls-mode)))
    ;; :hook
    ;; (dap-stopped . (lambda (arg) (call-interactively #'dap-hydra))))
#+end_src

* Notes

Compiling Emacs 29 on Windows with Msys2, [[https://readingworldmagazine.com/emacs/2022-02-24-compiling-emacs-29-from-source-on-windows/][here]].

The psychology of bad habits, [[https://iai.tv/video/the-psychology-of-bad-habits-susan-michie][here]].

Look for the section "space as control key" in this guy's [[https://github.com/svend/dot-emacsd][config]].
Might be a way to circumvent browser's nasty habit of stealing key
strokes. Also, see "custom hook for all major modes":
#+begin_src emacs-lisp :tangle no
(defun my/run-local-vars-mode-hook ()
  "Run a hook for the `major-mode` after the local variables have been processed."
  (run-hooks (intern (concat (symbol-name major-mode) "-local-vars-hook"))))
(add-hook 'hack-local-variables-hook 'my/run-local-vars-mode-hook)
#+end_src

Make your blog look like the [[https://github.com/moble/www_black-holes_org][black-holes.org]] website.

Installing Doom Emacs through =git-bash=, [[https://earvingad.github.io/posts/doom_emacs_windows/][here]].

Really irritating name, [[https://github.com/p3r7/awesome-elisp][Awesome Elisp]], but a useful cookbook guide.

Reproducible research and other things through [[https://github.com/jkitchin/scimax][Scimax]]. Python code
from the same author to work with org-mode, etc, called [[https://github.com/jkitchin/pycse][pycse]].
